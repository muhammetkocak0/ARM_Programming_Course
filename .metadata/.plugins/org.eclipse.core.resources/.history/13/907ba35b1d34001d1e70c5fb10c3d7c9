
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"

void RCC_Configuration_Registers()
{
	RCC->CR &= ~(1<<0);  //HSI kapattik
    RCC->CR |= (1<<16);  //HSE actik
    while(!(RCC->CR & 1<<17)); //HSE'nin acilip acilmadigini kontrol eder
    RCC->CR |= (1<<19);  //CSS ON bitini aktif eder bu bit clock korumasý saglar

    RCC->PLLCFGR= 0x00000000; //register'ý sýfýrlar

    RCC->PLLCFGR |=(4<<0); //PLLM 4 olarak ayarlar
    RCC->PLLCFGR |=(168<<6); // PLLN 168 olarak ayarlar
    RCC->PLLCFGR |=(1<<22); //PLL'i HSE icin aktif eder

    RCC->CR |= (1<<24); //PLL ON aktif eder
    while(!(RCC->CR & 1<<25)); //PLL acilip acilmadigini kontrol eder

    RCC->CFGR |= (1<<1); //clock'un hangi modda çalýþacaðýný seçer biz PLL yaptýk
    while(!(RCC->CFGR & 1<<1)); //modun kabul edilip edilmediðini sorgular
}
void gpio_for_uart_cfg()
{
	RCC->AHB1ENR |=(1<<0);
	GPIOA->MODER |= (1<<5)|(1<<7);
	GPIOA->OSPEEDR |= (1<<4)|(1<<5)|(1<<6)|(1<<7);
	GPIOA->AFR[0] |= (1<<8)|(1<<9)|(1<<10)|(1<<12)|(1<<13)|(1<<14);

}



uint8_t buffer[50];


void uart_transmitter_cfg()
{
	RCC->APB1ENR |=(1<<17);
	USART2->BRR = (22<4)|(13<<0);
	USART2->CR1 |=(1<<3)|(1<<13);
}
void uart_transmit(volatile uint8_t* buff)
{
	while(*buff)
	{


		USART2->DR = *buff;
		while(!(USART2->SR & (1<<6)));
	    *buff++;
	}



}




int main(void)
{
	RCC_Configuration_Registers();
	gpio_for_uart_cfg();
	uart_transmitter_cfg();
  while (1)
  {
sprintf(buffer,"hello world");
uart_transmit(buffer);
for(int i = 0; i<1680000; i++);
  }
}


/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  /* TODO, implement your code here */
  return;
}

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
  /* TODO, implement your code here */
  return -1;
}
