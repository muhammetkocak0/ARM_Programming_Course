
#include "main.h"
#define BMP180_READ_ADDRESS 0xEF
#define BMP180_WRITE_ADDRESS 0xEE








I2C_HandleTypeDef hi2c2;


void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C2_Init(void);
uint8_t data;

int8_t bmp180_read(uint8_t r_address, uint8_t numberOfregister)
{

	HAL_I2C_Mem_Read(&hi2c2, BMP180_READ_ADDRESS, r_address, 1, data, numberOfregister, 10);

	return data;
}

void bmp180_write(uint8_t w_address, uint8_t data)
{
	uint8_t buff[2];
	buff[0] = w_address;
	buff[1] = data;

	HAL_I2C_Master_Transmit(&hi2c2, BMP180_WRITE_ADDRESS, buff, 2, 20);
}
void bmp180_init()

{
	bmp180_write(0xF4,0x2E);




}
void Scan_I2C_Adress()
{
	for(int i = 0; i<250;i++)
	{
		if(HAL_I2C_IsDeviceReady(&hi2c2, i, 1, 10)==HAL_OK)
		{
			break;
		}
	}



}

int8_t AC1_buff[2];
int8_t AC2_buff[2];
int8_t AC3_buff[2];
int8_t AC4_buff[2];
int8_t AC5_buff[2];
int8_t AC6_buff[2];
int8_t B1_buff[2];
int8_t B2_buff[2];
int8_t MB_buff[2];
int8_t MC_buff[2];
int8_t MD_buff[2];

int16_t AC1=0;
int16_t AC2=0;
int16_t AC3=0;
int16_t AC4=0;
int16_t AC5=0;
int16_t AC6=0;
int16_t B1=0;
int16_t B2=0;
int16_t MB=0;
int16_t MC=0;
int16_t MD=0;


void get_bmp180_values()
{
	 AC1_buff[0]=bmp180_read(0xAA,1);
	 AC1_buff[1]=bmp180_read(0xAD,1);
/*
	 AC2_buff[0]=bmp180_read(0xAA,1);
	 AC2_buff[1]=bmp180_read(0xAA,1);

	 AC3_buff[0]=bmp180_read(0xAA,1);
	 AC3_buff[1]=bmp180_read(0xAA,1);

	 AC4_buff[0]=bmp180_read(0xAA,1);
	 AC4_buff[1]=bmp180_read(0xAA,1);

	 AC5_buff[0]=bmp180_read(0xAA,1);
	 AC5_buff[1]=bmp180_read(0xAA,1);

	 AC6_buff[0]=bmp180_read(0xAA,1);
	 AC6_buff[1]=bmp180_read(0xAA,1);

	 B1_buff[0]=bmp180_read(0xAA,1);
	 B1_buff[1]=bmp180_read(0xAA,1);

	 B2_buff[0]=bmp180_read(0xAA,1);
	 B2_buff[1]=bmp180_read(0xAA,1);

	 MB_buff[0]=bmp180_read(0xAA,1);
	 MB_buff[1]=bmp180_read(0xAA,1);

	 MC_buff[0]=bmp180_read(0xAA,1);
	 MC_buff[1]=bmp180_read(0xAA,1);

	 MD_buff[0]=bmp180_read(0xAA,1);
	 MD_buff[1]=bmp180_read(0xAA,1);
	*/

	AC1 = AC1_buff[0] <<8 | AC1_buff[1];
	/*
	AC2 = bmp180_read(0xAC,1)<<8 | ;
	AC3 = bmp180_read(0xAE,1)<<8 | bmp180_read(0xAF,1);
	AC4 = bmp180_read(0xB0,1)<<8 | bmp180_read(0xB1,1);
	AC5 = bmp180_read(0xB2,1)<<8 | bmp180_read(0xB3,1);
	AC6 = bmp180_read(0xB4,1)<<8 | bmp180_read(0xB5,1);
	B1=   bmp180_read(0xB6,1)<<8 | bmp180_read(0xB7,1);
	B2=   bmp180_read(0xB8,1)<<8 | bmp180_read(0xB9,1);
	MB=   bmp180_read(0xBA,1)<<8 | bmp180_read(0xBB,1);
	MC=   bmp180_read(0xBC,1)<<8 | bmp180_read(0xBD,1);
	MD=   bmp180_read(0xBE,1)<<8 | bmp180_read(0xBF,1);
*/
}



int main(void)
{

  HAL_Init();


  SystemClock_Config();
  MX_GPIO_Init();
  MX_I2C2_Init();
  Scan_I2C_Adress();
  bmp180_init();

  while (1)
  {
	  get_bmp180_values();
  }

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 400000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
