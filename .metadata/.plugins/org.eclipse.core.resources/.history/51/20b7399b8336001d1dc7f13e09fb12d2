
#include "main.h"

#define ADXL345_I2C_SLAVE_ADDRESS 0xA6

I2C_HandleTypeDef hi2c2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C2_Init(void);

void Scan_I2C_Adress()
{
	for(int i = 0; i<250;i++)
	{
		if(HAL_I2C_IsDeviceReady(&hi2c2, i, 1, 10)==HAL_OK)
		{
			break;
		}
	}



}
void ADXL345_READ(uint8_t rRegister,uint8_t NumberOfByte);
void ADXL345_Init();
uint8_t devid[6];

int16_t x_value,y_value,z_value;


int main(void)
{

  HAL_Init();

  SystemClock_Config();


  MX_GPIO_Init();
  MX_I2C2_Init();

  Scan_I2C_Adress();
  ADXL345_Init();

  while (1)
  {
    /* USER CODE END WHILE */
ADXL345_READ(0x32, 6);
    /* USER CODE BEGIN 3 */
x_value = (devid[1]<<8)|devid[0];
y_value = (devid[3]<<8)|devid[2];
z_value = (devid[5]<<8)|devid[4];
  }
  /* USER CODE END 3 */
}

void ADXL345_READ(uint8_t rRegister,uint8_t NumberOfByte)
{
	HAL_I2C_Mem_Read(&hi2c2, ADXL345_I2C_SLAVE_ADDRESS, rRegister, 1, devid, NumberOfByte, 10);


}

void ADXL345_MEM_Write(uint8_t  wRegister, uint8_t value)
{

	uint8_t datas[2];
	datas[0] = wRegister;
	datas[1] = value;

	HAL_I2C_Mem_Write(&hi2c2, 0x53<<1, wRegister, 1, value, 1, 10);
	HAL_I2C_Master_Transmit(&hi2c2, ADXL345_I2C_SLAVE_ADDRESS, datas, 2, 10);

//	HAL_I2C_Mem_Write(&hi2c2, ADXL345_I2C_SLAVE_ADDRESS, wRegister, I2C_MEMADD_SIZE_8BIT, value, 1, 10);




}
void ADXL345_Init()
{



ADXL345_READ(0x00,1);


while(devid[0]!=0xE5)
{
	ADXL345_READ(0x00,1);

}


	ADXL345_MEM_Write(0x2D, 0);
	ADXL345_MEM_Write(0x2D, 8);
	ADXL345_MEM_Write(0x31, 0x01);


}




/**
 *
 *
 *
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 400000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
