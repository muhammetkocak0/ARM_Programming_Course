
010_HAL_I2C_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003d80  08003d80  00013d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08003dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          000000c8  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000013c  2000013c  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007fa6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000130e  00000000  00000000  0002804a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000708  00000000  00000000  00029358  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000688  00000000  00000000  00029a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000391a  00000000  00000000  0002a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002895  00000000  00000000  0002da02  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030297  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000200c  00000000  00000000  00030314  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d68 	.word	0x08003d68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08003d68 	.word	0x08003d68

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <initialBMP180>:
//True Data
float T;
float P;

// start with
void initialBMP180(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	readCalibrationBMP180();
 8000bcc:	f000 fc06 	bl	80013dc <readCalibrationBMP180>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <readTrueTemp>:

// read temperature
float readTrueTemp(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	calculateTemp();
 8000bd8:	f000 f9ac 	bl	8000f34 <calculateTemp>
	return T/10.0;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <readTrueTemp+0x20>)
 8000bde:	edd3 7a00 	vldr	s15, [r3]
 8000be2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000be6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000bea:	eef0 7a66 	vmov.f32	s15, s13
}
 8000bee:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000d0 	.word	0x200000d0

08000bf8 <readTruePress>:

// read press
float readTruePress(uint8_t oss){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	calculatePress(oss);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fa15 	bl	8001034 <calculatePress>
	return P;
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <readTruePress+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	ee07 3a90 	vmov	s15, r3
}
 8000c12:	eeb0 0a67 	vmov.f32	s0, s15
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000d4 	.word	0x200000d4

08000c20 <readTrueAltitude>:

// read altitude
float readTrueAltitude(uint8_t oss){
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	readTruePress(oss);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ffe3 	bl	8000bf8 <readTruePress>
	return 44330*(1-(pow((P/(float)Po), 1/5.255)));
 8000c32:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <readTrueAltitude+0x88>)
 8000c34:	edd3 7a00 	vldr	s15, [r3]
 8000c38:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000cac <readTrueAltitude+0x8c>
 8000c3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c40:	ee16 0a90 	vmov	r0, s13
 8000c44:	f7ff fc24 	bl	8000490 <__aeabi_f2d>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	460c      	mov	r4, r1
 8000c4c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8000c98 <readTrueAltitude+0x78>
 8000c50:	ec44 3b10 	vmov	d0, r3, r4
 8000c54:	f002 f824 	bl	8002ca0 <pow>
 8000c58:	ec54 3b10 	vmov	r3, r4, d0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4623      	mov	r3, r4
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4912      	ldr	r1, [pc, #72]	; (8000cb0 <readTrueAltitude+0x90>)
 8000c66:	f7ff fab3 	bl	80001d0 <__aeabi_dsub>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	4621      	mov	r1, r4
 8000c72:	a30b      	add	r3, pc, #44	; (adr r3, 8000ca0 <readTrueAltitude+0x80>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f7ff fc5e 	bl	8000538 <__aeabi_dmul>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	460c      	mov	r4, r1
 8000c80:	4618      	mov	r0, r3
 8000c82:	4621      	mov	r1, r4
 8000c84:	f7ff ff50 	bl	8000b28 <__aeabi_d2f>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	ee07 3a90 	vmov	s15, r3
}
 8000c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	ccd9456c 	.word	0xccd9456c
 8000c9c:	3fc85b95 	.word	0x3fc85b95
 8000ca0:	00000000 	.word	0x00000000
 8000ca4:	40e5a540 	.word	0x40e5a540
 8000ca8:	200000d4 	.word	0x200000d4
 8000cac:	47c5e680 	.word	0x47c5e680
 8000cb0:	3ff00000 	.word	0x3ff00000

08000cb4 <readTempBPM180>:

uint16_t readTempBPM180(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	uint8_t data = 0x2E;
 8000cba:	232e      	movs	r3, #46	; 0x2e
 8000cbc:	71fb      	strb	r3, [r7, #7]
	uint8_t tempRAW[2] = {0};
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	80bb      	strh	r3, [r7, #4]

	writeAndRead(
 8000cc2:	79f9      	ldrb	r1, [r7, #7]
 8000cc4:	1d38      	adds	r0, r7, #4
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	2254      	movs	r2, #84	; 0x54
 8000cca:	f000 f8e1 	bl	8000e90 <writeAndRead>
			data,
			'T',
			4 // it should be higher then 3
			);

	return ((tempRAW[0] << 8) | tempRAW[1]);
 8000cce:	793b      	ldrb	r3, [r7, #4]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	b29b      	uxth	r3, r3
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <readPressureBPM180>:
uint16_t readPressureBPM180(uint8_t oss){
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0x34 + (oss << 6);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	019b      	lsls	r3, r3, #6
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	3334      	adds	r3, #52	; 0x34
 8000cf8:	73fb      	strb	r3, [r7, #15]
	uint8_t pressRaw[3];

	writeAndRead(
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	7bf9      	ldrb	r1, [r7, #15]
 8000cfe:	f107 000c 	add.w	r0, r7, #12
 8000d02:	2250      	movs	r2, #80	; 0x50
 8000d04:	f000 f8c4 	bl	8000e90 <writeAndRead>
				data,
				'P',
				oss
				);

	return (((pressRaw[0] << 16) + (pressRaw[1] << 8) + pressRaw[2]) >> (8-oss));
 8000d08:	7b3b      	ldrb	r3, [r7, #12]
 8000d0a:	041a      	lsls	r2, r3, #16
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	4413      	add	r3, r2
 8000d12:	7bba      	ldrb	r2, [r7, #14]
 8000d14:	441a      	add	r2, r3
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f1c3 0308 	rsb	r3, r3, #8
 8000d1c:	fa42 f303 	asr.w	r3, r2, r3
 8000d20:	b29b      	uxth	r3, r3
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <fillData>:
void fillData(uint8_t* calibDatas){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	AC1 = (( calibDatas[0] << 8) | calibDatas[1]);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b21a      	sxth	r2, r3
 8000d48:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <fillData+0x138>)
 8000d4a:	801a      	strh	r2, [r3, #0]
	AC2 = (( calibDatas[2] << 8) | calibDatas[3]);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3302      	adds	r3, #2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3303      	adds	r3, #3
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <fillData+0x13c>)
 8000d64:	801a      	strh	r2, [r3, #0]
	AC3 = (( calibDatas[4] << 8) | calibDatas[5]);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3305      	adds	r3, #5
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <fillData+0x140>)
 8000d7e:	801a      	strh	r2, [r3, #0]
	AC4 = (( calibDatas[6] << 8) | calibDatas[7]);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3306      	adds	r3, #6
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3307      	adds	r3, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <fillData+0x144>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	AC5 = (( calibDatas[8] << 8) | calibDatas[9]);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3308      	adds	r3, #8
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3309      	adds	r3, #9
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <fillData+0x148>)
 8000db6:	801a      	strh	r2, [r3, #0]
	AC6 = ((calibDatas[10] << 8) | calibDatas[11]);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	330a      	adds	r3, #10
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	330b      	adds	r3, #11
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <fillData+0x14c>)
 8000dd2:	801a      	strh	r2, [r3, #0]
	B1 =  ((calibDatas[12] << 8) | calibDatas[13]);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	330c      	adds	r3, #12
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	330d      	adds	r3, #13
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <fillData+0x150>)
 8000dec:	801a      	strh	r2, [r3, #0]
	B2 =  ((calibDatas[14] << 8) | calibDatas[15]);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	330e      	adds	r3, #14
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	021b      	lsls	r3, r3, #8
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	330f      	adds	r3, #15
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <fillData+0x154>)
 8000e06:	801a      	strh	r2, [r3, #0]
	MB =  ((calibDatas[16] << 8) | calibDatas[17]);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3310      	adds	r3, #16
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3311      	adds	r3, #17
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <fillData+0x158>)
 8000e20:	801a      	strh	r2, [r3, #0]
	MC =  ((calibDatas[18] << 8) | calibDatas[19]);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3312      	adds	r3, #18
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3313      	adds	r3, #19
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <fillData+0x15c>)
 8000e3a:	801a      	strh	r2, [r3, #0]
	MD =  ((calibDatas[20] << 8) | calibDatas[21]);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3314      	adds	r3, #20
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3315      	adds	r3, #21
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <fillData+0x160>)
 8000e54:	801a      	strh	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000090 	.word	0x20000090
 8000e68:	20000092 	.word	0x20000092
 8000e6c:	20000094 	.word	0x20000094
 8000e70:	20000096 	.word	0x20000096
 8000e74:	20000098 	.word	0x20000098
 8000e78:	2000009a 	.word	0x2000009a
 8000e7c:	2000009c 	.word	0x2000009c
 8000e80:	2000009e 	.word	0x2000009e
 8000e84:	200000a0 	.word	0x200000a0
 8000e88:	200000a2 	.word	0x200000a2
 8000e8c:	200000a4 	.word	0x200000a4

08000e90 <writeAndRead>:
void writeAndRead(uint8_t* raw, uint8_t data, char sens, uint8_t oss){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af04      	add	r7, sp, #16
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	4608      	mov	r0, r1
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	70fb      	strb	r3, [r7, #3]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	70bb      	strb	r3, [r7, #2]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	707b      	strb	r3, [r7, #1]
	uint8_t size;
	HAL_I2C_Mem_Write(
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	1cfb      	adds	r3, r7, #3
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	22f4      	movs	r2, #244	; 0xf4
 8000ebc:	21ee      	movs	r1, #238	; 0xee
 8000ebe:	481c      	ldr	r0, [pc, #112]	; (8000f30 <writeAndRead+0xa0>)
 8000ec0:	f001 f800 	bl	8001ec4 <HAL_I2C_Mem_Write>
				1,
				&data,
				1,
				1000
				);
	if(sens == 'P'){
 8000ec4:	78bb      	ldrb	r3, [r7, #2]
 8000ec6:	2b50      	cmp	r3, #80	; 0x50
 8000ec8:	d11a      	bne.n	8000f00 <writeAndRead+0x70>
		size = 3;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	73fb      	strb	r3, [r7, #15]
		if(oss == 0) HAL_Delay(5);
 8000ece:	787b      	ldrb	r3, [r7, #1]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <writeAndRead+0x4a>
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f000 fc1d 	bl	8001714 <HAL_Delay>
		if(oss == 1) HAL_Delay(8);
 8000eda:	787b      	ldrb	r3, [r7, #1]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d102      	bne.n	8000ee6 <writeAndRead+0x56>
 8000ee0:	2008      	movs	r0, #8
 8000ee2:	f000 fc17 	bl	8001714 <HAL_Delay>
		if(oss == 2) HAL_Delay(14);
 8000ee6:	787b      	ldrb	r3, [r7, #1]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d102      	bne.n	8000ef2 <writeAndRead+0x62>
 8000eec:	200e      	movs	r0, #14
 8000eee:	f000 fc11 	bl	8001714 <HAL_Delay>
		if(oss == 3) HAL_Delay(26);
 8000ef2:	787b      	ldrb	r3, [r7, #1]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d108      	bne.n	8000f0a <writeAndRead+0x7a>
 8000ef8:	201a      	movs	r0, #26
 8000efa:	f000 fc0b 	bl	8001714 <HAL_Delay>
 8000efe:	e004      	b.n	8000f0a <writeAndRead+0x7a>
	}
	else{
		size = 2;
 8000f00:	2302      	movs	r3, #2
 8000f02:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(5);
 8000f04:	2005      	movs	r0, #5
 8000f06:	f000 fc05 	bl	8001714 <HAL_Delay>
	}

		HAL_I2C_Mem_Read(
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f12:	9202      	str	r2, [sp, #8]
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	22f6      	movs	r2, #246	; 0xf6
 8000f1e:	21ee      	movs	r1, #238	; 0xee
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <writeAndRead+0xa0>)
 8000f22:	f001 f8c9 	bl	80020b8 <HAL_I2C_Mem_Read>
				1,
				raw,
				size,
				1000
				);
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000d8 	.word	0x200000d8

08000f34 <calculateTemp>:
void calculateTemp(void){
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	UT = readTempBPM180();
 8000f38:	f7ff febc 	bl	8000cb4 <readTempBPM180>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <calculateTemp+0xd0>)
 8000f42:	601a      	str	r2, [r3, #0]
	X1 = (UT - AC6)*AC5/(pow(2, 15));
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <calculateTemp+0xd0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <calculateTemp+0xd4>)
 8000f4a:	8812      	ldrh	r2, [r2, #0]
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	4a2f      	ldr	r2, [pc, #188]	; (800100c <calculateTemp+0xd8>)
 8000f50:	8812      	ldrh	r2, [r2, #0]
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa88 	bl	800046c <__aeabi_i2d>
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <calculateTemp+0xdc>)
 8000f62:	f7ff fc13 	bl	800078c <__aeabi_ddiv>
 8000f66:	4603      	mov	r3, r0
 8000f68:	460c      	mov	r4, r1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	f7ff fd93 	bl	8000a98 <__aeabi_d2iz>
 8000f72:	4602      	mov	r2, r0
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <calculateTemp+0xe0>)
 8000f76:	601a      	str	r2, [r3, #0]
	X2 = (MC*pow(2, 11))/(X1 + MD);
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <calculateTemp+0xe4>)
 8000f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa74 	bl	800046c <__aeabi_i2d>
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <calculateTemp+0xe8>)
 8000f8a:	f7ff fad5 	bl	8000538 <__aeabi_dmul>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460c      	mov	r4, r1
 8000f92:	4625      	mov	r5, r4
 8000f94:	461c      	mov	r4, r3
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <calculateTemp+0xec>)
 8000f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <calculateTemp+0xe0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa61 	bl	800046c <__aeabi_i2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4620      	mov	r0, r4
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	f7ff fbeb 	bl	800078c <__aeabi_ddiv>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460c      	mov	r4, r1
 8000fba:	4618      	mov	r0, r3
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	f7ff fd6b 	bl	8000a98 <__aeabi_d2iz>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <calculateTemp+0xf0>)
 8000fc6:	601a      	str	r2, [r3, #0]
	B5 = X1 + X2;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <calculateTemp+0xe0>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <calculateTemp+0xf0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a15      	ldr	r2, [pc, #84]	; (8001028 <calculateTemp+0xf4>)
 8000fd4:	6013      	str	r3, [r2, #0]
	T = (B5 + 8)/pow(2,4);
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <calculateTemp+0xf4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa45 	bl	800046c <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <calculateTemp+0xf8>)
 8000fe8:	f7ff fbd0 	bl	800078c <__aeabi_ddiv>
 8000fec:	4603      	mov	r3, r0
 8000fee:	460c      	mov	r4, r1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	f7ff fd98 	bl	8000b28 <__aeabi_d2f>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <calculateTemp+0xfc>)
 8000ffc:	601a      	str	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	bdb0      	pop	{r4, r5, r7, pc}
 8001002:	bf00      	nop
 8001004:	200000a8 	.word	0x200000a8
 8001008:	2000009a 	.word	0x2000009a
 800100c:	20000098 	.word	0x20000098
 8001010:	40e00000 	.word	0x40e00000
 8001014:	200000b0 	.word	0x200000b0
 8001018:	200000a2 	.word	0x200000a2
 800101c:	40a00000 	.word	0x40a00000
 8001020:	200000a4 	.word	0x200000a4
 8001024:	200000b4 	.word	0x200000b4
 8001028:	200000c0 	.word	0x200000c0
 800102c:	40300000 	.word	0x40300000
 8001030:	200000d0 	.word	0x200000d0

08001034 <calculatePress>:
void calculatePress(uint8_t oss){
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	UP = readPressureBPM180(oss);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fe50 	bl	8000ce6 <readPressureBPM180>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b7f      	ldr	r3, [pc, #508]	; (8001248 <calculatePress+0x214>)
 800104c:	601a      	str	r2, [r3, #0]
	B6 = B5-4000;
 800104e:	4b7f      	ldr	r3, [pc, #508]	; (800124c <calculatePress+0x218>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001056:	4a7e      	ldr	r2, [pc, #504]	; (8001250 <calculatePress+0x21c>)
 8001058:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800105a:	4b7e      	ldr	r3, [pc, #504]	; (8001254 <calculatePress+0x220>)
 800105c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa03 	bl	800046c <__aeabi_i2d>
 8001066:	4604      	mov	r4, r0
 8001068:	460d      	mov	r5, r1
 800106a:	4b79      	ldr	r3, [pc, #484]	; (8001250 <calculatePress+0x21c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a78      	ldr	r2, [pc, #480]	; (8001250 <calculatePress+0x21c>)
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	fb02 f303 	mul.w	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f9f8 	bl	800046c <__aeabi_i2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b75      	ldr	r3, [pc, #468]	; (8001258 <calculatePress+0x224>)
 8001082:	f7ff fb83 	bl	800078c <__aeabi_ddiv>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff fa53 	bl	8000538 <__aeabi_dmul>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	4618      	mov	r0, r3
 8001098:	4621      	mov	r1, r4
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b6f      	ldr	r3, [pc, #444]	; (800125c <calculatePress+0x228>)
 80010a0:	f7ff fb74 	bl	800078c <__aeabi_ddiv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	4618      	mov	r0, r3
 80010aa:	4621      	mov	r1, r4
 80010ac:	f7ff fcf4 	bl	8000a98 <__aeabi_d2iz>
 80010b0:	4602      	mov	r2, r0
 80010b2:	4b6b      	ldr	r3, [pc, #428]	; (8001260 <calculatePress+0x22c>)
 80010b4:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 80010b6:	4b6b      	ldr	r3, [pc, #428]	; (8001264 <calculatePress+0x230>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <calculatePress+0x21c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	fb03 f302 	mul.w	r3, r3, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f9d0 	bl	800046c <__aeabi_i2d>
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b62      	ldr	r3, [pc, #392]	; (800125c <calculatePress+0x228>)
 80010d2:	f7ff fb5b 	bl	800078c <__aeabi_ddiv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	460c      	mov	r4, r1
 80010da:	4618      	mov	r0, r3
 80010dc:	4621      	mov	r1, r4
 80010de:	f7ff fcdb 	bl	8000a98 <__aeabi_d2iz>
 80010e2:	4602      	mov	r2, r0
 80010e4:	4b60      	ldr	r3, [pc, #384]	; (8001268 <calculatePress+0x234>)
 80010e6:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 80010e8:	4b5d      	ldr	r3, [pc, #372]	; (8001260 <calculatePress+0x22c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <calculatePress+0x234>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a5e      	ldr	r2, [pc, #376]	; (800126c <calculatePress+0x238>)
 80010f4:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80010f6:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <calculatePress+0x23c>)
 80010f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fc:	009a      	lsls	r2, r3, #2
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <calculatePress+0x238>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	441a      	add	r2, r3
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	3302      	adds	r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	da00      	bge.n	8001112 <calculatePress+0xde>
 8001110:	3303      	adds	r3, #3
 8001112:	109b      	asrs	r3, r3, #2
 8001114:	461a      	mov	r2, r3
 8001116:	4b57      	ldr	r3, [pc, #348]	; (8001274 <calculatePress+0x240>)
 8001118:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <calculatePress+0x244>)
 800111c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001120:	461a      	mov	r2, r3
 8001122:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <calculatePress+0x21c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	fb03 f302 	mul.w	r3, r3, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f99e 	bl	800046c <__aeabi_i2d>
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b51      	ldr	r3, [pc, #324]	; (800127c <calculatePress+0x248>)
 8001136:	f7ff fb29 	bl	800078c <__aeabi_ddiv>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4618      	mov	r0, r3
 8001140:	4621      	mov	r1, r4
 8001142:	f7ff fca9 	bl	8000a98 <__aeabi_d2iz>
 8001146:	4602      	mov	r2, r0
 8001148:	4b45      	ldr	r3, [pc, #276]	; (8001260 <calculatePress+0x22c>)
 800114a:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800114c:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <calculatePress+0x24c>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f98a 	bl	800046c <__aeabi_i2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <calculatePress+0x21c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <calculatePress+0x21c>)
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f97f 	bl	800046c <__aeabi_i2d>
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b39      	ldr	r3, [pc, #228]	; (8001258 <calculatePress+0x224>)
 8001174:	f7ff fb0a 	bl	800078c <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff f9da 	bl	8000538 <__aeabi_dmul>
 8001184:	4603      	mov	r3, r0
 8001186:	460c      	mov	r4, r1
 8001188:	4618      	mov	r0, r3
 800118a:	4621      	mov	r1, r4
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <calculatePress+0x250>)
 8001192:	f7ff fafb 	bl	800078c <__aeabi_ddiv>
 8001196:	4603      	mov	r3, r0
 8001198:	460c      	mov	r4, r1
 800119a:	4618      	mov	r0, r3
 800119c:	4621      	mov	r1, r4
 800119e:	f7ff fc7b 	bl	8000a98 <__aeabi_d2iz>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <calculatePress+0x234>)
 80011a6:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <calculatePress+0x22c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <calculatePress+0x234>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	3302      	adds	r3, #2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f959 	bl	800046c <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <calculatePress+0x254>)
 80011c0:	f7ff fae4 	bl	800078c <__aeabi_ddiv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	460c      	mov	r4, r1
 80011c8:	4618      	mov	r0, r3
 80011ca:	4621      	mov	r1, r4
 80011cc:	f7ff fc64 	bl	8000a98 <__aeabi_d2iz>
 80011d0:	4602      	mov	r2, r0
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <calculatePress+0x238>)
 80011d4:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <calculatePress+0x258>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <calculatePress+0x238>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011e4:	fb03 f302 	mul.w	r3, r3, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f92f 	bl	800044c <__aeabi_ui2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <calculatePress+0x25c>)
 80011f4:	f7ff faca 	bl	800078c <__aeabi_ddiv>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	4618      	mov	r0, r3
 80011fe:	4621      	mov	r1, r4
 8001200:	f7ff fc72 	bl	8000ae8 <__aeabi_d2uiz>
 8001204:	4602      	mov	r2, r0
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <calculatePress+0x260>)
 8001208:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <calculatePress+0x214>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <calculatePress+0x240>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	f24c 3150 	movw	r1, #50000	; 0xc350
 800121c:	fa41 f202 	asr.w	r2, r1, r2
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <calculatePress+0x264>)
 8001226:	6013      	str	r3, [r2, #0]
	P = (B7<0x80000000) ? (B7*2)/B4 : (B7/B4)*2;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <calculatePress+0x264>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db35      	blt.n	800129c <calculatePress+0x268>
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <calculatePress+0x264>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	005a      	lsls	r2, r3, #1
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <calculatePress+0x260>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001246:	e034      	b.n	80012b2 <calculatePress+0x27e>
 8001248:	200000ac 	.word	0x200000ac
 800124c:	200000c0 	.word	0x200000c0
 8001250:	200000c8 	.word	0x200000c8
 8001254:	2000009e 	.word	0x2000009e
 8001258:	40b00000 	.word	0x40b00000
 800125c:	40a00000 	.word	0x40a00000
 8001260:	200000b0 	.word	0x200000b0
 8001264:	20000092 	.word	0x20000092
 8001268:	200000b4 	.word	0x200000b4
 800126c:	200000b8 	.word	0x200000b8
 8001270:	20000090 	.word	0x20000090
 8001274:	200000bc 	.word	0x200000bc
 8001278:	20000094 	.word	0x20000094
 800127c:	40c00000 	.word	0x40c00000
 8001280:	2000009c 	.word	0x2000009c
 8001284:	40f00000 	.word	0x40f00000
 8001288:	40100000 	.word	0x40100000
 800128c:	20000096 	.word	0x20000096
 8001290:	40e00000 	.word	0x40e00000
 8001294:	200000c4 	.word	0x200000c4
 8001298:	200000cc 	.word	0x200000cc
 800129c:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <calculatePress+0x384>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <calculatePress+0x388>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b2:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <calculatePress+0x38c>)
 80012b4:	edc3 7a00 	vstr	s15, [r3]
	X1 = (P/(pow(2,8)))*(P/(pow(2,8)));
 80012b8:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <calculatePress+0x38c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8e7 	bl	8000490 <__aeabi_f2d>
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <calculatePress+0x390>)
 80012c8:	f7ff fa60 	bl	800078c <__aeabi_ddiv>
 80012cc:	4603      	mov	r3, r0
 80012ce:	460c      	mov	r4, r1
 80012d0:	4625      	mov	r5, r4
 80012d2:	461c      	mov	r4, r3
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <calculatePress+0x38c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8d9 	bl	8000490 <__aeabi_f2d>
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <calculatePress+0x390>)
 80012e4:	f7ff fa52 	bl	800078c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7ff f922 	bl	8000538 <__aeabi_dmul>
 80012f4:	4603      	mov	r3, r0
 80012f6:	460c      	mov	r4, r1
 80012f8:	4618      	mov	r0, r3
 80012fa:	4621      	mov	r1, r4
 80012fc:	f7ff fbcc 	bl	8000a98 <__aeabi_d2iz>
 8001300:	4602      	mov	r2, r0
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <calculatePress+0x394>)
 8001304:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <calculatePress+0x394>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f640 32de 	movw	r2, #3038	; 0xbde
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f8aa 	bl	800046c <__aeabi_i2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <calculatePress+0x398>)
 800131e:	f7ff fa35 	bl	800078c <__aeabi_ddiv>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	4618      	mov	r0, r3
 8001328:	4621      	mov	r1, r4
 800132a:	f7ff fbb5 	bl	8000a98 <__aeabi_d2iz>
 800132e:	4602      	mov	r2, r0
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <calculatePress+0x394>)
 8001332:	601a      	str	r2, [r3, #0]
	X2 = (-7357*P)/(pow(2,16));
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <calculatePress+0x38c>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80013d0 <calculatePress+0x39c>
 800133e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001342:	ee17 0a90 	vmov	r0, s15
 8001346:	f7ff f8a3 	bl	8000490 <__aeabi_f2d>
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <calculatePress+0x398>)
 8001350:	f7ff fa1c 	bl	800078c <__aeabi_ddiv>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	f7ff fb9c 	bl	8000a98 <__aeabi_d2iz>
 8001360:	4602      	mov	r2, r0
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <calculatePress+0x3a0>)
 8001364:	601a      	str	r2, [r3, #0]
	P = P + (X1+X2+3791)/(pow(2,4));
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <calculatePress+0x38c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f890 	bl	8000490 <__aeabi_f2d>
 8001370:	4604      	mov	r4, r0
 8001372:	460d      	mov	r5, r1
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <calculatePress+0x394>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <calculatePress+0x3a0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4413      	add	r3, r2
 800137e:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f872 	bl	800046c <__aeabi_i2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <calculatePress+0x3a4>)
 800138e:	f7ff f9fd 	bl	800078c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7fe ff1b 	bl	80001d4 <__adddf3>
 800139e:	4603      	mov	r3, r0
 80013a0:	460c      	mov	r4, r1
 80013a2:	4618      	mov	r0, r3
 80013a4:	4621      	mov	r1, r4
 80013a6:	f7ff fbbf 	bl	8000b28 <__aeabi_d2f>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <calculatePress+0x38c>)
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdb0      	pop	{r4, r5, r7, pc}
 80013b8:	200000cc 	.word	0x200000cc
 80013bc:	200000c4 	.word	0x200000c4
 80013c0:	200000d4 	.word	0x200000d4
 80013c4:	40700000 	.word	0x40700000
 80013c8:	200000b0 	.word	0x200000b0
 80013cc:	40f00000 	.word	0x40f00000
 80013d0:	c5e5e800 	.word	0xc5e5e800
 80013d4:	200000b4 	.word	0x200000b4
 80013d8:	40300000 	.word	0x40300000

080013dc <readCalibrationBMP180>:
void readCalibrationBMP180(void){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af04      	add	r7, sp, #16
	uint8_t calibDatas[22] = {0};
 80013e2:	463b      	mov	r3, r7
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	829a      	strh	r2, [r3, #20]
	HAL_I2C_Mem_Read(
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	2316      	movs	r3, #22
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	463b      	mov	r3, r7
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	22aa      	movs	r2, #170	; 0xaa
 8001404:	21ee      	movs	r1, #238	; 0xee
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <readCalibrationBMP180+0x40>)
 8001408:	f000 fe56 	bl	80020b8 <HAL_I2C_Mem_Read>
			calibDatas,
			22,
			1000 // If an error occur, change this with HAL_MAX_DELAY
			);

	fillData(calibDatas);
 800140c:	463b      	mov	r3, r7
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fc8c 	bl	8000d2c <fillData>
}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000d8 	.word	0x200000d8

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001424:	f000 f904 	bl	8001630 <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */


  MX_I2C1_Init();
 8001428:	f000 f824 	bl	8001474 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  initialBMP180();
 800142c:	f7ff fbcc 	bl	8000bc8 <initialBMP180>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  temp     = readTrueTemp();
 8001430:	f7ff fbd0 	bl	8000bd4 <readTrueTemp>
 8001434:	eef0 7a40 	vmov.f32	s15, s0
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <main+0x48>)
 800143a:	edc3 7a00 	vstr	s15, [r3]
	  press    = readTruePress(0);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fbda 	bl	8000bf8 <readTruePress>
 8001444:	eef0 7a40 	vmov.f32	s15, s0
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <main+0x4c>)
 800144a:	edc3 7a00 	vstr	s15, [r3]
	  altitude = readTrueAltitude(0);
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff fbe6 	bl	8000c20 <readTrueAltitude>
 8001454:	eef0 7a40 	vmov.f32	s15, s0
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <main+0x50>)
 800145a:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1000);
 800145e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001462:	f000 f957 	bl	8001714 <HAL_Delay>
	  temp     = readTrueTemp();
 8001466:	e7e3      	b.n	8001430 <main+0x10>
 8001468:	2000012c 	.word	0x2000012c
 800146c:	20000134 	.word	0x20000134
 8001470:	20000130 	.word	0x20000130

08001474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_I2C1_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <MX_I2C1_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_I2C1_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_I2C1_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_I2C1_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_I2C1_Init+0x50>)
 80014b2:	f000 fbcf 	bl	8001c54 <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 f808 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200000d8 	.word	0x200000d8
 80014c8:	40005400 	.word	0x40005400
 80014cc:	000186a0 	.word	0x000186a0

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <Error_Handler+0x6>

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4a10      	ldr	r2, [pc, #64]	; (8001524 <HAL_MspInit+0x4c>)
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x4c>)
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_MspInit+0x4c>)
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_MspInit+0x4c>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_I2C_MspInit+0x84>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d12c      	bne.n	80015a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001566:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156c:	2312      	movs	r3, #18
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001578:	2304      	movs	r3, #4
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <HAL_I2C_MspInit+0x8c>)
 8001584:	f000 f9cc 	bl	8001920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40005800 	.word	0x40005800
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020400 	.word	0x40020400

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001604:	f000 f866 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <SystemInit+0x20>)
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <SystemInit+0x20>)
 8001614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_Init+0x40>)
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_Init+0x40>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_Init+0x40>)
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_Init+0x40>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_Init+0x40>)
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x40>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f92d 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff ff38 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f937 	bl	8001906 <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f000 f90d 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000004 	.word	0x20000004

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20000138 	.word	0x20000138

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000138 	.word	0x20000138

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_Delay+0x40>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad2      	subs	r2, r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3f7      	bcc.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000008 	.word	0x20000008

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	490d      	ldr	r1, [pc, #52]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	4909      	ldr	r1, [pc, #36]	; (800180c <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	2201      	movs	r2, #1
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	1e5a      	subs	r2, r3, #1
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	401a      	ands	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001856:	2101      	movs	r1, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	1e59      	subs	r1, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff90 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff49 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff5e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff90 	bl	8001810 <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5f 	bl	80017bc <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffb0 	bl	8001874 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	e16b      	b.n	8001c14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	f040 815a 	bne.w	8001c0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b01      	cmp	r3, #1
 8001964:	d005      	beq.n	8001972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196e:	2b02      	cmp	r3, #2
 8001970:	d130      	bne.n	80019d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a8:	2201      	movs	r2, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 0201 	and.w	r2, r3, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d017      	beq.n	8001a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d123      	bne.n	8001a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	08da      	lsrs	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3208      	adds	r2, #8
 8001a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	08da      	lsrs	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3208      	adds	r2, #8
 8001a5e:	69b9      	ldr	r1, [r7, #24]
 8001a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0203 	and.w	r2, r3, #3
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80b4 	beq.w	8001c0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4a5f      	ldr	r2, [pc, #380]	; (8001c28 <HAL_GPIO_Init+0x308>)
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <HAL_GPIO_Init+0x308>)
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <HAL_GPIO_Init+0x308>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac2:	4a5a      	ldr	r2, [pc, #360]	; (8001c2c <HAL_GPIO_Init+0x30c>)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	3302      	adds	r3, #2
 8001aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	220f      	movs	r2, #15
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a51      	ldr	r2, [pc, #324]	; (8001c30 <HAL_GPIO_Init+0x310>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02b      	beq.n	8001b46 <HAL_GPIO_Init+0x226>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <HAL_GPIO_Init+0x314>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x222>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4f      	ldr	r2, [pc, #316]	; (8001c38 <HAL_GPIO_Init+0x318>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x21e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4e      	ldr	r2, [pc, #312]	; (8001c3c <HAL_GPIO_Init+0x31c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x21a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_GPIO_Init+0x320>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x216>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <HAL_GPIO_Init+0x324>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x212>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4b      	ldr	r2, [pc, #300]	; (8001c48 <HAL_GPIO_Init+0x328>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x20e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <HAL_GPIO_Init+0x32c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x20a>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e00e      	b.n	8001b48 <HAL_GPIO_Init+0x228>
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	e00c      	b.n	8001b48 <HAL_GPIO_Init+0x228>
 8001b2e:	2306      	movs	r3, #6
 8001b30:	e00a      	b.n	8001b48 <HAL_GPIO_Init+0x228>
 8001b32:	2305      	movs	r3, #5
 8001b34:	e008      	b.n	8001b48 <HAL_GPIO_Init+0x228>
 8001b36:	2304      	movs	r3, #4
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x228>
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e004      	b.n	8001b48 <HAL_GPIO_Init+0x228>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_Init+0x228>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x228>
 8001b46:	2300      	movs	r3, #0
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f002 0203 	and.w	r2, r2, #3
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	4093      	lsls	r3, r2
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b58:	4934      	ldr	r1, [pc, #208]	; (8001c2c <HAL_GPIO_Init+0x30c>)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_GPIO_Init+0x330>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b8a:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <HAL_GPIO_Init+0x330>)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_GPIO_Init+0x330>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb4:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <HAL_GPIO_Init+0x330>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bba:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_GPIO_Init+0x330>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_GPIO_Init+0x330>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_GPIO_Init+0x330>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_GPIO_Init+0x330>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	f67f ae90 	bls.w	800193c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3724      	adds	r7, #36	; 0x24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40021400 	.word	0x40021400
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40021c00 	.word	0x40021c00
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e11f      	b.n	8001ea6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fc54 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cb8:	f000 ff8a 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8001cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a7b      	ldr	r2, [pc, #492]	; (8001eb0 <HAL_I2C_Init+0x25c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d807      	bhi.n	8001cd8 <HAL_I2C_Init+0x84>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a7a      	ldr	r2, [pc, #488]	; (8001eb4 <HAL_I2C_Init+0x260>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	bf94      	ite	ls
 8001cd0:	2301      	movls	r3, #1
 8001cd2:	2300      	movhi	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e006      	b.n	8001ce6 <HAL_I2C_Init+0x92>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a77      	ldr	r2, [pc, #476]	; (8001eb8 <HAL_I2C_Init+0x264>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	bf94      	ite	ls
 8001ce0:	2301      	movls	r3, #1
 8001ce2:	2300      	movhi	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0db      	b.n	8001ea6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4a72      	ldr	r2, [pc, #456]	; (8001ebc <HAL_I2C_Init+0x268>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9b      	lsrs	r3, r3, #18
 8001cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	6852      	ldr	r2, [r2, #4]
 8001d04:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4863      	ldr	r0, [pc, #396]	; (8001eb0 <HAL_I2C_Init+0x25c>)
 8001d22:	4283      	cmp	r3, r0
 8001d24:	d802      	bhi.n	8001d2c <HAL_I2C_Init+0xd8>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	e009      	b.n	8001d40 <HAL_I2C_Init+0xec>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d32:	fb00 f303 	mul.w	r3, r0, r3
 8001d36:	4862      	ldr	r0, [pc, #392]	; (8001ec0 <HAL_I2C_Init+0x26c>)
 8001d38:	fba0 0303 	umull	r0, r3, r0, r3
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	3301      	adds	r3, #1
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4955      	ldr	r1, [pc, #340]	; (8001eb0 <HAL_I2C_Init+0x25c>)
 8001d5c:	428b      	cmp	r3, r1
 8001d5e:	d80d      	bhi.n	8001d7c <HAL_I2C_Init+0x128>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1e59      	subs	r1, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	bf38      	it	cc
 8001d78:	2304      	movcc	r3, #4
 8001d7a:	e04f      	b.n	8001e1c <HAL_I2C_Init+0x1c8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d111      	bne.n	8001da8 <HAL_I2C_Init+0x154>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e5c      	subs	r4, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	440b      	add	r3, r1
 8001d92:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e012      	b.n	8001dce <HAL_I2C_Init+0x17a>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1e5c      	subs	r4, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	0099      	lsls	r1, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb4 f3f3 	udiv	r3, r4, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Init+0x182>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e022      	b.n	8001e1c <HAL_I2C_Init+0x1c8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10e      	bne.n	8001dfc <HAL_I2C_Init+0x1a8>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1e5c      	subs	r4, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	440b      	add	r3, r1
 8001dec:	fbb4 f3f3 	udiv	r3, r4, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfa:	e00f      	b.n	8001e1c <HAL_I2C_Init+0x1c8>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e5c      	subs	r4, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	0099      	lsls	r1, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	69d0      	ldr	r0, [r2, #28]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6a12      	ldr	r2, [r2, #32]
 8001e36:	4302      	orrs	r2, r0
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	6908      	ldr	r0, [r1, #16]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	68c9      	ldr	r1, [r1, #12]
 8001e56:	4301      	orrs	r1, r0
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6950      	ldr	r0, [r2, #20]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6992      	ldr	r2, [r2, #24]
 8001e72:	4302      	orrs	r2, r0
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	000186a0 	.word	0x000186a0
 8001eb4:	001e847f 	.word	0x001e847f
 8001eb8:	003d08ff 	.word	0x003d08ff
 8001ebc:	431bde83 	.word	0x431bde83
 8001ec0:	10624dd3 	.word	0x10624dd3

08001ec4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ede:	f7ff fc0d 	bl	80016fc <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	f040 80d9 	bne.w	80020a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2319      	movs	r3, #25
 8001ef8:	2201      	movs	r2, #1
 8001efa:	496d      	ldr	r1, [pc, #436]	; (80020b0 <HAL_I2C_Mem_Write+0x1ec>)
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fc7d 	bl	80027fc <I2C_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e0cc      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Mem_Write+0x56>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0c5      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d007      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2221      	movs	r2, #33	; 0x21
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <HAL_I2C_Mem_Write+0x1f0>)
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f82:	88f8      	ldrh	r0, [r7, #6]
 8001f84:	893a      	ldrh	r2, [r7, #8]
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4603      	mov	r3, r0
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fab6 	bl	8002504 <I2C_RequestMemoryWrite>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d052      	beq.n	8002044 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e081      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fcfe 	bl	80029a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d107      	bne.n	8001fca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06b      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fd6:	7812      	ldrb	r2, [r2, #0]
 8001fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d11b      	bne.n	8002044 <HAL_I2C_Mem_Write+0x180>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	d017      	beq.n	8002044 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800201c:	7812      	ldrb	r2, [r2, #0]
 800201e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1aa      	bne.n	8001fa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fcea 	bl	8002a2a <I2C_WaitOnBTFFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2b04      	cmp	r3, #4
 8002062:	d107      	bne.n	8002074 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002072:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e016      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e000      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	00100002 	.word	0x00100002
 80020b4:	ffff0000 	.word	0xffff0000

080020b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020d2:	f7ff fb13 	bl	80016fc <HAL_GetTick>
 80020d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	f040 8208 	bne.w	80024f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2319      	movs	r3, #25
 80020ec:	2201      	movs	r2, #1
 80020ee:	497b      	ldr	r1, [pc, #492]	; (80022dc <HAL_I2C_Mem_Read+0x224>)
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fb83 	bl	80027fc <I2C_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
 80020fe:	e1fb      	b.n	80024f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_I2C_Mem_Read+0x56>
 800210a:	2302      	movs	r3, #2
 800210c:	e1f4      	b.n	80024f8 <HAL_I2C_Mem_Read+0x440>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d007      	beq.n	8002134 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2222      	movs	r2, #34	; 0x22
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a5b      	ldr	r2, [pc, #364]	; (80022e0 <HAL_I2C_Mem_Read+0x228>)
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002176:	88f8      	ldrh	r0, [r7, #6]
 8002178:	893a      	ldrh	r2, [r7, #8]
 800217a:	8979      	ldrh	r1, [r7, #10]
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4603      	mov	r3, r0
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa50 	bl	800262c <I2C_RequestMemoryRead>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e1b0      	b.n	80024f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	2b00      	cmp	r3, #0
 800219c:	d113      	bne.n	80021c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	623b      	str	r3, [r7, #32]
 80021b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e184      	b.n	80024d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d11b      	bne.n	8002206 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e164      	b.n	80024d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	2b02      	cmp	r3, #2
 800220c:	d11b      	bne.n	8002246 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800222c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	e144      	b.n	80024d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800225c:	e138      	b.n	80024d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	2b03      	cmp	r3, #3
 8002264:	f200 80f1 	bhi.w	800244a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	2b01      	cmp	r3, #1
 800226e:	d123      	bne.n	80022b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fc19 	bl	8002aac <I2C_WaitOnRXNEFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e139      	b.n	80024f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	6912      	ldr	r2, [r2, #16]
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022b6:	e10b      	b.n	80024d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d14e      	bne.n	800235e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c6:	2200      	movs	r2, #0
 80022c8:	4906      	ldr	r1, [pc, #24]	; (80022e4 <HAL_I2C_Mem_Read+0x22c>)
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa96 	bl	80027fc <I2C_WaitOnFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e10e      	b.n	80024f8 <HAL_I2C_Mem_Read+0x440>
 80022da:	bf00      	nop
 80022dc:	00100002 	.word	0x00100002
 80022e0:	ffff0000 	.word	0xffff0000
 80022e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	6912      	ldr	r2, [r2, #16]
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	6912      	ldr	r2, [r2, #16]
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800235c:	e0b8      	b.n	80024d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	2200      	movs	r2, #0
 8002366:	4966      	ldr	r1, [pc, #408]	; (8002500 <HAL_I2C_Mem_Read+0x448>)
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fa47 	bl	80027fc <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0bf      	b.n	80024f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	6912      	ldr	r2, [r2, #16]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c0:	2200      	movs	r2, #0
 80023c2:	494f      	ldr	r1, [pc, #316]	; (8002500 <HAL_I2C_Mem_Read+0x448>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fa19 	bl	80027fc <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e091      	b.n	80024f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	6912      	ldr	r2, [r2, #16]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	6912      	ldr	r2, [r2, #16]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002448:	e042      	b.n	80024d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fb2c 	bl	8002aac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e04c      	b.n	80024f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	6912      	ldr	r2, [r2, #16]
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b04      	cmp	r3, #4
 800249c:	d118      	bne.n	80024d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	6912      	ldr	r2, [r2, #16]
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f47f aec2 	bne.w	800225e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
  }
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3728      	adds	r7, #40	; 0x28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	00010004 	.word	0x00010004

08002504 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4603      	mov	r3, r0
 8002514:	817b      	strh	r3, [r7, #10]
 8002516:	460b      	mov	r3, r1
 8002518:	813b      	strh	r3, [r7, #8]
 800251a:	4613      	mov	r3, r2
 800251c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800252c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	2200      	movs	r2, #0
 8002536:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f95e 	bl	80027fc <I2C_WaitOnFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002554:	d103      	bne.n	800255e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e05e      	b.n	8002620 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	897a      	ldrh	r2, [r7, #10]
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800256e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	6a3a      	ldr	r2, [r7, #32]
 8002574:	492c      	ldr	r1, [pc, #176]	; (8002628 <I2C_RequestMemoryWrite+0x124>)
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f997 	bl	80028aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e04c      	b.n	8002620 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	6a39      	ldr	r1, [r7, #32]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fa01 	bl	80029a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00d      	beq.n	80025c8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d107      	bne.n	80025c4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e02b      	b.n	8002620 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d105      	bne.n	80025da <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	893a      	ldrh	r2, [r7, #8]
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	611a      	str	r2, [r3, #16]
 80025d8:	e021      	b.n	800261e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	893a      	ldrh	r2, [r7, #8]
 80025e0:	0a12      	lsrs	r2, r2, #8
 80025e2:	b292      	uxth	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	6a39      	ldr	r1, [r7, #32]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f9db 	bl	80029a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00d      	beq.n	8002614 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d107      	bne.n	8002610 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e005      	b.n	8002620 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	893a      	ldrh	r2, [r7, #8]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	00010002 	.word	0x00010002

0800262c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002654:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002664:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2200      	movs	r2, #0
 800266e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f8c2 	bl	80027fc <I2C_WaitOnFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00d      	beq.n	800269a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268c:	d103      	bne.n	8002696 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e0a9      	b.n	80027ee <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	897a      	ldrh	r2, [r7, #10]
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	6a3a      	ldr	r2, [r7, #32]
 80026ac:	4952      	ldr	r1, [pc, #328]	; (80027f8 <I2C_RequestMemoryRead+0x1cc>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f8fb 	bl	80028aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e097      	b.n	80027ee <I2C_RequestMemoryRead+0x1c2>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	6a39      	ldr	r1, [r7, #32]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f965 	bl	80029a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d107      	bne.n	80026fc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e076      	b.n	80027ee <I2C_RequestMemoryRead+0x1c2>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	893a      	ldrh	r2, [r7, #8]
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	611a      	str	r2, [r3, #16]
 8002710:	e021      	b.n	8002756 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	893a      	ldrh	r2, [r7, #8]
 8002718:	0a12      	lsrs	r2, r2, #8
 800271a:	b292      	uxth	r2, r2
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	6a39      	ldr	r1, [r7, #32]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f93f 	bl	80029a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	2b04      	cmp	r3, #4
 8002736:	d107      	bne.n	8002748 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e050      	b.n	80027ee <I2C_RequestMemoryRead+0x1c2>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	893a      	ldrh	r2, [r7, #8]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f924 	bl	80029a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b04      	cmp	r3, #4
 800276c:	d107      	bne.n	800277e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e035      	b.n	80027ee <I2C_RequestMemoryRead+0x1c2>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	2200      	movs	r2, #0
 800279a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f82c 	bl	80027fc <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <I2C_RequestMemoryRead+0x19a>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b8:	d103      	bne.n	80027c2 <I2C_RequestMemoryRead+0x196>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e013      	b.n	80027ee <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	897a      	ldrh	r2, [r7, #10]
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	4907      	ldr	r1, [pc, #28]	; (80027f8 <I2C_RequestMemoryRead+0x1cc>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f864 	bl	80028aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <I2C_RequestMemoryRead+0x1c0>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <I2C_RequestMemoryRead+0x1c2>
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00010002 	.word	0x00010002

080027fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	4613      	mov	r3, r2
 800280a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800280c:	e025      	b.n	800285a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d021      	beq.n	800285a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7fe ff71 	bl	80016fc <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	1ad2      	subs	r2, r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d802      	bhi.n	800282c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d116      	bne.n	800285a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f043 0220 	orr.w	r2, r3, #32
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e023      	b.n	80028a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10d      	bne.n	8002880 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4013      	ands	r3, r2
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	bf0c      	ite	eq
 8002876:	2301      	moveq	r3, #1
 8002878:	2300      	movne	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	e00c      	b.n	800289a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	43da      	mvns	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4013      	ands	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	429a      	cmp	r2, r3
 800289e:	d0b6      	beq.n	800280e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028b8:	e051      	b.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c8:	d123      	bne.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f043 0204 	orr.w	r2, r3, #4
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e046      	b.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d021      	beq.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7fe feef 	bl	80016fc <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	d802      	bhi.n	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d116      	bne.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f043 0220 	orr.w	r2, r3, #32
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e020      	b.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d10c      	bne.n	8002982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	e00b      	b.n	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	43da      	mvns	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4013      	ands	r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d18d      	bne.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b4:	e02d      	b.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f8ce 	bl	8002b58 <I2C_IsAcknowledgeFailed>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e02d      	b.n	8002a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d021      	beq.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7fe fe95 	bl	80016fc <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	1ad2      	subs	r2, r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d802      	bhi.n	80029e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d116      	bne.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e007      	b.n	8002a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d1ca      	bne.n	80029b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a36:	e02d      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f88d 	bl	8002b58 <I2C_IsAcknowledgeFailed>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e02d      	b.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d021      	beq.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a50:	f7fe fe54 	bl	80016fc <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	1ad2      	subs	r2, r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d802      	bhi.n	8002a66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d116      	bne.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e007      	b.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d1ca      	bne.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ab8:	e042      	b.n	8002b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d119      	bne.n	8002afc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0210 	mvn.w	r2, #16
 8002ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e029      	b.n	8002b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afc:	f7fe fdfe 	bl	80016fc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1ad2      	subs	r2, r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d802      	bhi.n	8002b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d116      	bne.n	8002b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e007      	b.n	8002b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b40      	cmp	r3, #64	; 0x40
 8002b4c:	d1b5      	bne.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6e:	d11b      	bne.n	8002ba8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bd4:	f7ff fff0 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4601      	mov	r1, r0
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	0a9b      	lsrs	r3, r3, #10
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4a03      	ldr	r2, [pc, #12]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	08003d80 	.word	0x08003d80

08002bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bfc:	480d      	ldr	r0, [pc, #52]	; (8002c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bfe:	490e      	ldr	r1, [pc, #56]	; (8002c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c04:	e002      	b.n	8002c0c <LoopCopyDataInit>

08002c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0a:	3304      	adds	r3, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c10:	d3f9      	bcc.n	8002c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c14:	4c0b      	ldr	r4, [pc, #44]	; (8002c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c18:	e001      	b.n	8002c1e <LoopFillZerobss>

08002c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c1c:	3204      	adds	r2, #4

08002c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c20:	d3fb      	bcc.n	8002c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c22:	f7fe fcf3 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c26:	f000 f817 	bl	8002c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2a:	f7fe fbf9 	bl	8001420 <main>
  bx  lr    
 8002c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002c3c:	08003dd8 	.word	0x08003dd8
  ldr r2, =_sbss
 8002c40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002c44:	2000013c 	.word	0x2000013c

08002c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC_IRQHandler>
	...

08002c4c <__errno>:
 8002c4c:	4b01      	ldr	r3, [pc, #4]	; (8002c54 <__errno+0x8>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	2000000c 	.word	0x2000000c

08002c58 <__libc_init_array>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	4e0d      	ldr	r6, [pc, #52]	; (8002c90 <__libc_init_array+0x38>)
 8002c5c:	4c0d      	ldr	r4, [pc, #52]	; (8002c94 <__libc_init_array+0x3c>)
 8002c5e:	1ba4      	subs	r4, r4, r6
 8002c60:	10a4      	asrs	r4, r4, #2
 8002c62:	2500      	movs	r5, #0
 8002c64:	42a5      	cmp	r5, r4
 8002c66:	d109      	bne.n	8002c7c <__libc_init_array+0x24>
 8002c68:	4e0b      	ldr	r6, [pc, #44]	; (8002c98 <__libc_init_array+0x40>)
 8002c6a:	4c0c      	ldr	r4, [pc, #48]	; (8002c9c <__libc_init_array+0x44>)
 8002c6c:	f001 f87c 	bl	8003d68 <_init>
 8002c70:	1ba4      	subs	r4, r4, r6
 8002c72:	10a4      	asrs	r4, r4, #2
 8002c74:	2500      	movs	r5, #0
 8002c76:	42a5      	cmp	r5, r4
 8002c78:	d105      	bne.n	8002c86 <__libc_init_array+0x2e>
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
 8002c7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c80:	4798      	blx	r3
 8002c82:	3501      	adds	r5, #1
 8002c84:	e7ee      	b.n	8002c64 <__libc_init_array+0xc>
 8002c86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c8a:	4798      	blx	r3
 8002c8c:	3501      	adds	r5, #1
 8002c8e:	e7f2      	b.n	8002c76 <__libc_init_array+0x1e>
 8002c90:	08003dd0 	.word	0x08003dd0
 8002c94:	08003dd0 	.word	0x08003dd0
 8002c98:	08003dd0 	.word	0x08003dd0
 8002c9c:	08003dd4 	.word	0x08003dd4

08002ca0 <pow>:
 8002ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca4:	ed2d 8b04 	vpush	{d8-d9}
 8002ca8:	b08d      	sub	sp, #52	; 0x34
 8002caa:	ec57 6b10 	vmov	r6, r7, d0
 8002cae:	ec55 4b11 	vmov	r4, r5, d1
 8002cb2:	f000 f96d 	bl	8002f90 <__ieee754_pow>
 8002cb6:	4bae      	ldr	r3, [pc, #696]	; (8002f70 <pow+0x2d0>)
 8002cb8:	eeb0 8a40 	vmov.f32	s16, s0
 8002cbc:	eef0 8a60 	vmov.f32	s17, s1
 8002cc0:	f993 9000 	ldrsb.w	r9, [r3]
 8002cc4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002cc8:	4698      	mov	r8, r3
 8002cca:	d05f      	beq.n	8002d8c <pow+0xec>
 8002ccc:	4622      	mov	r2, r4
 8002cce:	462b      	mov	r3, r5
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7fd feca 	bl	8000a6c <__aeabi_dcmpun>
 8002cd8:	4683      	mov	fp, r0
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d156      	bne.n	8002d8c <pow+0xec>
 8002cde:	4632      	mov	r2, r6
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	f7fd fec1 	bl	8000a6c <__aeabi_dcmpun>
 8002cea:	9001      	str	r0, [sp, #4]
 8002cec:	b1e8      	cbz	r0, 8002d2a <pow+0x8a>
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fe87 	bl	8000a08 <__aeabi_dcmpeq>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d046      	beq.n	8002d8c <pow+0xec>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	9302      	str	r3, [sp, #8]
 8002d02:	4b9c      	ldr	r3, [pc, #624]	; (8002f74 <pow+0x2d4>)
 8002d04:	9303      	str	r3, [sp, #12]
 8002d06:	4b9c      	ldr	r3, [pc, #624]	; (8002f78 <pow+0x2d8>)
 8002d08:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f1b9 0f02 	cmp.w	r9, #2
 8002d12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002d16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002d1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002d1e:	d033      	beq.n	8002d88 <pow+0xe8>
 8002d20:	a802      	add	r0, sp, #8
 8002d22:	f000 ff06 	bl	8003b32 <matherr>
 8002d26:	bb48      	cbnz	r0, 8002d7c <pow+0xdc>
 8002d28:	e05e      	b.n	8002de8 <pow+0x148>
 8002d2a:	f04f 0a00 	mov.w	sl, #0
 8002d2e:	f04f 0b00 	mov.w	fp, #0
 8002d32:	4652      	mov	r2, sl
 8002d34:	465b      	mov	r3, fp
 8002d36:	4630      	mov	r0, r6
 8002d38:	4639      	mov	r1, r7
 8002d3a:	f7fd fe65 	bl	8000a08 <__aeabi_dcmpeq>
 8002d3e:	ec4b ab19 	vmov	d9, sl, fp
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d055      	beq.n	8002df2 <pow+0x152>
 8002d46:	4652      	mov	r2, sl
 8002d48:	465b      	mov	r3, fp
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f7fd fe5b 	bl	8000a08 <__aeabi_dcmpeq>
 8002d52:	4680      	mov	r8, r0
 8002d54:	b318      	cbz	r0, 8002d9e <pow+0xfe>
 8002d56:	2301      	movs	r3, #1
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	4b86      	ldr	r3, [pc, #536]	; (8002f74 <pow+0x2d4>)
 8002d5c:	9303      	str	r3, [sp, #12]
 8002d5e:	9b01      	ldr	r3, [sp, #4]
 8002d60:	930a      	str	r3, [sp, #40]	; 0x28
 8002d62:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002d66:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002d6a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002d6e:	f1b9 0f00 	cmp.w	r9, #0
 8002d72:	d0d5      	beq.n	8002d20 <pow+0x80>
 8002d74:	4b80      	ldr	r3, [pc, #512]	; (8002f78 <pow+0x2d8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d7e:	b11b      	cbz	r3, 8002d88 <pow+0xe8>
 8002d80:	f7ff ff64 	bl	8002c4c <__errno>
 8002d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d86:	6003      	str	r3, [r0, #0]
 8002d88:	ed9d 8b08 	vldr	d8, [sp, #32]
 8002d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8002d90:	eef0 0a68 	vmov.f32	s1, s17
 8002d94:	b00d      	add	sp, #52	; 0x34
 8002d96:	ecbd 8b04 	vpop	{d8-d9}
 8002d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d9e:	ec45 4b10 	vmov	d0, r4, r5
 8002da2:	f000 febe 	bl	8003b22 <finite>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d0f0      	beq.n	8002d8c <pow+0xec>
 8002daa:	4652      	mov	r2, sl
 8002dac:	465b      	mov	r3, fp
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd fe33 	bl	8000a1c <__aeabi_dcmplt>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d0e8      	beq.n	8002d8c <pow+0xec>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	9302      	str	r3, [sp, #8]
 8002dbe:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <pow+0x2d4>)
 8002dc0:	9303      	str	r3, [sp, #12]
 8002dc2:	4b6b      	ldr	r3, [pc, #428]	; (8002f70 <pow+0x2d0>)
 8002dc4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8002dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8002dcc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002dd0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002dd4:	b913      	cbnz	r3, 8002ddc <pow+0x13c>
 8002dd6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002dda:	e7a1      	b.n	8002d20 <pow+0x80>
 8002ddc:	4967      	ldr	r1, [pc, #412]	; (8002f7c <pow+0x2dc>)
 8002dde:	2000      	movs	r0, #0
 8002de0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d19b      	bne.n	8002d20 <pow+0x80>
 8002de8:	f7ff ff30 	bl	8002c4c <__errno>
 8002dec:	2321      	movs	r3, #33	; 0x21
 8002dee:	6003      	str	r3, [r0, #0]
 8002df0:	e7c4      	b.n	8002d7c <pow+0xdc>
 8002df2:	eeb0 0a48 	vmov.f32	s0, s16
 8002df6:	eef0 0a68 	vmov.f32	s1, s17
 8002dfa:	f000 fe92 	bl	8003b22 <finite>
 8002dfe:	9001      	str	r0, [sp, #4]
 8002e00:	2800      	cmp	r0, #0
 8002e02:	f040 808a 	bne.w	8002f1a <pow+0x27a>
 8002e06:	ec47 6b10 	vmov	d0, r6, r7
 8002e0a:	f000 fe8a 	bl	8003b22 <finite>
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	f000 8083 	beq.w	8002f1a <pow+0x27a>
 8002e14:	ec45 4b10 	vmov	d0, r4, r5
 8002e18:	f000 fe83 	bl	8003b22 <finite>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d07c      	beq.n	8002f1a <pow+0x27a>
 8002e20:	ec53 2b18 	vmov	r2, r3, d8
 8002e24:	ee18 0a10 	vmov	r0, s16
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f7fd fe1f 	bl	8000a6c <__aeabi_dcmpun>
 8002e2e:	f998 9000 	ldrsb.w	r9, [r8]
 8002e32:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <pow+0x2d4>)
 8002e34:	b1b0      	cbz	r0, 8002e64 <pow+0x1c4>
 8002e36:	2201      	movs	r2, #1
 8002e38:	9303      	str	r3, [sp, #12]
 8002e3a:	9b01      	ldr	r3, [sp, #4]
 8002e3c:	9202      	str	r2, [sp, #8]
 8002e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8002e40:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002e44:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002e48:	f1b9 0f00 	cmp.w	r9, #0
 8002e4c:	d0c3      	beq.n	8002dd6 <pow+0x136>
 8002e4e:	4652      	mov	r2, sl
 8002e50:	465b      	mov	r3, fp
 8002e52:	4650      	mov	r0, sl
 8002e54:	4659      	mov	r1, fp
 8002e56:	f7fd fc99 	bl	800078c <__aeabi_ddiv>
 8002e5a:	f1b9 0f02 	cmp.w	r9, #2
 8002e5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002e62:	e7c0      	b.n	8002de6 <pow+0x146>
 8002e64:	2203      	movs	r2, #3
 8002e66:	9202      	str	r2, [sp, #8]
 8002e68:	9303      	str	r3, [sp, #12]
 8002e6a:	900a      	str	r0, [sp, #40]	; 0x28
 8002e6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002e70:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002e74:	f1b9 0f00 	cmp.w	r9, #0
 8002e78:	d12c      	bne.n	8002ed4 <pow+0x234>
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <pow+0x2e0>)
 8002e7c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002e80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002e84:	4630      	mov	r0, r6
 8002e86:	4652      	mov	r2, sl
 8002e88:	465b      	mov	r3, fp
 8002e8a:	4639      	mov	r1, r7
 8002e8c:	f7fd fdc6 	bl	8000a1c <__aeabi_dcmplt>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d066      	beq.n	8002f62 <pow+0x2c2>
 8002e94:	2200      	movs	r2, #0
 8002e96:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <pow+0x2e4>)
 8002e98:	4620      	mov	r0, r4
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	f7fd fb4c 	bl	8000538 <__aeabi_dmul>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	460d      	mov	r5, r1
 8002ea4:	ec45 4b10 	vmov	d0, r4, r5
 8002ea8:	f000 fe4e 	bl	8003b48 <rint>
 8002eac:	4620      	mov	r0, r4
 8002eae:	ec53 2b10 	vmov	r2, r3, d0
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	f7fd fda8 	bl	8000a08 <__aeabi_dcmpeq>
 8002eb8:	b920      	cbnz	r0, 8002ec4 <pow+0x224>
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <pow+0x2e8>)
 8002ebc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002ec0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002ec4:	f998 3000 	ldrsb.w	r3, [r8]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d14a      	bne.n	8002f62 <pow+0x2c2>
 8002ecc:	f7ff febe 	bl	8002c4c <__errno>
 8002ed0:	2322      	movs	r3, #34	; 0x22
 8002ed2:	e78c      	b.n	8002dee <pow+0x14e>
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <pow+0x2ec>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002edc:	4630      	mov	r0, r6
 8002ede:	4652      	mov	r2, sl
 8002ee0:	465b      	mov	r3, fp
 8002ee2:	4639      	mov	r1, r7
 8002ee4:	f7fd fd9a 	bl	8000a1c <__aeabi_dcmplt>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d0eb      	beq.n	8002ec4 <pow+0x224>
 8002eec:	2200      	movs	r2, #0
 8002eee:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <pow+0x2e4>)
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f7fd fb20 	bl	8000538 <__aeabi_dmul>
 8002ef8:	4604      	mov	r4, r0
 8002efa:	460d      	mov	r5, r1
 8002efc:	ec45 4b10 	vmov	d0, r4, r5
 8002f00:	f000 fe22 	bl	8003b48 <rint>
 8002f04:	4620      	mov	r0, r4
 8002f06:	ec53 2b10 	vmov	r2, r3, d0
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd fd7c 	bl	8000a08 <__aeabi_dcmpeq>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d1d7      	bne.n	8002ec4 <pow+0x224>
 8002f14:	2200      	movs	r2, #0
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <pow+0x2dc>)
 8002f18:	e7d2      	b.n	8002ec0 <pow+0x220>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	ec51 0b18 	vmov	r0, r1, d8
 8002f22:	f7fd fd71 	bl	8000a08 <__aeabi_dcmpeq>
 8002f26:	2800      	cmp	r0, #0
 8002f28:	f43f af30 	beq.w	8002d8c <pow+0xec>
 8002f2c:	ec47 6b10 	vmov	d0, r6, r7
 8002f30:	f000 fdf7 	bl	8003b22 <finite>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	f43f af29 	beq.w	8002d8c <pow+0xec>
 8002f3a:	ec45 4b10 	vmov	d0, r4, r5
 8002f3e:	f000 fdf0 	bl	8003b22 <finite>
 8002f42:	2800      	cmp	r0, #0
 8002f44:	f43f af22 	beq.w	8002d8c <pow+0xec>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <pow+0x2d4>)
 8002f4e:	9303      	str	r3, [sp, #12]
 8002f50:	2300      	movs	r3, #0
 8002f52:	930a      	str	r3, [sp, #40]	; 0x28
 8002f54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002f58:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002f5c:	ed8d 9b08 	vstr	d9, [sp, #32]
 8002f60:	e7b0      	b.n	8002ec4 <pow+0x224>
 8002f62:	a802      	add	r0, sp, #8
 8002f64:	f000 fde5 	bl	8003b32 <matherr>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	f47f af07 	bne.w	8002d7c <pow+0xdc>
 8002f6e:	e7ad      	b.n	8002ecc <pow+0x22c>
 8002f70:	20000070 	.word	0x20000070
 8002f74:	08003d88 	.word	0x08003d88
 8002f78:	3ff00000 	.word	0x3ff00000
 8002f7c:	fff00000 	.word	0xfff00000
 8002f80:	47efffff 	.word	0x47efffff
 8002f84:	3fe00000 	.word	0x3fe00000
 8002f88:	c7efffff 	.word	0xc7efffff
 8002f8c:	7ff00000 	.word	0x7ff00000

08002f90 <__ieee754_pow>:
 8002f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f94:	b091      	sub	sp, #68	; 0x44
 8002f96:	ed8d 1b00 	vstr	d1, [sp]
 8002f9a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8002f9e:	ec57 6b10 	vmov	r6, r7, d0
 8002fa2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8002fa6:	ea58 0302 	orrs.w	r3, r8, r2
 8002faa:	ee10 aa10 	vmov	sl, s0
 8002fae:	463d      	mov	r5, r7
 8002fb0:	f000 84bd 	beq.w	800392e <__ieee754_pow+0x99e>
 8002fb4:	4b78      	ldr	r3, [pc, #480]	; (8003198 <__ieee754_pow+0x208>)
 8002fb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	dc09      	bgt.n	8002fd2 <__ieee754_pow+0x42>
 8002fbe:	d103      	bne.n	8002fc8 <__ieee754_pow+0x38>
 8002fc0:	b93e      	cbnz	r6, 8002fd2 <__ieee754_pow+0x42>
 8002fc2:	45a0      	cmp	r8, r4
 8002fc4:	dc0d      	bgt.n	8002fe2 <__ieee754_pow+0x52>
 8002fc6:	e001      	b.n	8002fcc <__ieee754_pow+0x3c>
 8002fc8:	4598      	cmp	r8, r3
 8002fca:	dc02      	bgt.n	8002fd2 <__ieee754_pow+0x42>
 8002fcc:	4598      	cmp	r8, r3
 8002fce:	d10e      	bne.n	8002fee <__ieee754_pow+0x5e>
 8002fd0:	b16a      	cbz	r2, 8002fee <__ieee754_pow+0x5e>
 8002fd2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002fd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002fda:	ea54 030a 	orrs.w	r3, r4, sl
 8002fde:	f000 84a6 	beq.w	800392e <__ieee754_pow+0x99e>
 8002fe2:	486e      	ldr	r0, [pc, #440]	; (800319c <__ieee754_pow+0x20c>)
 8002fe4:	b011      	add	sp, #68	; 0x44
 8002fe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fea:	f000 bda5 	b.w	8003b38 <nan>
 8002fee:	2d00      	cmp	r5, #0
 8002ff0:	da53      	bge.n	800309a <__ieee754_pow+0x10a>
 8002ff2:	4b6b      	ldr	r3, [pc, #428]	; (80031a0 <__ieee754_pow+0x210>)
 8002ff4:	4598      	cmp	r8, r3
 8002ff6:	dc4d      	bgt.n	8003094 <__ieee754_pow+0x104>
 8002ff8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002ffc:	4598      	cmp	r8, r3
 8002ffe:	dd4c      	ble.n	800309a <__ieee754_pow+0x10a>
 8003000:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003004:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003008:	2b14      	cmp	r3, #20
 800300a:	dd26      	ble.n	800305a <__ieee754_pow+0xca>
 800300c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003010:	fa22 f103 	lsr.w	r1, r2, r3
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	429a      	cmp	r2, r3
 800301a:	d13e      	bne.n	800309a <__ieee754_pow+0x10a>
 800301c:	f001 0101 	and.w	r1, r1, #1
 8003020:	f1c1 0b02 	rsb	fp, r1, #2
 8003024:	2a00      	cmp	r2, #0
 8003026:	d15b      	bne.n	80030e0 <__ieee754_pow+0x150>
 8003028:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <__ieee754_pow+0x208>)
 800302a:	4598      	cmp	r8, r3
 800302c:	d124      	bne.n	8003078 <__ieee754_pow+0xe8>
 800302e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003032:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003036:	ea53 030a 	orrs.w	r3, r3, sl
 800303a:	f000 8478 	beq.w	800392e <__ieee754_pow+0x99e>
 800303e:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <__ieee754_pow+0x214>)
 8003040:	429c      	cmp	r4, r3
 8003042:	dd2d      	ble.n	80030a0 <__ieee754_pow+0x110>
 8003044:	f1b9 0f00 	cmp.w	r9, #0
 8003048:	f280 8475 	bge.w	8003936 <__ieee754_pow+0x9a6>
 800304c:	2000      	movs	r0, #0
 800304e:	2100      	movs	r1, #0
 8003050:	ec41 0b10 	vmov	d0, r0, r1
 8003054:	b011      	add	sp, #68	; 0x44
 8003056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800305a:	2a00      	cmp	r2, #0
 800305c:	d13e      	bne.n	80030dc <__ieee754_pow+0x14c>
 800305e:	f1c3 0314 	rsb	r3, r3, #20
 8003062:	fa48 f103 	asr.w	r1, r8, r3
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	4598      	cmp	r8, r3
 800306c:	f040 846b 	bne.w	8003946 <__ieee754_pow+0x9b6>
 8003070:	f001 0101 	and.w	r1, r1, #1
 8003074:	f1c1 0b02 	rsb	fp, r1, #2
 8003078:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <__ieee754_pow+0x218>)
 800307a:	4598      	cmp	r8, r3
 800307c:	d118      	bne.n	80030b0 <__ieee754_pow+0x120>
 800307e:	f1b9 0f00 	cmp.w	r9, #0
 8003082:	f280 845c 	bge.w	800393e <__ieee754_pow+0x9ae>
 8003086:	4948      	ldr	r1, [pc, #288]	; (80031a8 <__ieee754_pow+0x218>)
 8003088:	4632      	mov	r2, r6
 800308a:	463b      	mov	r3, r7
 800308c:	2000      	movs	r0, #0
 800308e:	f7fd fb7d 	bl	800078c <__aeabi_ddiv>
 8003092:	e7dd      	b.n	8003050 <__ieee754_pow+0xc0>
 8003094:	f04f 0b02 	mov.w	fp, #2
 8003098:	e7c4      	b.n	8003024 <__ieee754_pow+0x94>
 800309a:	f04f 0b00 	mov.w	fp, #0
 800309e:	e7c1      	b.n	8003024 <__ieee754_pow+0x94>
 80030a0:	f1b9 0f00 	cmp.w	r9, #0
 80030a4:	dad2      	bge.n	800304c <__ieee754_pow+0xbc>
 80030a6:	e89d 0009 	ldmia.w	sp, {r0, r3}
 80030aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80030ae:	e7cf      	b.n	8003050 <__ieee754_pow+0xc0>
 80030b0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80030b4:	d106      	bne.n	80030c4 <__ieee754_pow+0x134>
 80030b6:	4632      	mov	r2, r6
 80030b8:	463b      	mov	r3, r7
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	f7fd fa3b 	bl	8000538 <__aeabi_dmul>
 80030c2:	e7c5      	b.n	8003050 <__ieee754_pow+0xc0>
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <__ieee754_pow+0x21c>)
 80030c6:	4599      	cmp	r9, r3
 80030c8:	d10a      	bne.n	80030e0 <__ieee754_pow+0x150>
 80030ca:	2d00      	cmp	r5, #0
 80030cc:	db08      	blt.n	80030e0 <__ieee754_pow+0x150>
 80030ce:	ec47 6b10 	vmov	d0, r6, r7
 80030d2:	b011      	add	sp, #68	; 0x44
 80030d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d8:	f000 bc6c 	b.w	80039b4 <__ieee754_sqrt>
 80030dc:	f04f 0b00 	mov.w	fp, #0
 80030e0:	ec47 6b10 	vmov	d0, r6, r7
 80030e4:	f000 fd16 	bl	8003b14 <fabs>
 80030e8:	ec51 0b10 	vmov	r0, r1, d0
 80030ec:	f1ba 0f00 	cmp.w	sl, #0
 80030f0:	d127      	bne.n	8003142 <__ieee754_pow+0x1b2>
 80030f2:	b124      	cbz	r4, 80030fe <__ieee754_pow+0x16e>
 80030f4:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <__ieee754_pow+0x218>)
 80030f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d121      	bne.n	8003142 <__ieee754_pow+0x1b2>
 80030fe:	f1b9 0f00 	cmp.w	r9, #0
 8003102:	da05      	bge.n	8003110 <__ieee754_pow+0x180>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	2000      	movs	r0, #0
 800310a:	4927      	ldr	r1, [pc, #156]	; (80031a8 <__ieee754_pow+0x218>)
 800310c:	f7fd fb3e 	bl	800078c <__aeabi_ddiv>
 8003110:	2d00      	cmp	r5, #0
 8003112:	da9d      	bge.n	8003050 <__ieee754_pow+0xc0>
 8003114:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003118:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800311c:	ea54 030b 	orrs.w	r3, r4, fp
 8003120:	d108      	bne.n	8003134 <__ieee754_pow+0x1a4>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f7fd f851 	bl	80001d0 <__aeabi_dsub>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	e7ac      	b.n	800308e <__ieee754_pow+0xfe>
 8003134:	f1bb 0f01 	cmp.w	fp, #1
 8003138:	d18a      	bne.n	8003050 <__ieee754_pow+0xc0>
 800313a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800313e:	4619      	mov	r1, r3
 8003140:	e786      	b.n	8003050 <__ieee754_pow+0xc0>
 8003142:	0fed      	lsrs	r5, r5, #31
 8003144:	1e6b      	subs	r3, r5, #1
 8003146:	930d      	str	r3, [sp, #52]	; 0x34
 8003148:	ea5b 0303 	orrs.w	r3, fp, r3
 800314c:	d102      	bne.n	8003154 <__ieee754_pow+0x1c4>
 800314e:	4632      	mov	r2, r6
 8003150:	463b      	mov	r3, r7
 8003152:	e7e8      	b.n	8003126 <__ieee754_pow+0x196>
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <__ieee754_pow+0x220>)
 8003156:	4598      	cmp	r8, r3
 8003158:	f340 80fe 	ble.w	8003358 <__ieee754_pow+0x3c8>
 800315c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003160:	4598      	cmp	r8, r3
 8003162:	dd0a      	ble.n	800317a <__ieee754_pow+0x1ea>
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <__ieee754_pow+0x214>)
 8003166:	429c      	cmp	r4, r3
 8003168:	dc0d      	bgt.n	8003186 <__ieee754_pow+0x1f6>
 800316a:	f1b9 0f00 	cmp.w	r9, #0
 800316e:	f6bf af6d 	bge.w	800304c <__ieee754_pow+0xbc>
 8003172:	a307      	add	r3, pc, #28	; (adr r3, 8003190 <__ieee754_pow+0x200>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	e79f      	b.n	80030ba <__ieee754_pow+0x12a>
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <__ieee754_pow+0x224>)
 800317c:	429c      	cmp	r4, r3
 800317e:	ddf4      	ble.n	800316a <__ieee754_pow+0x1da>
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <__ieee754_pow+0x218>)
 8003182:	429c      	cmp	r4, r3
 8003184:	dd18      	ble.n	80031b8 <__ieee754_pow+0x228>
 8003186:	f1b9 0f00 	cmp.w	r9, #0
 800318a:	dcf2      	bgt.n	8003172 <__ieee754_pow+0x1e2>
 800318c:	e75e      	b.n	800304c <__ieee754_pow+0xbc>
 800318e:	bf00      	nop
 8003190:	8800759c 	.word	0x8800759c
 8003194:	7e37e43c 	.word	0x7e37e43c
 8003198:	7ff00000 	.word	0x7ff00000
 800319c:	08003d8b 	.word	0x08003d8b
 80031a0:	433fffff 	.word	0x433fffff
 80031a4:	3fefffff 	.word	0x3fefffff
 80031a8:	3ff00000 	.word	0x3ff00000
 80031ac:	3fe00000 	.word	0x3fe00000
 80031b0:	41e00000 	.word	0x41e00000
 80031b4:	3feffffe 	.word	0x3feffffe
 80031b8:	2200      	movs	r2, #0
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <__ieee754_pow+0x3b8>)
 80031bc:	f7fd f808 	bl	80001d0 <__aeabi_dsub>
 80031c0:	a355      	add	r3, pc, #340	; (adr r3, 8003318 <__ieee754_pow+0x388>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	4604      	mov	r4, r0
 80031c8:	460d      	mov	r5, r1
 80031ca:	f7fd f9b5 	bl	8000538 <__aeabi_dmul>
 80031ce:	a354      	add	r3, pc, #336	; (adr r3, 8003320 <__ieee754_pow+0x390>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	4606      	mov	r6, r0
 80031d6:	460f      	mov	r7, r1
 80031d8:	4620      	mov	r0, r4
 80031da:	4629      	mov	r1, r5
 80031dc:	f7fd f9ac 	bl	8000538 <__aeabi_dmul>
 80031e0:	2200      	movs	r2, #0
 80031e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031e6:	4b59      	ldr	r3, [pc, #356]	; (800334c <__ieee754_pow+0x3bc>)
 80031e8:	4620      	mov	r0, r4
 80031ea:	4629      	mov	r1, r5
 80031ec:	f7fd f9a4 	bl	8000538 <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	a14c      	add	r1, pc, #304	; (adr r1, 8003328 <__ieee754_pow+0x398>)
 80031f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031fa:	f7fc ffe9 	bl	80001d0 <__aeabi_dsub>
 80031fe:	4622      	mov	r2, r4
 8003200:	462b      	mov	r3, r5
 8003202:	f7fd f999 	bl	8000538 <__aeabi_dmul>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	2000      	movs	r0, #0
 800320c:	4950      	ldr	r1, [pc, #320]	; (8003350 <__ieee754_pow+0x3c0>)
 800320e:	f7fc ffdf 	bl	80001d0 <__aeabi_dsub>
 8003212:	4622      	mov	r2, r4
 8003214:	462b      	mov	r3, r5
 8003216:	4680      	mov	r8, r0
 8003218:	4689      	mov	r9, r1
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f7fd f98b 	bl	8000538 <__aeabi_dmul>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4640      	mov	r0, r8
 8003228:	4649      	mov	r1, r9
 800322a:	f7fd f985 	bl	8000538 <__aeabi_dmul>
 800322e:	a340      	add	r3, pc, #256	; (adr r3, 8003330 <__ieee754_pow+0x3a0>)
 8003230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003234:	f7fd f980 	bl	8000538 <__aeabi_dmul>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003240:	f7fc ffc6 	bl	80001d0 <__aeabi_dsub>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4604      	mov	r4, r0
 800324a:	460d      	mov	r5, r1
 800324c:	4630      	mov	r0, r6
 800324e:	4639      	mov	r1, r7
 8003250:	f7fc ffc0 	bl	80001d4 <__adddf3>
 8003254:	2000      	movs	r0, #0
 8003256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800325a:	4632      	mov	r2, r6
 800325c:	463b      	mov	r3, r7
 800325e:	f7fc ffb7 	bl	80001d0 <__aeabi_dsub>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	f7fc ffb1 	bl	80001d0 <__aeabi_dsub>
 800326e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003270:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003274:	4313      	orrs	r3, r2
 8003276:	4606      	mov	r6, r0
 8003278:	460f      	mov	r7, r1
 800327a:	f040 81eb 	bne.w	8003654 <__ieee754_pow+0x6c4>
 800327e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8003338 <__ieee754_pow+0x3a8>
 8003282:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003286:	2400      	movs	r4, #0
 8003288:	4622      	mov	r2, r4
 800328a:	462b      	mov	r3, r5
 800328c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003290:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003294:	f7fc ff9c 	bl	80001d0 <__aeabi_dsub>
 8003298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800329c:	f7fd f94c 	bl	8000538 <__aeabi_dmul>
 80032a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032a4:	4680      	mov	r8, r0
 80032a6:	4689      	mov	r9, r1
 80032a8:	4630      	mov	r0, r6
 80032aa:	4639      	mov	r1, r7
 80032ac:	f7fd f944 	bl	8000538 <__aeabi_dmul>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4640      	mov	r0, r8
 80032b6:	4649      	mov	r1, r9
 80032b8:	f7fc ff8c 	bl	80001d4 <__adddf3>
 80032bc:	4622      	mov	r2, r4
 80032be:	462b      	mov	r3, r5
 80032c0:	4680      	mov	r8, r0
 80032c2:	4689      	mov	r9, r1
 80032c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032c8:	f7fd f936 	bl	8000538 <__aeabi_dmul>
 80032cc:	460b      	mov	r3, r1
 80032ce:	4604      	mov	r4, r0
 80032d0:	460d      	mov	r5, r1
 80032d2:	4602      	mov	r2, r0
 80032d4:	4649      	mov	r1, r9
 80032d6:	4640      	mov	r0, r8
 80032d8:	e9cd 4500 	strd	r4, r5, [sp]
 80032dc:	f7fc ff7a 	bl	80001d4 <__adddf3>
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <__ieee754_pow+0x3c4>)
 80032e2:	4299      	cmp	r1, r3
 80032e4:	4606      	mov	r6, r0
 80032e6:	460f      	mov	r7, r1
 80032e8:	468b      	mov	fp, r1
 80032ea:	f340 82f7 	ble.w	80038dc <__ieee754_pow+0x94c>
 80032ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80032f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80032f6:	4303      	orrs	r3, r0
 80032f8:	f000 81ea 	beq.w	80036d0 <__ieee754_pow+0x740>
 80032fc:	a310      	add	r3, pc, #64	; (adr r3, 8003340 <__ieee754_pow+0x3b0>)
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003306:	f7fd f917 	bl	8000538 <__aeabi_dmul>
 800330a:	a30d      	add	r3, pc, #52	; (adr r3, 8003340 <__ieee754_pow+0x3b0>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	e6d5      	b.n	80030be <__ieee754_pow+0x12e>
 8003312:	bf00      	nop
 8003314:	f3af 8000 	nop.w
 8003318:	60000000 	.word	0x60000000
 800331c:	3ff71547 	.word	0x3ff71547
 8003320:	f85ddf44 	.word	0xf85ddf44
 8003324:	3e54ae0b 	.word	0x3e54ae0b
 8003328:	55555555 	.word	0x55555555
 800332c:	3fd55555 	.word	0x3fd55555
 8003330:	652b82fe 	.word	0x652b82fe
 8003334:	3ff71547 	.word	0x3ff71547
 8003338:	00000000 	.word	0x00000000
 800333c:	bff00000 	.word	0xbff00000
 8003340:	8800759c 	.word	0x8800759c
 8003344:	7e37e43c 	.word	0x7e37e43c
 8003348:	3ff00000 	.word	0x3ff00000
 800334c:	3fd00000 	.word	0x3fd00000
 8003350:	3fe00000 	.word	0x3fe00000
 8003354:	408fffff 	.word	0x408fffff
 8003358:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	da05      	bge.n	800336e <__ieee754_pow+0x3de>
 8003362:	4bd3      	ldr	r3, [pc, #844]	; (80036b0 <__ieee754_pow+0x720>)
 8003364:	f7fd f8e8 	bl	8000538 <__aeabi_dmul>
 8003368:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800336c:	460c      	mov	r4, r1
 800336e:	1523      	asrs	r3, r4, #20
 8003370:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003374:	4413      	add	r3, r2
 8003376:	9307      	str	r3, [sp, #28]
 8003378:	4bce      	ldr	r3, [pc, #824]	; (80036b4 <__ieee754_pow+0x724>)
 800337a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800337e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003382:	429c      	cmp	r4, r3
 8003384:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003388:	dd08      	ble.n	800339c <__ieee754_pow+0x40c>
 800338a:	4bcb      	ldr	r3, [pc, #812]	; (80036b8 <__ieee754_pow+0x728>)
 800338c:	429c      	cmp	r4, r3
 800338e:	f340 815e 	ble.w	800364e <__ieee754_pow+0x6be>
 8003392:	9b07      	ldr	r3, [sp, #28]
 8003394:	3301      	adds	r3, #1
 8003396:	9307      	str	r3, [sp, #28]
 8003398:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800339c:	f04f 0a00 	mov.w	sl, #0
 80033a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80033a4:	930c      	str	r3, [sp, #48]	; 0x30
 80033a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033a8:	4bc4      	ldr	r3, [pc, #784]	; (80036bc <__ieee754_pow+0x72c>)
 80033aa:	4413      	add	r3, r2
 80033ac:	ed93 7b00 	vldr	d7, [r3]
 80033b0:	4629      	mov	r1, r5
 80033b2:	ec53 2b17 	vmov	r2, r3, d7
 80033b6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80033ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80033be:	f7fc ff07 	bl	80001d0 <__aeabi_dsub>
 80033c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80033c6:	4606      	mov	r6, r0
 80033c8:	460f      	mov	r7, r1
 80033ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80033ce:	f7fc ff01 	bl	80001d4 <__adddf3>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	2000      	movs	r0, #0
 80033d8:	49b9      	ldr	r1, [pc, #740]	; (80036c0 <__ieee754_pow+0x730>)
 80033da:	f7fd f9d7 	bl	800078c <__aeabi_ddiv>
 80033de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4630      	mov	r0, r6
 80033e8:	4639      	mov	r1, r7
 80033ea:	f7fd f8a5 	bl	8000538 <__aeabi_dmul>
 80033ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033f2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80033f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80033fa:	2300      	movs	r3, #0
 80033fc:	9302      	str	r3, [sp, #8]
 80033fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003402:	106d      	asrs	r5, r5, #1
 8003404:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003408:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800340c:	2200      	movs	r2, #0
 800340e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003412:	4640      	mov	r0, r8
 8003414:	4649      	mov	r1, r9
 8003416:	4614      	mov	r4, r2
 8003418:	461d      	mov	r5, r3
 800341a:	f7fd f88d 	bl	8000538 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4630      	mov	r0, r6
 8003424:	4639      	mov	r1, r7
 8003426:	f7fc fed3 	bl	80001d0 <__aeabi_dsub>
 800342a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800342e:	4606      	mov	r6, r0
 8003430:	460f      	mov	r7, r1
 8003432:	4620      	mov	r0, r4
 8003434:	4629      	mov	r1, r5
 8003436:	f7fc fecb 	bl	80001d0 <__aeabi_dsub>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003442:	f7fc fec5 	bl	80001d0 <__aeabi_dsub>
 8003446:	4642      	mov	r2, r8
 8003448:	464b      	mov	r3, r9
 800344a:	f7fd f875 	bl	8000538 <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4630      	mov	r0, r6
 8003454:	4639      	mov	r1, r7
 8003456:	f7fc febb 	bl	80001d0 <__aeabi_dsub>
 800345a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800345e:	f7fd f86b 	bl	8000538 <__aeabi_dmul>
 8003462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003466:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f7fd f863 	bl	8000538 <__aeabi_dmul>
 8003472:	a37b      	add	r3, pc, #492	; (adr r3, 8003660 <__ieee754_pow+0x6d0>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	4604      	mov	r4, r0
 800347a:	460d      	mov	r5, r1
 800347c:	f7fd f85c 	bl	8000538 <__aeabi_dmul>
 8003480:	a379      	add	r3, pc, #484	; (adr r3, 8003668 <__ieee754_pow+0x6d8>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fc fea5 	bl	80001d4 <__adddf3>
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	f7fd f853 	bl	8000538 <__aeabi_dmul>
 8003492:	a377      	add	r3, pc, #476	; (adr r3, 8003670 <__ieee754_pow+0x6e0>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f7fc fe9c 	bl	80001d4 <__adddf3>
 800349c:	4622      	mov	r2, r4
 800349e:	462b      	mov	r3, r5
 80034a0:	f7fd f84a 	bl	8000538 <__aeabi_dmul>
 80034a4:	a374      	add	r3, pc, #464	; (adr r3, 8003678 <__ieee754_pow+0x6e8>)
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f7fc fe93 	bl	80001d4 <__adddf3>
 80034ae:	4622      	mov	r2, r4
 80034b0:	462b      	mov	r3, r5
 80034b2:	f7fd f841 	bl	8000538 <__aeabi_dmul>
 80034b6:	a372      	add	r3, pc, #456	; (adr r3, 8003680 <__ieee754_pow+0x6f0>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fc fe8a 	bl	80001d4 <__adddf3>
 80034c0:	4622      	mov	r2, r4
 80034c2:	462b      	mov	r3, r5
 80034c4:	f7fd f838 	bl	8000538 <__aeabi_dmul>
 80034c8:	a36f      	add	r3, pc, #444	; (adr r3, 8003688 <__ieee754_pow+0x6f8>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fc fe81 	bl	80001d4 <__adddf3>
 80034d2:	4622      	mov	r2, r4
 80034d4:	4606      	mov	r6, r0
 80034d6:	460f      	mov	r7, r1
 80034d8:	462b      	mov	r3, r5
 80034da:	4620      	mov	r0, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	f7fd f82b 	bl	8000538 <__aeabi_dmul>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4630      	mov	r0, r6
 80034e8:	4639      	mov	r1, r7
 80034ea:	f7fd f825 	bl	8000538 <__aeabi_dmul>
 80034ee:	4642      	mov	r2, r8
 80034f0:	4604      	mov	r4, r0
 80034f2:	460d      	mov	r5, r1
 80034f4:	464b      	mov	r3, r9
 80034f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034fa:	f7fc fe6b 	bl	80001d4 <__adddf3>
 80034fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003502:	f7fd f819 	bl	8000538 <__aeabi_dmul>
 8003506:	4622      	mov	r2, r4
 8003508:	462b      	mov	r3, r5
 800350a:	f7fc fe63 	bl	80001d4 <__adddf3>
 800350e:	4642      	mov	r2, r8
 8003510:	4606      	mov	r6, r0
 8003512:	460f      	mov	r7, r1
 8003514:	464b      	mov	r3, r9
 8003516:	4640      	mov	r0, r8
 8003518:	4649      	mov	r1, r9
 800351a:	f7fd f80d 	bl	8000538 <__aeabi_dmul>
 800351e:	2200      	movs	r2, #0
 8003520:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <__ieee754_pow+0x734>)
 8003522:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003526:	f7fc fe55 	bl	80001d4 <__adddf3>
 800352a:	4632      	mov	r2, r6
 800352c:	463b      	mov	r3, r7
 800352e:	f7fc fe51 	bl	80001d4 <__adddf3>
 8003532:	9802      	ldr	r0, [sp, #8]
 8003534:	460d      	mov	r5, r1
 8003536:	4604      	mov	r4, r0
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4640      	mov	r0, r8
 800353e:	4649      	mov	r1, r9
 8003540:	f7fc fffa 	bl	8000538 <__aeabi_dmul>
 8003544:	2200      	movs	r2, #0
 8003546:	4680      	mov	r8, r0
 8003548:	4689      	mov	r9, r1
 800354a:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <__ieee754_pow+0x734>)
 800354c:	4620      	mov	r0, r4
 800354e:	4629      	mov	r1, r5
 8003550:	f7fc fe3e 	bl	80001d0 <__aeabi_dsub>
 8003554:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003558:	f7fc fe3a 	bl	80001d0 <__aeabi_dsub>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4630      	mov	r0, r6
 8003562:	4639      	mov	r1, r7
 8003564:	f7fc fe34 	bl	80001d0 <__aeabi_dsub>
 8003568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800356c:	f7fc ffe4 	bl	8000538 <__aeabi_dmul>
 8003570:	4622      	mov	r2, r4
 8003572:	4606      	mov	r6, r0
 8003574:	460f      	mov	r7, r1
 8003576:	462b      	mov	r3, r5
 8003578:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800357c:	f7fc ffdc 	bl	8000538 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4630      	mov	r0, r6
 8003586:	4639      	mov	r1, r7
 8003588:	f7fc fe24 	bl	80001d4 <__adddf3>
 800358c:	4606      	mov	r6, r0
 800358e:	460f      	mov	r7, r1
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4640      	mov	r0, r8
 8003596:	4649      	mov	r1, r9
 8003598:	f7fc fe1c 	bl	80001d4 <__adddf3>
 800359c:	9802      	ldr	r0, [sp, #8]
 800359e:	a33c      	add	r3, pc, #240	; (adr r3, 8003690 <__ieee754_pow+0x700>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	f7fc ffc6 	bl	8000538 <__aeabi_dmul>
 80035ac:	4642      	mov	r2, r8
 80035ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80035b2:	464b      	mov	r3, r9
 80035b4:	4620      	mov	r0, r4
 80035b6:	4629      	mov	r1, r5
 80035b8:	f7fc fe0a 	bl	80001d0 <__aeabi_dsub>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4630      	mov	r0, r6
 80035c2:	4639      	mov	r1, r7
 80035c4:	f7fc fe04 	bl	80001d0 <__aeabi_dsub>
 80035c8:	a333      	add	r3, pc, #204	; (adr r3, 8003698 <__ieee754_pow+0x708>)
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	f7fc ffb3 	bl	8000538 <__aeabi_dmul>
 80035d2:	a333      	add	r3, pc, #204	; (adr r3, 80036a0 <__ieee754_pow+0x710>)
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	4606      	mov	r6, r0
 80035da:	460f      	mov	r7, r1
 80035dc:	4620      	mov	r0, r4
 80035de:	4629      	mov	r1, r5
 80035e0:	f7fc ffaa 	bl	8000538 <__aeabi_dmul>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4630      	mov	r0, r6
 80035ea:	4639      	mov	r1, r7
 80035ec:	f7fc fdf2 	bl	80001d4 <__adddf3>
 80035f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035f2:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <__ieee754_pow+0x738>)
 80035f4:	4413      	add	r3, r2
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f7fc fdeb 	bl	80001d4 <__adddf3>
 80035fe:	4604      	mov	r4, r0
 8003600:	9807      	ldr	r0, [sp, #28]
 8003602:	460d      	mov	r5, r1
 8003604:	f7fc ff32 	bl	800046c <__aeabi_i2d>
 8003608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800360a:	4b30      	ldr	r3, [pc, #192]	; (80036cc <__ieee754_pow+0x73c>)
 800360c:	4413      	add	r3, r2
 800360e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003612:	4606      	mov	r6, r0
 8003614:	460f      	mov	r7, r1
 8003616:	4622      	mov	r2, r4
 8003618:	462b      	mov	r3, r5
 800361a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800361e:	f7fc fdd9 	bl	80001d4 <__adddf3>
 8003622:	4642      	mov	r2, r8
 8003624:	464b      	mov	r3, r9
 8003626:	f7fc fdd5 	bl	80001d4 <__adddf3>
 800362a:	4632      	mov	r2, r6
 800362c:	463b      	mov	r3, r7
 800362e:	f7fc fdd1 	bl	80001d4 <__adddf3>
 8003632:	9802      	ldr	r0, [sp, #8]
 8003634:	4632      	mov	r2, r6
 8003636:	463b      	mov	r3, r7
 8003638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800363c:	f7fc fdc8 	bl	80001d0 <__aeabi_dsub>
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	f7fc fdc4 	bl	80001d0 <__aeabi_dsub>
 8003648:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800364c:	e607      	b.n	800325e <__ieee754_pow+0x2ce>
 800364e:	f04f 0a01 	mov.w	sl, #1
 8003652:	e6a5      	b.n	80033a0 <__ieee754_pow+0x410>
 8003654:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80036a8 <__ieee754_pow+0x718>
 8003658:	e613      	b.n	8003282 <__ieee754_pow+0x2f2>
 800365a:	bf00      	nop
 800365c:	f3af 8000 	nop.w
 8003660:	4a454eef 	.word	0x4a454eef
 8003664:	3fca7e28 	.word	0x3fca7e28
 8003668:	93c9db65 	.word	0x93c9db65
 800366c:	3fcd864a 	.word	0x3fcd864a
 8003670:	a91d4101 	.word	0xa91d4101
 8003674:	3fd17460 	.word	0x3fd17460
 8003678:	518f264d 	.word	0x518f264d
 800367c:	3fd55555 	.word	0x3fd55555
 8003680:	db6fabff 	.word	0xdb6fabff
 8003684:	3fdb6db6 	.word	0x3fdb6db6
 8003688:	33333303 	.word	0x33333303
 800368c:	3fe33333 	.word	0x3fe33333
 8003690:	e0000000 	.word	0xe0000000
 8003694:	3feec709 	.word	0x3feec709
 8003698:	dc3a03fd 	.word	0xdc3a03fd
 800369c:	3feec709 	.word	0x3feec709
 80036a0:	145b01f5 	.word	0x145b01f5
 80036a4:	be3e2fe0 	.word	0xbe3e2fe0
 80036a8:	00000000 	.word	0x00000000
 80036ac:	3ff00000 	.word	0x3ff00000
 80036b0:	43400000 	.word	0x43400000
 80036b4:	0003988e 	.word	0x0003988e
 80036b8:	000bb679 	.word	0x000bb679
 80036bc:	08003d90 	.word	0x08003d90
 80036c0:	3ff00000 	.word	0x3ff00000
 80036c4:	40080000 	.word	0x40080000
 80036c8:	08003db0 	.word	0x08003db0
 80036cc:	08003da0 	.word	0x08003da0
 80036d0:	a3b6      	add	r3, pc, #728	; (adr r3, 80039ac <__ieee754_pow+0xa1c>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	4640      	mov	r0, r8
 80036d8:	4649      	mov	r1, r9
 80036da:	f7fc fd7b 	bl	80001d4 <__adddf3>
 80036de:	4622      	mov	r2, r4
 80036e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036e4:	462b      	mov	r3, r5
 80036e6:	4630      	mov	r0, r6
 80036e8:	4639      	mov	r1, r7
 80036ea:	f7fc fd71 	bl	80001d0 <__aeabi_dsub>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036f6:	f7fd f9af 	bl	8000a58 <__aeabi_dcmpgt>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	f47f adfe 	bne.w	80032fc <__ieee754_pow+0x36c>
 8003700:	4aa5      	ldr	r2, [pc, #660]	; (8003998 <__ieee754_pow+0xa08>)
 8003702:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003706:	4293      	cmp	r3, r2
 8003708:	f340 810c 	ble.w	8003924 <__ieee754_pow+0x994>
 800370c:	151b      	asrs	r3, r3, #20
 800370e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003712:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003716:	fa4a f303 	asr.w	r3, sl, r3
 800371a:	445b      	add	r3, fp
 800371c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003720:	4e9e      	ldr	r6, [pc, #632]	; (800399c <__ieee754_pow+0xa0c>)
 8003722:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003726:	4116      	asrs	r6, r2
 8003728:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800372c:	2000      	movs	r0, #0
 800372e:	ea23 0106 	bic.w	r1, r3, r6
 8003732:	f1c2 0214 	rsb	r2, r2, #20
 8003736:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800373a:	fa4a fa02 	asr.w	sl, sl, r2
 800373e:	f1bb 0f00 	cmp.w	fp, #0
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4620      	mov	r0, r4
 8003748:	4629      	mov	r1, r5
 800374a:	bfb8      	it	lt
 800374c:	f1ca 0a00 	rsblt	sl, sl, #0
 8003750:	f7fc fd3e 	bl	80001d0 <__aeabi_dsub>
 8003754:	e9cd 0100 	strd	r0, r1, [sp]
 8003758:	4642      	mov	r2, r8
 800375a:	464b      	mov	r3, r9
 800375c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003760:	f7fc fd38 	bl	80001d4 <__adddf3>
 8003764:	2000      	movs	r0, #0
 8003766:	a37a      	add	r3, pc, #488	; (adr r3, 8003950 <__ieee754_pow+0x9c0>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	4604      	mov	r4, r0
 800376e:	460d      	mov	r5, r1
 8003770:	f7fc fee2 	bl	8000538 <__aeabi_dmul>
 8003774:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003778:	4606      	mov	r6, r0
 800377a:	460f      	mov	r7, r1
 800377c:	4620      	mov	r0, r4
 800377e:	4629      	mov	r1, r5
 8003780:	f7fc fd26 	bl	80001d0 <__aeabi_dsub>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4640      	mov	r0, r8
 800378a:	4649      	mov	r1, r9
 800378c:	f7fc fd20 	bl	80001d0 <__aeabi_dsub>
 8003790:	a371      	add	r3, pc, #452	; (adr r3, 8003958 <__ieee754_pow+0x9c8>)
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f7fc fecf 	bl	8000538 <__aeabi_dmul>
 800379a:	a371      	add	r3, pc, #452	; (adr r3, 8003960 <__ieee754_pow+0x9d0>)
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	4680      	mov	r8, r0
 80037a2:	4689      	mov	r9, r1
 80037a4:	4620      	mov	r0, r4
 80037a6:	4629      	mov	r1, r5
 80037a8:	f7fc fec6 	bl	8000538 <__aeabi_dmul>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4640      	mov	r0, r8
 80037b2:	4649      	mov	r1, r9
 80037b4:	f7fc fd0e 	bl	80001d4 <__adddf3>
 80037b8:	4604      	mov	r4, r0
 80037ba:	460d      	mov	r5, r1
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4630      	mov	r0, r6
 80037c2:	4639      	mov	r1, r7
 80037c4:	f7fc fd06 	bl	80001d4 <__adddf3>
 80037c8:	4632      	mov	r2, r6
 80037ca:	463b      	mov	r3, r7
 80037cc:	4680      	mov	r8, r0
 80037ce:	4689      	mov	r9, r1
 80037d0:	f7fc fcfe 	bl	80001d0 <__aeabi_dsub>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4620      	mov	r0, r4
 80037da:	4629      	mov	r1, r5
 80037dc:	f7fc fcf8 	bl	80001d0 <__aeabi_dsub>
 80037e0:	4642      	mov	r2, r8
 80037e2:	4606      	mov	r6, r0
 80037e4:	460f      	mov	r7, r1
 80037e6:	464b      	mov	r3, r9
 80037e8:	4640      	mov	r0, r8
 80037ea:	4649      	mov	r1, r9
 80037ec:	f7fc fea4 	bl	8000538 <__aeabi_dmul>
 80037f0:	a35d      	add	r3, pc, #372	; (adr r3, 8003968 <__ieee754_pow+0x9d8>)
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	4604      	mov	r4, r0
 80037f8:	460d      	mov	r5, r1
 80037fa:	f7fc fe9d 	bl	8000538 <__aeabi_dmul>
 80037fe:	a35c      	add	r3, pc, #368	; (adr r3, 8003970 <__ieee754_pow+0x9e0>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fc fce4 	bl	80001d0 <__aeabi_dsub>
 8003808:	4622      	mov	r2, r4
 800380a:	462b      	mov	r3, r5
 800380c:	f7fc fe94 	bl	8000538 <__aeabi_dmul>
 8003810:	a359      	add	r3, pc, #356	; (adr r3, 8003978 <__ieee754_pow+0x9e8>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f7fc fcdd 	bl	80001d4 <__adddf3>
 800381a:	4622      	mov	r2, r4
 800381c:	462b      	mov	r3, r5
 800381e:	f7fc fe8b 	bl	8000538 <__aeabi_dmul>
 8003822:	a357      	add	r3, pc, #348	; (adr r3, 8003980 <__ieee754_pow+0x9f0>)
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f7fc fcd2 	bl	80001d0 <__aeabi_dsub>
 800382c:	4622      	mov	r2, r4
 800382e:	462b      	mov	r3, r5
 8003830:	f7fc fe82 	bl	8000538 <__aeabi_dmul>
 8003834:	a354      	add	r3, pc, #336	; (adr r3, 8003988 <__ieee754_pow+0x9f8>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f7fc fccb 	bl	80001d4 <__adddf3>
 800383e:	4622      	mov	r2, r4
 8003840:	462b      	mov	r3, r5
 8003842:	f7fc fe79 	bl	8000538 <__aeabi_dmul>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4640      	mov	r0, r8
 800384c:	4649      	mov	r1, r9
 800384e:	f7fc fcbf 	bl	80001d0 <__aeabi_dsub>
 8003852:	4604      	mov	r4, r0
 8003854:	460d      	mov	r5, r1
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4640      	mov	r0, r8
 800385c:	4649      	mov	r1, r9
 800385e:	f7fc fe6b 	bl	8000538 <__aeabi_dmul>
 8003862:	2200      	movs	r2, #0
 8003864:	e9cd 0100 	strd	r0, r1, [sp]
 8003868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800386c:	4620      	mov	r0, r4
 800386e:	4629      	mov	r1, r5
 8003870:	f7fc fcae 	bl	80001d0 <__aeabi_dsub>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800387c:	f7fc ff86 	bl	800078c <__aeabi_ddiv>
 8003880:	4632      	mov	r2, r6
 8003882:	4604      	mov	r4, r0
 8003884:	460d      	mov	r5, r1
 8003886:	463b      	mov	r3, r7
 8003888:	4640      	mov	r0, r8
 800388a:	4649      	mov	r1, r9
 800388c:	f7fc fe54 	bl	8000538 <__aeabi_dmul>
 8003890:	4632      	mov	r2, r6
 8003892:	463b      	mov	r3, r7
 8003894:	f7fc fc9e 	bl	80001d4 <__adddf3>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4620      	mov	r0, r4
 800389e:	4629      	mov	r1, r5
 80038a0:	f7fc fc96 	bl	80001d0 <__aeabi_dsub>
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	f7fc fc92 	bl	80001d0 <__aeabi_dsub>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	2000      	movs	r0, #0
 80038b2:	493b      	ldr	r1, [pc, #236]	; (80039a0 <__ieee754_pow+0xa10>)
 80038b4:	f7fc fc8c 	bl	80001d0 <__aeabi_dsub>
 80038b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80038bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	da31      	bge.n	800392a <__ieee754_pow+0x99a>
 80038c6:	4650      	mov	r0, sl
 80038c8:	ec43 2b10 	vmov	d0, r2, r3
 80038cc:	f000 f9c4 	bl	8003c58 <scalbn>
 80038d0:	ec51 0b10 	vmov	r0, r1, d0
 80038d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038d8:	f7ff bbf1 	b.w	80030be <__ieee754_pow+0x12e>
 80038dc:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <__ieee754_pow+0xa14>)
 80038de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80038e2:	429e      	cmp	r6, r3
 80038e4:	f77f af0c 	ble.w	8003700 <__ieee754_pow+0x770>
 80038e8:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <__ieee754_pow+0xa18>)
 80038ea:	440b      	add	r3, r1
 80038ec:	4303      	orrs	r3, r0
 80038ee:	d00b      	beq.n	8003908 <__ieee754_pow+0x978>
 80038f0:	a327      	add	r3, pc, #156	; (adr r3, 8003990 <__ieee754_pow+0xa00>)
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038fa:	f7fc fe1d 	bl	8000538 <__aeabi_dmul>
 80038fe:	a324      	add	r3, pc, #144	; (adr r3, 8003990 <__ieee754_pow+0xa00>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7ff bbdb 	b.w	80030be <__ieee754_pow+0x12e>
 8003908:	4622      	mov	r2, r4
 800390a:	462b      	mov	r3, r5
 800390c:	f7fc fc60 	bl	80001d0 <__aeabi_dsub>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4640      	mov	r0, r8
 8003916:	4649      	mov	r1, r9
 8003918:	f7fd f88a 	bl	8000a30 <__aeabi_dcmple>
 800391c:	2800      	cmp	r0, #0
 800391e:	f43f aeef 	beq.w	8003700 <__ieee754_pow+0x770>
 8003922:	e7e5      	b.n	80038f0 <__ieee754_pow+0x960>
 8003924:	f04f 0a00 	mov.w	sl, #0
 8003928:	e716      	b.n	8003758 <__ieee754_pow+0x7c8>
 800392a:	4621      	mov	r1, r4
 800392c:	e7d2      	b.n	80038d4 <__ieee754_pow+0x944>
 800392e:	2000      	movs	r0, #0
 8003930:	491b      	ldr	r1, [pc, #108]	; (80039a0 <__ieee754_pow+0xa10>)
 8003932:	f7ff bb8d 	b.w	8003050 <__ieee754_pow+0xc0>
 8003936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800393a:	f7ff bb89 	b.w	8003050 <__ieee754_pow+0xc0>
 800393e:	4630      	mov	r0, r6
 8003940:	4639      	mov	r1, r7
 8003942:	f7ff bb85 	b.w	8003050 <__ieee754_pow+0xc0>
 8003946:	4693      	mov	fp, r2
 8003948:	f7ff bb96 	b.w	8003078 <__ieee754_pow+0xe8>
 800394c:	f3af 8000 	nop.w
 8003950:	00000000 	.word	0x00000000
 8003954:	3fe62e43 	.word	0x3fe62e43
 8003958:	fefa39ef 	.word	0xfefa39ef
 800395c:	3fe62e42 	.word	0x3fe62e42
 8003960:	0ca86c39 	.word	0x0ca86c39
 8003964:	be205c61 	.word	0xbe205c61
 8003968:	72bea4d0 	.word	0x72bea4d0
 800396c:	3e663769 	.word	0x3e663769
 8003970:	c5d26bf1 	.word	0xc5d26bf1
 8003974:	3ebbbd41 	.word	0x3ebbbd41
 8003978:	af25de2c 	.word	0xaf25de2c
 800397c:	3f11566a 	.word	0x3f11566a
 8003980:	16bebd93 	.word	0x16bebd93
 8003984:	3f66c16c 	.word	0x3f66c16c
 8003988:	5555553e 	.word	0x5555553e
 800398c:	3fc55555 	.word	0x3fc55555
 8003990:	c2f8f359 	.word	0xc2f8f359
 8003994:	01a56e1f 	.word	0x01a56e1f
 8003998:	3fe00000 	.word	0x3fe00000
 800399c:	000fffff 	.word	0x000fffff
 80039a0:	3ff00000 	.word	0x3ff00000
 80039a4:	4090cbff 	.word	0x4090cbff
 80039a8:	3f6f3400 	.word	0x3f6f3400
 80039ac:	652b82fe 	.word	0x652b82fe
 80039b0:	3c971547 	.word	0x3c971547

080039b4 <__ieee754_sqrt>:
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	ec55 4b10 	vmov	r4, r5, d0
 80039bc:	4e54      	ldr	r6, [pc, #336]	; (8003b10 <__ieee754_sqrt+0x15c>)
 80039be:	43ae      	bics	r6, r5
 80039c0:	ee10 0a10 	vmov	r0, s0
 80039c4:	462b      	mov	r3, r5
 80039c6:	462a      	mov	r2, r5
 80039c8:	4621      	mov	r1, r4
 80039ca:	d113      	bne.n	80039f4 <__ieee754_sqrt+0x40>
 80039cc:	ee10 2a10 	vmov	r2, s0
 80039d0:	462b      	mov	r3, r5
 80039d2:	ee10 0a10 	vmov	r0, s0
 80039d6:	4629      	mov	r1, r5
 80039d8:	f7fc fdae 	bl	8000538 <__aeabi_dmul>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4620      	mov	r0, r4
 80039e2:	4629      	mov	r1, r5
 80039e4:	f7fc fbf6 	bl	80001d4 <__adddf3>
 80039e8:	4604      	mov	r4, r0
 80039ea:	460d      	mov	r5, r1
 80039ec:	ec45 4b10 	vmov	d0, r4, r5
 80039f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039f4:	2d00      	cmp	r5, #0
 80039f6:	dc10      	bgt.n	8003a1a <__ieee754_sqrt+0x66>
 80039f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80039fc:	4330      	orrs	r0, r6
 80039fe:	d0f5      	beq.n	80039ec <__ieee754_sqrt+0x38>
 8003a00:	b15d      	cbz	r5, 8003a1a <__ieee754_sqrt+0x66>
 8003a02:	ee10 2a10 	vmov	r2, s0
 8003a06:	462b      	mov	r3, r5
 8003a08:	4620      	mov	r0, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7fc fbe0 	bl	80001d0 <__aeabi_dsub>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	f7fc feba 	bl	800078c <__aeabi_ddiv>
 8003a18:	e7e6      	b.n	80039e8 <__ieee754_sqrt+0x34>
 8003a1a:	151b      	asrs	r3, r3, #20
 8003a1c:	d10c      	bne.n	8003a38 <__ieee754_sqrt+0x84>
 8003a1e:	2a00      	cmp	r2, #0
 8003a20:	d06d      	beq.n	8003afe <__ieee754_sqrt+0x14a>
 8003a22:	2000      	movs	r0, #0
 8003a24:	02d6      	lsls	r6, r2, #11
 8003a26:	d56e      	bpl.n	8003b06 <__ieee754_sqrt+0x152>
 8003a28:	1e44      	subs	r4, r0, #1
 8003a2a:	1b1b      	subs	r3, r3, r4
 8003a2c:	f1c0 0420 	rsb	r4, r0, #32
 8003a30:	fa21 f404 	lsr.w	r4, r1, r4
 8003a34:	4322      	orrs	r2, r4
 8003a36:	4081      	lsls	r1, r0
 8003a38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003a3c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003a40:	07dd      	lsls	r5, r3, #31
 8003a42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003a46:	bf42      	ittt	mi
 8003a48:	0052      	lslmi	r2, r2, #1
 8003a4a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8003a4e:	0049      	lslmi	r1, r1, #1
 8003a50:	1058      	asrs	r0, r3, #1
 8003a52:	2500      	movs	r5, #0
 8003a54:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8003a58:	441a      	add	r2, r3
 8003a5a:	0049      	lsls	r1, r1, #1
 8003a5c:	2316      	movs	r3, #22
 8003a5e:	462c      	mov	r4, r5
 8003a60:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003a64:	19a7      	adds	r7, r4, r6
 8003a66:	4297      	cmp	r7, r2
 8003a68:	bfde      	ittt	le
 8003a6a:	1bd2      	suble	r2, r2, r7
 8003a6c:	19bc      	addle	r4, r7, r6
 8003a6e:	19ad      	addle	r5, r5, r6
 8003a70:	0052      	lsls	r2, r2, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003a78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003a7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003a80:	d1f0      	bne.n	8003a64 <__ieee754_sqrt+0xb0>
 8003a82:	f04f 0e20 	mov.w	lr, #32
 8003a86:	469c      	mov	ip, r3
 8003a88:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003a8c:	42a2      	cmp	r2, r4
 8003a8e:	eb06 070c 	add.w	r7, r6, ip
 8003a92:	dc02      	bgt.n	8003a9a <__ieee754_sqrt+0xe6>
 8003a94:	d112      	bne.n	8003abc <__ieee754_sqrt+0x108>
 8003a96:	428f      	cmp	r7, r1
 8003a98:	d810      	bhi.n	8003abc <__ieee754_sqrt+0x108>
 8003a9a:	2f00      	cmp	r7, #0
 8003a9c:	eb07 0c06 	add.w	ip, r7, r6
 8003aa0:	da34      	bge.n	8003b0c <__ieee754_sqrt+0x158>
 8003aa2:	f1bc 0f00 	cmp.w	ip, #0
 8003aa6:	db31      	blt.n	8003b0c <__ieee754_sqrt+0x158>
 8003aa8:	f104 0801 	add.w	r8, r4, #1
 8003aac:	1b12      	subs	r2, r2, r4
 8003aae:	428f      	cmp	r7, r1
 8003ab0:	bf88      	it	hi
 8003ab2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003ab6:	1bc9      	subs	r1, r1, r7
 8003ab8:	4433      	add	r3, r6
 8003aba:	4644      	mov	r4, r8
 8003abc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8003ac0:	f1be 0e01 	subs.w	lr, lr, #1
 8003ac4:	443a      	add	r2, r7
 8003ac6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003aca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003ace:	d1dd      	bne.n	8003a8c <__ieee754_sqrt+0xd8>
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	d006      	beq.n	8003ae2 <__ieee754_sqrt+0x12e>
 8003ad4:	1c5c      	adds	r4, r3, #1
 8003ad6:	bf13      	iteet	ne
 8003ad8:	3301      	addne	r3, #1
 8003ada:	3501      	addeq	r5, #1
 8003adc:	4673      	moveq	r3, lr
 8003ade:	f023 0301 	bicne.w	r3, r3, #1
 8003ae2:	106a      	asrs	r2, r5, #1
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	07e9      	lsls	r1, r5, #31
 8003ae8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003aec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003af0:	bf48      	it	mi
 8003af2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003af6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8003afa:	461c      	mov	r4, r3
 8003afc:	e776      	b.n	80039ec <__ieee754_sqrt+0x38>
 8003afe:	0aca      	lsrs	r2, r1, #11
 8003b00:	3b15      	subs	r3, #21
 8003b02:	0549      	lsls	r1, r1, #21
 8003b04:	e78b      	b.n	8003a1e <__ieee754_sqrt+0x6a>
 8003b06:	0052      	lsls	r2, r2, #1
 8003b08:	3001      	adds	r0, #1
 8003b0a:	e78b      	b.n	8003a24 <__ieee754_sqrt+0x70>
 8003b0c:	46a0      	mov	r8, r4
 8003b0e:	e7cd      	b.n	8003aac <__ieee754_sqrt+0xf8>
 8003b10:	7ff00000 	.word	0x7ff00000

08003b14 <fabs>:
 8003b14:	ec53 2b10 	vmov	r2, r3, d0
 8003b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b1c:	ec43 2b10 	vmov	d0, r2, r3
 8003b20:	4770      	bx	lr

08003b22 <finite>:
 8003b22:	ee10 3a90 	vmov	r3, s1
 8003b26:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8003b2a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003b2e:	0fc0      	lsrs	r0, r0, #31
 8003b30:	4770      	bx	lr

08003b32 <matherr>:
 8003b32:	2000      	movs	r0, #0
 8003b34:	4770      	bx	lr
	...

08003b38 <nan>:
 8003b38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003b40 <nan+0x8>
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	00000000 	.word	0x00000000
 8003b44:	7ff80000 	.word	0x7ff80000

08003b48 <rint>:
 8003b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b4a:	ec51 0b10 	vmov	r0, r1, d0
 8003b4e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8003b52:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8003b56:	2e13      	cmp	r6, #19
 8003b58:	ee10 7a10 	vmov	r7, s0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4602      	mov	r2, r0
 8003b60:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8003b64:	dc58      	bgt.n	8003c18 <rint+0xd0>
 8003b66:	2e00      	cmp	r6, #0
 8003b68:	da2b      	bge.n	8003bc2 <rint+0x7a>
 8003b6a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003b6e:	4302      	orrs	r2, r0
 8003b70:	d023      	beq.n	8003bba <rint+0x72>
 8003b72:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8003b76:	4302      	orrs	r2, r0
 8003b78:	4251      	negs	r1, r2
 8003b7a:	4311      	orrs	r1, r2
 8003b7c:	0b09      	lsrs	r1, r1, #12
 8003b7e:	0c5b      	lsrs	r3, r3, #17
 8003b80:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8003b84:	045b      	lsls	r3, r3, #17
 8003b86:	ea41 0703 	orr.w	r7, r1, r3
 8003b8a:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <rint+0x108>)
 8003b8c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003b90:	4639      	mov	r1, r7
 8003b92:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003b96:	ee10 0a10 	vmov	r0, s0
 8003b9a:	4632      	mov	r2, r6
 8003b9c:	463b      	mov	r3, r7
 8003b9e:	f7fc fb19 	bl	80001d4 <__adddf3>
 8003ba2:	e9cd 0100 	strd	r0, r1, [sp]
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	4632      	mov	r2, r6
 8003baa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bae:	f7fc fb0f 	bl	80001d0 <__aeabi_dsub>
 8003bb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003bb6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8003bba:	ec41 0b10 	vmov	d0, r0, r1
 8003bbe:	b003      	add	sp, #12
 8003bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc2:	4c24      	ldr	r4, [pc, #144]	; (8003c54 <rint+0x10c>)
 8003bc4:	4134      	asrs	r4, r6
 8003bc6:	ea01 0704 	and.w	r7, r1, r4
 8003bca:	4307      	orrs	r7, r0
 8003bcc:	d0f5      	beq.n	8003bba <rint+0x72>
 8003bce:	0861      	lsrs	r1, r4, #1
 8003bd0:	ea03 0001 	and.w	r0, r3, r1
 8003bd4:	4302      	orrs	r2, r0
 8003bd6:	d00b      	beq.n	8003bf0 <rint+0xa8>
 8003bd8:	ea23 0101 	bic.w	r1, r3, r1
 8003bdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003be0:	2e13      	cmp	r6, #19
 8003be2:	fa43 f306 	asr.w	r3, r3, r6
 8003be6:	bf0c      	ite	eq
 8003be8:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8003bec:	2200      	movne	r2, #0
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <rint+0x108>)
 8003bf4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003bf8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	462b      	mov	r3, r5
 8003c00:	4622      	mov	r2, r4
 8003c02:	f7fc fae7 	bl	80001d4 <__adddf3>
 8003c06:	e9cd 0100 	strd	r0, r1, [sp]
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c12:	f7fc fadd 	bl	80001d0 <__aeabi_dsub>
 8003c16:	e7d0      	b.n	8003bba <rint+0x72>
 8003c18:	2e33      	cmp	r6, #51	; 0x33
 8003c1a:	dd08      	ble.n	8003c2e <rint+0xe6>
 8003c1c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003c20:	d1cb      	bne.n	8003bba <rint+0x72>
 8003c22:	ee10 2a10 	vmov	r2, s0
 8003c26:	460b      	mov	r3, r1
 8003c28:	f7fc fad4 	bl	80001d4 <__adddf3>
 8003c2c:	e7c5      	b.n	8003bba <rint+0x72>
 8003c2e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8003c32:	f04f 34ff 	mov.w	r4, #4294967295
 8003c36:	40f4      	lsrs	r4, r6
 8003c38:	4220      	tst	r0, r4
 8003c3a:	d0be      	beq.n	8003bba <rint+0x72>
 8003c3c:	0861      	lsrs	r1, r4, #1
 8003c3e:	420f      	tst	r7, r1
 8003c40:	bf1f      	itttt	ne
 8003c42:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8003c46:	ea27 0101 	bicne.w	r1, r7, r1
 8003c4a:	4132      	asrne	r2, r6
 8003c4c:	430a      	orrne	r2, r1
 8003c4e:	e7cf      	b.n	8003bf0 <rint+0xa8>
 8003c50:	08003dc0 	.word	0x08003dc0
 8003c54:	000fffff 	.word	0x000fffff

08003c58 <scalbn>:
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	ec55 4b10 	vmov	r4, r5, d0
 8003c5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003c62:	4606      	mov	r6, r0
 8003c64:	462b      	mov	r3, r5
 8003c66:	b9b2      	cbnz	r2, 8003c96 <scalbn+0x3e>
 8003c68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003c6c:	4323      	orrs	r3, r4
 8003c6e:	d03c      	beq.n	8003cea <scalbn+0x92>
 8003c70:	2200      	movs	r2, #0
 8003c72:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <scalbn+0xe8>)
 8003c74:	4629      	mov	r1, r5
 8003c76:	ee10 0a10 	vmov	r0, s0
 8003c7a:	f7fc fc5d 	bl	8000538 <__aeabi_dmul>
 8003c7e:	4a31      	ldr	r2, [pc, #196]	; (8003d44 <scalbn+0xec>)
 8003c80:	4296      	cmp	r6, r2
 8003c82:	4604      	mov	r4, r0
 8003c84:	460d      	mov	r5, r1
 8003c86:	460b      	mov	r3, r1
 8003c88:	da13      	bge.n	8003cb2 <scalbn+0x5a>
 8003c8a:	a329      	add	r3, pc, #164	; (adr r3, 8003d30 <scalbn+0xd8>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f7fc fc52 	bl	8000538 <__aeabi_dmul>
 8003c94:	e00a      	b.n	8003cac <scalbn+0x54>
 8003c96:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003c9a:	428a      	cmp	r2, r1
 8003c9c:	d10c      	bne.n	8003cb8 <scalbn+0x60>
 8003c9e:	ee10 2a10 	vmov	r2, s0
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	f7fc fa94 	bl	80001d4 <__adddf3>
 8003cac:	4604      	mov	r4, r0
 8003cae:	460d      	mov	r5, r1
 8003cb0:	e01b      	b.n	8003cea <scalbn+0x92>
 8003cb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003cb6:	3a36      	subs	r2, #54	; 0x36
 8003cb8:	4432      	add	r2, r6
 8003cba:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003cbe:	428a      	cmp	r2, r1
 8003cc0:	dd0b      	ble.n	8003cda <scalbn+0x82>
 8003cc2:	ec45 4b11 	vmov	d1, r4, r5
 8003cc6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003d38 <scalbn+0xe0>
 8003cca:	f000 f83f 	bl	8003d4c <copysign>
 8003cce:	a31a      	add	r3, pc, #104	; (adr r3, 8003d38 <scalbn+0xe0>)
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	ec51 0b10 	vmov	r0, r1, d0
 8003cd8:	e7da      	b.n	8003c90 <scalbn+0x38>
 8003cda:	2a00      	cmp	r2, #0
 8003cdc:	dd08      	ble.n	8003cf0 <scalbn+0x98>
 8003cde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003ce2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ce6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003cea:	ec45 4b10 	vmov	d0, r4, r5
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003cf4:	da0d      	bge.n	8003d12 <scalbn+0xba>
 8003cf6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003cfa:	429e      	cmp	r6, r3
 8003cfc:	ec45 4b11 	vmov	d1, r4, r5
 8003d00:	dce1      	bgt.n	8003cc6 <scalbn+0x6e>
 8003d02:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8003d30 <scalbn+0xd8>
 8003d06:	f000 f821 	bl	8003d4c <copysign>
 8003d0a:	a309      	add	r3, pc, #36	; (adr r3, 8003d30 <scalbn+0xd8>)
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	e7e0      	b.n	8003cd4 <scalbn+0x7c>
 8003d12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003d16:	3236      	adds	r2, #54	; 0x36
 8003d18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	2200      	movs	r2, #0
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <scalbn+0xf0>)
 8003d28:	e7b2      	b.n	8003c90 <scalbn+0x38>
 8003d2a:	bf00      	nop
 8003d2c:	f3af 8000 	nop.w
 8003d30:	c2f8f359 	.word	0xc2f8f359
 8003d34:	01a56e1f 	.word	0x01a56e1f
 8003d38:	8800759c 	.word	0x8800759c
 8003d3c:	7e37e43c 	.word	0x7e37e43c
 8003d40:	43500000 	.word	0x43500000
 8003d44:	ffff3cb0 	.word	0xffff3cb0
 8003d48:	3c900000 	.word	0x3c900000

08003d4c <copysign>:
 8003d4c:	ec53 2b10 	vmov	r2, r3, d0
 8003d50:	ee11 0a90 	vmov	r0, s3
 8003d54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003d5c:	ea41 0300 	orr.w	r3, r1, r0
 8003d60:	ec43 2b10 	vmov	d0, r2, r3
 8003d64:	4770      	bx	lr
	...

08003d68 <_init>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	bf00      	nop
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr

08003d74 <_fini>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	bf00      	nop
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr
