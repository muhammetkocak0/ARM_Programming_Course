
007_HAL_TIMER_SLAVE_TRIGGER_WITH_INTERNAL_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001f84  08001f84  00011f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f94  08001f94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f9c  08001f9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f9c  08001f9c  00011f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000087aa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001305  00000000  00000000  000287e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  00029af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000860  00000000  00000000  0002a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8cc  00000000  00000000  0002ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090ed  00000000  00000000  0004a514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c44eb  00000000  00000000  00053601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117aec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002578  00000000  00000000  00117b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f6c 	.word	0x08001f6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001f6c 	.word	0x08001f6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PeriodElapsedCallback>:
uint32_t timer1 = 0;
uint32_t timer2 = 0;
uint32_t count = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	count++;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004dc:	6013      	str	r3, [r2, #0]



}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200000c0 	.word	0x200000c0

080004f0 <main>:

int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  HAL_Init();
 80004f4:	f000 fa18 	bl	8000928 <HAL_Init>


  SystemClock_Config();
 80004f8:	f000 f826 	bl	8000548 <SystemClock_Config>


  MX_TIM1_Init();
 80004fc:	f000 f882 	bl	8000604 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000500:	f000 f8d2 	bl	80006a8 <MX_TIM2_Init>
HAL_TIM_Base_Start(&htim1);
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <main+0x48>)
 8000506:	f001 f807 	bl	8001518 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim2);
 800050a:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x4c>)
 800050c:	f001 f804 	bl	8001518 <HAL_TIM_Base_Start>
__HAL_TIM_ENABLE_IT(&htim2,TIM_IT_UPDATE);
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <main+0x4c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	68da      	ldr	r2, [r3, #12]
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <main+0x4c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f042 0201 	orr.w	r2, r2, #1
 800051e:	60da      	str	r2, [r3, #12]
  while (1)
  {
    timer1=__HAL_TIM_GET_COUNTER(&htim1);
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <main+0x48>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000526:	4a06      	ldr	r2, [pc, #24]	; (8000540 <main+0x50>)
 8000528:	6013      	str	r3, [r2, #0]
    timer2=__HAL_TIM_GET_COUNTER(&htim2);
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <main+0x4c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <main+0x54>)
 8000532:	6013      	str	r3, [r2, #0]
    timer1=__HAL_TIM_GET_COUNTER(&htim1);
 8000534:	e7f4      	b.n	8000520 <main+0x30>
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028
 800053c:	20000070 	.word	0x20000070
 8000540:	200000b8 	.word	0x200000b8
 8000544:	200000bc 	.word	0x200000bc

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fd00 	bl	8001f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xb4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xb4>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xb4>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <SystemClock_Config+0xb8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <SystemClock_Config+0xb8>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <SystemClock_Config+0xb8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fb39 	bl	8000c30 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005c4:	f000 f8d6 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd9c 	bl	8001120 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ee:	f000 f8c1 	bl	8000774 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000622:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <MX_TIM1_Init+0xa0>)
 8000624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000628:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800062c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800063a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_TIM1_Init+0x9c>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_TIM1_Init+0x9c>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000650:	f000 ff12 	bl	8001478 <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800065a:	f000 f88b 	bl	8000774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_TIM1_Init+0x9c>)
 800066c:	f001 f8c4 	bl	80017f8 <HAL_TIM_ConfigClockSource>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000676:	f000 f87d 	bl	8000774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800067a:	2320      	movs	r3, #32
 800067c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000688:	f001 fbb4 	bl	8001df4 <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000692:	f000 f86f 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000028 	.word	0x20000028
 80006a4:	40010000 	.word	0x40010000

080006a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_TIM2_Init+0xc4>)
 80006d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_TIM2_Init+0xc4>)
 80006de:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80006e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_TIM2_Init+0xc4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_TIM2_Init+0xc4>)
 80006ec:	4a20      	ldr	r2, [pc, #128]	; (8000770 <MX_TIM2_Init+0xc8>)
 80006ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_TIM2_Init+0xc4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_TIM2_Init+0xc4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006fc:	481b      	ldr	r0, [pc, #108]	; (800076c <MX_TIM2_Init+0xc4>)
 80006fe:	f000 febb 	bl	8001478 <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000708:	f000 f834 	bl	8000774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	4619      	mov	r1, r3
 8000718:	4814      	ldr	r0, [pc, #80]	; (800076c <MX_TIM2_Init+0xc4>)
 800071a:	f001 f86d 	bl	80017f8 <HAL_TIM_ConfigClockSource>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000724:	f000 f826 	bl	8000774 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000728:	2306      	movs	r3, #6
 800072a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <MX_TIM2_Init+0xc4>)
 8000738:	f001 f925 	bl	8001986 <HAL_TIM_SlaveConfigSynchro>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000742:	f000 f817 	bl	8000774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_TIM2_Init+0xc4>)
 8000754:	f001 fb4e 	bl	8001df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800075e:	f000 f809 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	; 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000070 	.word	0x20000070
 8000770:	000186a0 	.word	0x000186a0

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a18      	ldr	r2, [pc, #96]	; (8000840 <HAL_TIM_Base_MspInit+0x70>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10e      	bne.n	8000800 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <HAL_TIM_Base_MspInit+0x74>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <HAL_TIM_Base_MspInit+0x74>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_TIM_Base_MspInit+0x74>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007fe:	e01a      	b.n	8000836 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000808:	d115      	bne.n	8000836 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_TIM_Base_MspInit+0x74>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <HAL_TIM_Base_MspInit+0x74>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_TIM_Base_MspInit+0x74>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	201c      	movs	r0, #28
 800082c:	f000 f9c9 	bl	8000bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000830:	201c      	movs	r0, #28
 8000832:	f000 f9e2 	bl	8000bfa <HAL_NVIC_EnableIRQ>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40010000 	.word	0x40010000
 8000844:	40023800 	.word	0x40023800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f89a 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <TIM2_IRQHandler+0x10>)
 80008a2:	f000 fea1 	bl	80015e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000070 	.word	0x20000070

080008b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800090c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008da:	490e      	ldr	r1, [pc, #56]	; (8000914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008dc:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f0:	4c0b      	ldr	r4, [pc, #44]	; (8000920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008fe:	f7ff ffd7 	bl	80008b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000902:	f001 fb07 	bl	8001f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000906:	f7ff fdf3 	bl	80004f0 <main>
  bx  lr    
 800090a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800090c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000918:	08001fa4 	.word	0x08001fa4
  ldr r2, =_sbss
 800091c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000920:	200000c8 	.word	0x200000c8

08000924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <HAL_Init+0x40>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_Init+0x40>)
 800093e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_Init+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_Init+0x40>)
 800094a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f92b 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff ff10 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023c00 	.word	0x40023c00

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f943 	bl	8000c16 <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f90b 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	200000c4 	.word	0x200000c4

080009f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	200000c4 	.word	0x200000c4

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <__NVIC_EnableIRQ+0x38>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff29 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff3e 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff8e 	bl	8000b00 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff31 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffa2 	bl	8000b68 <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e267      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d075      	beq.n	8000d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c4e:	4b88      	ldr	r3, [pc, #544]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d00c      	beq.n	8000c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c5a:	4b85      	ldr	r3, [pc, #532]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c62:	2b08      	cmp	r3, #8
 8000c64:	d112      	bne.n	8000c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c66:	4b82      	ldr	r3, [pc, #520]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c72:	d10b      	bne.n	8000c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c74:	4b7e      	ldr	r3, [pc, #504]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d05b      	beq.n	8000d38 <HAL_RCC_OscConfig+0x108>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d157      	bne.n	8000d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e242      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c94:	d106      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x74>
 8000c96:	4b76      	ldr	r3, [pc, #472]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a75      	ldr	r2, [pc, #468]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e01d      	b.n	8000ce0 <HAL_RCC_OscConfig+0xb0>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cac:	d10c      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x98>
 8000cae:	4b70      	ldr	r3, [pc, #448]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a6f      	ldr	r2, [pc, #444]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b6d      	ldr	r3, [pc, #436]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a6c      	ldr	r2, [pc, #432]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e00b      	b.n	8000ce0 <HAL_RCC_OscConfig+0xb0>
 8000cc8:	4b69      	ldr	r3, [pc, #420]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a68      	ldr	r2, [pc, #416]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	4b66      	ldr	r3, [pc, #408]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a65      	ldr	r2, [pc, #404]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d013      	beq.n	8000d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fe84 	bl	80009f4 <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf0:	f7ff fe80 	bl	80009f4 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b64      	cmp	r3, #100	; 0x64
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e207      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d02:	4b5b      	ldr	r3, [pc, #364]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f0      	beq.n	8000cf0 <HAL_RCC_OscConfig+0xc0>
 8000d0e:	e014      	b.n	8000d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d10:	f7ff fe70 	bl	80009f4 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d18:	f7ff fe6c 	bl	80009f4 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b64      	cmp	r3, #100	; 0x64
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e1f3      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2a:	4b51      	ldr	r3, [pc, #324]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0xe8>
 8000d36:	e000      	b.n	8000d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d063      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d46:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 030c 	and.w	r3, r3, #12
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00b      	beq.n	8000d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d5a:	2b08      	cmp	r3, #8
 8000d5c:	d11c      	bne.n	8000d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d5e:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d116      	bne.n	8000d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6a:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <HAL_RCC_OscConfig+0x152>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d001      	beq.n	8000d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e1c7      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d82:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4937      	ldr	r1, [pc, #220]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	e03a      	b.n	8000e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d020      	beq.n	8000de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000da0:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <HAL_RCC_OscConfig+0x244>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da6:	f7ff fe25 	bl	80009f4 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dae:	f7ff fe21 	bl	80009f4 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e1a8      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f0      	beq.n	8000dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4925      	ldr	r1, [pc, #148]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	600b      	str	r3, [r1, #0]
 8000de0:	e015      	b.n	8000e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <HAL_RCC_OscConfig+0x244>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de8:	f7ff fe04 	bl	80009f4 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df0:	f7ff fe00 	bl	80009f4 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e187      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f0      	bne.n	8000df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d036      	beq.n	8000e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d016      	beq.n	8000e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_RCC_OscConfig+0x248>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e28:	f7ff fde4 	bl	80009f4 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff fde0 	bl	80009f4 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e167      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_RCC_OscConfig+0x240>)
 8000e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f0      	beq.n	8000e30 <HAL_RCC_OscConfig+0x200>
 8000e4e:	e01b      	b.n	8000e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_RCC_OscConfig+0x248>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e56:	f7ff fdcd 	bl	80009f4 <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5c:	e00e      	b.n	8000e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fdc9 	bl	80009f4 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d907      	bls.n	8000e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e150      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
 8000e70:	40023800 	.word	0x40023800
 8000e74:	42470000 	.word	0x42470000
 8000e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e7c:	4b88      	ldr	r3, [pc, #544]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1ea      	bne.n	8000e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 8097 	beq.w	8000fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9a:	4b81      	ldr	r3, [pc, #516]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10f      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a7c      	ldr	r2, [pc, #496]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b7a      	ldr	r3, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	4b77      	ldr	r3, [pc, #476]	; (80010a4 <HAL_RCC_OscConfig+0x474>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d118      	bne.n	8000f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed2:	4b74      	ldr	r3, [pc, #464]	; (80010a4 <HAL_RCC_OscConfig+0x474>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a73      	ldr	r2, [pc, #460]	; (80010a4 <HAL_RCC_OscConfig+0x474>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fd89 	bl	80009f4 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee6:	f7ff fd85 	bl	80009f4 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e10c      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	4b6a      	ldr	r3, [pc, #424]	; (80010a4 <HAL_RCC_OscConfig+0x474>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d106      	bne.n	8000f1a <HAL_RCC_OscConfig+0x2ea>
 8000f0c:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f10:	4a63      	ldr	r2, [pc, #396]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6713      	str	r3, [r2, #112]	; 0x70
 8000f18:	e01c      	b.n	8000f54 <HAL_RCC_OscConfig+0x324>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x30c>
 8000f22:	4b5f      	ldr	r3, [pc, #380]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f26:	4a5e      	ldr	r2, [pc, #376]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f2e:	4b5c      	ldr	r3, [pc, #368]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f32:	4a5b      	ldr	r2, [pc, #364]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6713      	str	r3, [r2, #112]	; 0x70
 8000f3a:	e00b      	b.n	8000f54 <HAL_RCC_OscConfig+0x324>
 8000f3c:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f40:	4a57      	ldr	r2, [pc, #348]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f42:	f023 0301 	bic.w	r3, r3, #1
 8000f46:	6713      	str	r3, [r2, #112]	; 0x70
 8000f48:	4b55      	ldr	r3, [pc, #340]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4c:	4a54      	ldr	r2, [pc, #336]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f4e:	f023 0304 	bic.w	r3, r3, #4
 8000f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d015      	beq.n	8000f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f5c:	f7ff fd4a 	bl	80009f4 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f62:	e00a      	b.n	8000f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f64:	f7ff fd46 	bl	80009f4 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e0cb      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f7a:	4b49      	ldr	r3, [pc, #292]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0ee      	beq.n	8000f64 <HAL_RCC_OscConfig+0x334>
 8000f86:	e014      	b.n	8000fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f88:	f7ff fd34 	bl	80009f4 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8e:	e00a      	b.n	8000fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f90:	f7ff fd30 	bl	80009f4 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e0b5      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1ee      	bne.n	8000f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d105      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a38      	ldr	r2, [pc, #224]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80a1 	beq.w	8001110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d05c      	beq.n	8001094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d141      	bne.n	8001066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_RCC_OscConfig+0x478>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fd04 	bl	80009f4 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff0:	f7ff fd00 	bl	80009f4 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e087      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	085b      	lsrs	r3, r3, #1
 8001026:	3b01      	subs	r3, #1
 8001028:	041b      	lsls	r3, r3, #16
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	061b      	lsls	r3, r3, #24
 8001032:	491b      	ldr	r1, [pc, #108]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_RCC_OscConfig+0x478>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fcd9 	bl	80009f4 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001046:	f7ff fcd5 	bl	80009f4 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e05c      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x416>
 8001064:	e054      	b.n	8001110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_RCC_OscConfig+0x478>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fcc2 	bl	80009f4 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001074:	f7ff fcbe 	bl	80009f4 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e045      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_RCC_OscConfig+0x470>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x444>
 8001092:	e03d      	b.n	8001110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d107      	bne.n	80010ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e038      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000
 80010a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_RCC_OscConfig+0x4ec>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d028      	beq.n	800110c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d121      	bne.n	800110c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d11a      	bne.n	800110c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010dc:	4013      	ands	r3, r2
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d111      	bne.n	800110c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f2:	085b      	lsrs	r3, r3, #1
 80010f4:	3b01      	subs	r3, #1
 80010f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d107      	bne.n	800110c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001108:	429a      	cmp	r2, r3
 800110a:	d001      	beq.n	8001110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0cc      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d90c      	bls.n	800115c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	4b65      	ldr	r3, [pc, #404]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d001      	beq.n	800115c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0b8      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800117e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	494d      	ldr	r1, [pc, #308]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d044      	beq.n	8001240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d119      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e07f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d003      	beq.n	80011de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e06f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e067      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fe:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f023 0203 	bic.w	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4934      	ldr	r1, [pc, #208]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	4313      	orrs	r3, r2
 800120e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001210:	f7ff fbf0 	bl	80009f4 <HAL_GetTick>
 8001214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	e00a      	b.n	800122e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001218:	f7ff fbec 	bl	80009f4 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	; 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e04f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 020c 	and.w	r2, r3, #12
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	429a      	cmp	r2, r3
 800123e:	d1eb      	bne.n	8001218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d20c      	bcs.n	8001268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e032      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4916      	ldr	r1, [pc, #88]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012a6:	f000 f821 	bl	80012ec <HAL_RCC_GetSysClockFreq>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	490a      	ldr	r1, [pc, #40]	; (80012e0 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_RCC_ClockConfig+0x1c8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb50 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00
 80012dc:	40023800 	.word	0x40023800
 80012e0:	08001f84 	.word	0x08001f84
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012f0:	b090      	sub	sp, #64	; 0x40
 80012f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
 80012f8:	2300      	movs	r3, #0
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001304:	4b59      	ldr	r3, [pc, #356]	; (800146c <HAL_RCC_GetSysClockFreq+0x180>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d00d      	beq.n	800132c <HAL_RCC_GetSysClockFreq+0x40>
 8001310:	2b08      	cmp	r3, #8
 8001312:	f200 80a1 	bhi.w	8001458 <HAL_RCC_GetSysClockFreq+0x16c>
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x34>
 800131a:	2b04      	cmp	r3, #4
 800131c:	d003      	beq.n	8001326 <HAL_RCC_GetSysClockFreq+0x3a>
 800131e:	e09b      	b.n	8001458 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_RCC_GetSysClockFreq+0x184>)
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001324:	e09b      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001326:	4b53      	ldr	r3, [pc, #332]	; (8001474 <HAL_RCC_GetSysClockFreq+0x188>)
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800132a:	e098      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800132c:	4b4f      	ldr	r3, [pc, #316]	; (800146c <HAL_RCC_GetSysClockFreq+0x180>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001336:	4b4d      	ldr	r3, [pc, #308]	; (800146c <HAL_RCC_GetSysClockFreq+0x180>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d028      	beq.n	8001394 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_RCC_GetSysClockFreq+0x180>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	099b      	lsrs	r3, r3, #6
 8001348:	2200      	movs	r2, #0
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	627a      	str	r2, [r7, #36]	; 0x24
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001354:	2100      	movs	r1, #0
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_RCC_GetSysClockFreq+0x188>)
 8001358:	fb03 f201 	mul.w	r2, r3, r1
 800135c:	2300      	movs	r3, #0
 800135e:	fb00 f303 	mul.w	r3, r0, r3
 8001362:	4413      	add	r3, r2
 8001364:	4a43      	ldr	r2, [pc, #268]	; (8001474 <HAL_RCC_GetSysClockFreq+0x188>)
 8001366:	fba0 1202 	umull	r1, r2, r0, r2
 800136a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800136c:	460a      	mov	r2, r1
 800136e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001372:	4413      	add	r3, r2
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001378:	2200      	movs	r2, #0
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	61fa      	str	r2, [r7, #28]
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001386:	f7fe ff1f 	bl	80001c8 <__aeabi_uldivmod>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4613      	mov	r3, r2
 8001390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001392:	e053      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001394:	4b35      	ldr	r3, [pc, #212]	; (800146c <HAL_RCC_GetSysClockFreq+0x180>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	2200      	movs	r2, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	617a      	str	r2, [r7, #20]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013a6:	f04f 0b00 	mov.w	fp, #0
 80013aa:	4652      	mov	r2, sl
 80013ac:	465b      	mov	r3, fp
 80013ae:	f04f 0000 	mov.w	r0, #0
 80013b2:	f04f 0100 	mov.w	r1, #0
 80013b6:	0159      	lsls	r1, r3, #5
 80013b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013bc:	0150      	lsls	r0, r2, #5
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	ebb2 080a 	subs.w	r8, r2, sl
 80013c6:	eb63 090b 	sbc.w	r9, r3, fp
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80013d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80013da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80013de:	ebb2 0408 	subs.w	r4, r2, r8
 80013e2:	eb63 0509 	sbc.w	r5, r3, r9
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	00eb      	lsls	r3, r5, #3
 80013f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013f4:	00e2      	lsls	r2, r4, #3
 80013f6:	4614      	mov	r4, r2
 80013f8:	461d      	mov	r5, r3
 80013fa:	eb14 030a 	adds.w	r3, r4, sl
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	eb45 030b 	adc.w	r3, r5, fp
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001412:	4629      	mov	r1, r5
 8001414:	028b      	lsls	r3, r1, #10
 8001416:	4621      	mov	r1, r4
 8001418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800141c:	4621      	mov	r1, r4
 800141e:	028a      	lsls	r2, r1, #10
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001426:	2200      	movs	r2, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	60fa      	str	r2, [r7, #12]
 800142c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001430:	f7fe feca 	bl	80001c8 <__aeabi_uldivmod>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4613      	mov	r3, r2
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_GetSysClockFreq+0x180>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	0c1b      	lsrs	r3, r3, #16
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	3301      	adds	r3, #1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800144c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001456:	e002      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetSysClockFreq+0x184>)
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800145c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800145e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001460:	4618      	mov	r0, r3
 8001462:	3740      	adds	r7, #64	; 0x40
 8001464:	46bd      	mov	sp, r7
 8001466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	00f42400 	.word	0x00f42400
 8001474:	017d7840 	.word	0x017d7840

08001478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e041      	b.n	800150e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff f996 	bl	80007d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3304      	adds	r3, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f000 fad0 	bl	8001a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b01      	cmp	r3, #1
 800152a:	d001      	beq.n	8001530 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e046      	b.n	80015be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a23      	ldr	r2, [pc, #140]	; (80015cc <HAL_TIM_Base_Start+0xb4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d022      	beq.n	8001588 <HAL_TIM_Base_Start+0x70>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800154a:	d01d      	beq.n	8001588 <HAL_TIM_Base_Start+0x70>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_TIM_Base_Start+0xb8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d018      	beq.n	8001588 <HAL_TIM_Base_Start+0x70>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_TIM_Base_Start+0xbc>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d013      	beq.n	8001588 <HAL_TIM_Base_Start+0x70>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_TIM_Base_Start+0xc0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00e      	beq.n	8001588 <HAL_TIM_Base_Start+0x70>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_TIM_Base_Start+0xc4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d009      	beq.n	8001588 <HAL_TIM_Base_Start+0x70>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_TIM_Base_Start+0xc8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d004      	beq.n	8001588 <HAL_TIM_Base_Start+0x70>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <HAL_TIM_Base_Start+0xcc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d111      	bne.n	80015ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b06      	cmp	r3, #6
 8001598:	d010      	beq.n	80015bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015aa:	e007      	b.n	80015bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40010000 	.word	0x40010000
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40000800 	.word	0x40000800
 80015d8:	40000c00 	.word	0x40000c00
 80015dc:	40010400 	.word	0x40010400
 80015e0:	40014000 	.word	0x40014000
 80015e4:	40001800 	.word	0x40001800

080015e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d122      	bne.n	8001644 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b02      	cmp	r3, #2
 800160a:	d11b      	bne.n	8001644 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0202 	mvn.w	r2, #2
 8001614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f9f7 	bl	8001a1e <HAL_TIM_IC_CaptureCallback>
 8001630:	e005      	b.n	800163e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f9e9 	bl	8001a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f9fa 	bl	8001a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b04      	cmp	r3, #4
 8001650:	d122      	bne.n	8001698 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b04      	cmp	r3, #4
 800165e:	d11b      	bne.n	8001698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0204 	mvn.w	r2, #4
 8001668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2202      	movs	r2, #2
 800166e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f9cd 	bl	8001a1e <HAL_TIM_IC_CaptureCallback>
 8001684:	e005      	b.n	8001692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f9bf 	bl	8001a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f9d0 	bl	8001a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d122      	bne.n	80016ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d11b      	bne.n	80016ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f06f 0208 	mvn.w	r2, #8
 80016bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2204      	movs	r2, #4
 80016c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f9a3 	bl	8001a1e <HAL_TIM_IC_CaptureCallback>
 80016d8:	e005      	b.n	80016e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f995 	bl	8001a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f9a6 	bl	8001a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d122      	bne.n	8001740 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b10      	cmp	r3, #16
 8001706:	d11b      	bne.n	8001740 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f06f 0210 	mvn.w	r2, #16
 8001710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2208      	movs	r2, #8
 8001716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f979 	bl	8001a1e <HAL_TIM_IC_CaptureCallback>
 800172c:	e005      	b.n	800173a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f96b 	bl	8001a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f97c 	bl	8001a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b01      	cmp	r3, #1
 800174c:	d10e      	bne.n	800176c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0201 	mvn.w	r2, #1
 8001764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe feb0 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	2b80      	cmp	r3, #128	; 0x80
 8001778:	d10e      	bne.n	8001798 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001784:	2b80      	cmp	r3, #128	; 0x80
 8001786:	d107      	bne.n	8001798 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fbb4 	bl	8001f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a2:	2b40      	cmp	r3, #64	; 0x40
 80017a4:	d10e      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b0:	2b40      	cmp	r3, #64	; 0x40
 80017b2:	d107      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f941 	bl	8001a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	d10e      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d107      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0220 	mvn.w	r2, #32
 80017e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fb7e 	bl	8001eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_TIM_ConfigClockSource+0x1c>
 8001810:	2302      	movs	r3, #2
 8001812:	e0b4      	b.n	800197e <HAL_TIM_ConfigClockSource+0x186>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800183a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800184c:	d03e      	beq.n	80018cc <HAL_TIM_ConfigClockSource+0xd4>
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001852:	f200 8087 	bhi.w	8001964 <HAL_TIM_ConfigClockSource+0x16c>
 8001856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800185a:	f000 8086 	beq.w	800196a <HAL_TIM_ConfigClockSource+0x172>
 800185e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001862:	d87f      	bhi.n	8001964 <HAL_TIM_ConfigClockSource+0x16c>
 8001864:	2b70      	cmp	r3, #112	; 0x70
 8001866:	d01a      	beq.n	800189e <HAL_TIM_ConfigClockSource+0xa6>
 8001868:	2b70      	cmp	r3, #112	; 0x70
 800186a:	d87b      	bhi.n	8001964 <HAL_TIM_ConfigClockSource+0x16c>
 800186c:	2b60      	cmp	r3, #96	; 0x60
 800186e:	d050      	beq.n	8001912 <HAL_TIM_ConfigClockSource+0x11a>
 8001870:	2b60      	cmp	r3, #96	; 0x60
 8001872:	d877      	bhi.n	8001964 <HAL_TIM_ConfigClockSource+0x16c>
 8001874:	2b50      	cmp	r3, #80	; 0x50
 8001876:	d03c      	beq.n	80018f2 <HAL_TIM_ConfigClockSource+0xfa>
 8001878:	2b50      	cmp	r3, #80	; 0x50
 800187a:	d873      	bhi.n	8001964 <HAL_TIM_ConfigClockSource+0x16c>
 800187c:	2b40      	cmp	r3, #64	; 0x40
 800187e:	d058      	beq.n	8001932 <HAL_TIM_ConfigClockSource+0x13a>
 8001880:	2b40      	cmp	r3, #64	; 0x40
 8001882:	d86f      	bhi.n	8001964 <HAL_TIM_ConfigClockSource+0x16c>
 8001884:	2b30      	cmp	r3, #48	; 0x30
 8001886:	d064      	beq.n	8001952 <HAL_TIM_ConfigClockSource+0x15a>
 8001888:	2b30      	cmp	r3, #48	; 0x30
 800188a:	d86b      	bhi.n	8001964 <HAL_TIM_ConfigClockSource+0x16c>
 800188c:	2b20      	cmp	r3, #32
 800188e:	d060      	beq.n	8001952 <HAL_TIM_ConfigClockSource+0x15a>
 8001890:	2b20      	cmp	r3, #32
 8001892:	d867      	bhi.n	8001964 <HAL_TIM_ConfigClockSource+0x16c>
 8001894:	2b00      	cmp	r3, #0
 8001896:	d05c      	beq.n	8001952 <HAL_TIM_ConfigClockSource+0x15a>
 8001898:	2b10      	cmp	r3, #16
 800189a:	d05a      	beq.n	8001952 <HAL_TIM_ConfigClockSource+0x15a>
 800189c:	e062      	b.n	8001964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6899      	ldr	r1, [r3, #8]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f000 fa80 	bl	8001db2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80018c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	609a      	str	r2, [r3, #8]
      break;
 80018ca:	e04f      	b.n	800196c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6899      	ldr	r1, [r3, #8]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f000 fa69 	bl	8001db2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018ee:	609a      	str	r2, [r3, #8]
      break;
 80018f0:	e03c      	b.n	800196c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6859      	ldr	r1, [r3, #4]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	461a      	mov	r2, r3
 8001900:	f000 f9dd 	bl	8001cbe <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2150      	movs	r1, #80	; 0x50
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fa36 	bl	8001d7c <TIM_ITRx_SetConfig>
      break;
 8001910:	e02c      	b.n	800196c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6859      	ldr	r1, [r3, #4]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	461a      	mov	r2, r3
 8001920:	f000 f9fc 	bl	8001d1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2160      	movs	r1, #96	; 0x60
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fa26 	bl	8001d7c <TIM_ITRx_SetConfig>
      break;
 8001930:	e01c      	b.n	800196c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	461a      	mov	r2, r3
 8001940:	f000 f9bd 	bl	8001cbe <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2140      	movs	r1, #64	; 0x40
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fa16 	bl	8001d7c <TIM_ITRx_SetConfig>
      break;
 8001950:	e00c      	b.n	800196c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f000 fa0d 	bl	8001d7c <TIM_ITRx_SetConfig>
      break;
 8001962:	e003      	b.n	800196c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
      break;
 8001968:	e000      	b.n	800196c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800196a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_TIM_SlaveConfigSynchro+0x18>
 800199a:	2302      	movs	r3, #2
 800199c:	e031      	b.n	8001a02 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2202      	movs	r2, #2
 80019aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f8f3 	bl	8001b9c <TIM_SlaveTimer_SetConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e018      	b.n	8001a02 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a40      	ldr	r2, [pc, #256]	; (8001b70 <TIM_Base_SetConfig+0x114>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d013      	beq.n	8001a9c <TIM_Base_SetConfig+0x40>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7a:	d00f      	beq.n	8001a9c <TIM_Base_SetConfig+0x40>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3d      	ldr	r2, [pc, #244]	; (8001b74 <TIM_Base_SetConfig+0x118>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00b      	beq.n	8001a9c <TIM_Base_SetConfig+0x40>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3c      	ldr	r2, [pc, #240]	; (8001b78 <TIM_Base_SetConfig+0x11c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <TIM_Base_SetConfig+0x40>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3b      	ldr	r2, [pc, #236]	; (8001b7c <TIM_Base_SetConfig+0x120>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d003      	beq.n	8001a9c <TIM_Base_SetConfig+0x40>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a3a      	ldr	r2, [pc, #232]	; (8001b80 <TIM_Base_SetConfig+0x124>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d108      	bne.n	8001aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <TIM_Base_SetConfig+0x114>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02b      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abc:	d027      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <TIM_Base_SetConfig+0x118>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d023      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <TIM_Base_SetConfig+0x11c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d01f      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <TIM_Base_SetConfig+0x120>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01b      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <TIM_Base_SetConfig+0x124>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d017      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <TIM_Base_SetConfig+0x128>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <TIM_Base_SetConfig+0x12c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00f      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <TIM_Base_SetConfig+0x130>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00b      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a25      	ldr	r2, [pc, #148]	; (8001b90 <TIM_Base_SetConfig+0x134>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a24      	ldr	r2, [pc, #144]	; (8001b94 <TIM_Base_SetConfig+0x138>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d003      	beq.n	8001b0e <TIM_Base_SetConfig+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <TIM_Base_SetConfig+0x13c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d108      	bne.n	8001b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <TIM_Base_SetConfig+0x114>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d003      	beq.n	8001b54 <TIM_Base_SetConfig+0xf8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <TIM_Base_SetConfig+0x124>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d103      	bne.n	8001b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	615a      	str	r2, [r3, #20]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40000400 	.word	0x40000400
 8001b78:	40000800 	.word	0x40000800
 8001b7c:	40000c00 	.word	0x40000c00
 8001b80:	40010400 	.word	0x40010400
 8001b84:	40014000 	.word	0x40014000
 8001b88:	40014400 	.word	0x40014400
 8001b8c:	40014800 	.word	0x40014800
 8001b90:	40001800 	.word	0x40001800
 8001b94:	40001c00 	.word	0x40001c00
 8001b98:	40002000 	.word	0x40002000

08001b9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f023 0307 	bic.w	r3, r3, #7
 8001bca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b70      	cmp	r3, #112	; 0x70
 8001be4:	d01a      	beq.n	8001c1c <TIM_SlaveTimer_SetConfig+0x80>
 8001be6:	2b70      	cmp	r3, #112	; 0x70
 8001be8:	d860      	bhi.n	8001cac <TIM_SlaveTimer_SetConfig+0x110>
 8001bea:	2b60      	cmp	r3, #96	; 0x60
 8001bec:	d054      	beq.n	8001c98 <TIM_SlaveTimer_SetConfig+0xfc>
 8001bee:	2b60      	cmp	r3, #96	; 0x60
 8001bf0:	d85c      	bhi.n	8001cac <TIM_SlaveTimer_SetConfig+0x110>
 8001bf2:	2b50      	cmp	r3, #80	; 0x50
 8001bf4:	d046      	beq.n	8001c84 <TIM_SlaveTimer_SetConfig+0xe8>
 8001bf6:	2b50      	cmp	r3, #80	; 0x50
 8001bf8:	d858      	bhi.n	8001cac <TIM_SlaveTimer_SetConfig+0x110>
 8001bfa:	2b40      	cmp	r3, #64	; 0x40
 8001bfc:	d019      	beq.n	8001c32 <TIM_SlaveTimer_SetConfig+0x96>
 8001bfe:	2b40      	cmp	r3, #64	; 0x40
 8001c00:	d854      	bhi.n	8001cac <TIM_SlaveTimer_SetConfig+0x110>
 8001c02:	2b30      	cmp	r3, #48	; 0x30
 8001c04:	d055      	beq.n	8001cb2 <TIM_SlaveTimer_SetConfig+0x116>
 8001c06:	2b30      	cmp	r3, #48	; 0x30
 8001c08:	d850      	bhi.n	8001cac <TIM_SlaveTimer_SetConfig+0x110>
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d051      	beq.n	8001cb2 <TIM_SlaveTimer_SetConfig+0x116>
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d84c      	bhi.n	8001cac <TIM_SlaveTimer_SetConfig+0x110>
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d04d      	beq.n	8001cb2 <TIM_SlaveTimer_SetConfig+0x116>
 8001c16:	2b10      	cmp	r3, #16
 8001c18:	d04b      	beq.n	8001cb2 <TIM_SlaveTimer_SetConfig+0x116>
 8001c1a:	e047      	b.n	8001cac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68d9      	ldr	r1, [r3, #12]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f000 f8c1 	bl	8001db2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8001c30:	e040      	b.n	8001cb4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d101      	bne.n	8001c3e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e03b      	b.n	8001cb6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6a1a      	ldr	r2, [r3, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c64:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	621a      	str	r2, [r3, #32]
      break;
 8001c82:	e017      	b.n	8001cb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6899      	ldr	r1, [r3, #8]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	461a      	mov	r2, r3
 8001c92:	f000 f814 	bl	8001cbe <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001c96:	e00d      	b.n	8001cb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f000 f839 	bl	8001d1c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001caa:	e003      	b.n	8001cb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	75fb      	strb	r3, [r7, #23]
      break;
 8001cb0:	e000      	b.n	8001cb4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8001cb2:	bf00      	nop
  }

  return status;
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b087      	sub	sp, #28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f023 0201 	bic.w	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f023 030a 	bic.w	r3, r3, #10
 8001cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	621a      	str	r2, [r3, #32]
}
 8001d10:	bf00      	nop
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f023 0210 	bic.w	r2, r3, #16
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	031b      	lsls	r3, r3, #12
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	621a      	str	r2, [r3, #32]
}
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f043 0307 	orr.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	609a      	str	r2, [r3, #8]
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b087      	sub	sp, #28
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	021a      	lsls	r2, r3, #8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	609a      	str	r2, [r3, #8]
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e05a      	b.n	8001ec2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d022      	beq.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e58:	d01d      	beq.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d018      	beq.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1a      	ldr	r2, [pc, #104]	; (8001edc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00e      	beq.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d009      	beq.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d004      	beq.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10c      	bne.n	8001eb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	40000800 	.word	0x40000800
 8001edc:	40000c00 	.word	0x40000c00
 8001ee0:	40010400 	.word	0x40010400
 8001ee4:	40014000 	.word	0x40014000
 8001ee8:	40001800 	.word	0x40001800

08001eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <__libc_init_array>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	4d0d      	ldr	r5, [pc, #52]	; (8001f4c <__libc_init_array+0x38>)
 8001f18:	4c0d      	ldr	r4, [pc, #52]	; (8001f50 <__libc_init_array+0x3c>)
 8001f1a:	1b64      	subs	r4, r4, r5
 8001f1c:	10a4      	asrs	r4, r4, #2
 8001f1e:	2600      	movs	r6, #0
 8001f20:	42a6      	cmp	r6, r4
 8001f22:	d109      	bne.n	8001f38 <__libc_init_array+0x24>
 8001f24:	4d0b      	ldr	r5, [pc, #44]	; (8001f54 <__libc_init_array+0x40>)
 8001f26:	4c0c      	ldr	r4, [pc, #48]	; (8001f58 <__libc_init_array+0x44>)
 8001f28:	f000 f820 	bl	8001f6c <_init>
 8001f2c:	1b64      	subs	r4, r4, r5
 8001f2e:	10a4      	asrs	r4, r4, #2
 8001f30:	2600      	movs	r6, #0
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d105      	bne.n	8001f42 <__libc_init_array+0x2e>
 8001f36:	bd70      	pop	{r4, r5, r6, pc}
 8001f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f3c:	4798      	blx	r3
 8001f3e:	3601      	adds	r6, #1
 8001f40:	e7ee      	b.n	8001f20 <__libc_init_array+0xc>
 8001f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f46:	4798      	blx	r3
 8001f48:	3601      	adds	r6, #1
 8001f4a:	e7f2      	b.n	8001f32 <__libc_init_array+0x1e>
 8001f4c:	08001f9c 	.word	0x08001f9c
 8001f50:	08001f9c 	.word	0x08001f9c
 8001f54:	08001f9c 	.word	0x08001f9c
 8001f58:	08001fa0 	.word	0x08001fa0

08001f5c <memset>:
 8001f5c:	4402      	add	r2, r0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d100      	bne.n	8001f66 <memset+0xa>
 8001f64:	4770      	bx	lr
 8001f66:	f803 1b01 	strb.w	r1, [r3], #1
 8001f6a:	e7f9      	b.n	8001f60 <memset+0x4>

08001f6c <_init>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	bf00      	nop
 8001f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f72:	bc08      	pop	{r3}
 8001f74:	469e      	mov	lr, r3
 8001f76:	4770      	bx	lr

08001f78 <_fini>:
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	bf00      	nop
 8001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7e:	bc08      	pop	{r3}
 8001f80:	469e      	mov	lr, r3
 8001f82:	4770      	bx	lr
