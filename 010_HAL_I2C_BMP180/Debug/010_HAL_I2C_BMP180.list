
010_HAL_I2C_BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003570  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000c8  200000c8  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000073c5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001237  00000000  00000000  00027401  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006e0  00000000  00000000  00028638  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000660  00000000  00000000  00028d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000036e0  00000000  00000000  00029378  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002458  00000000  00000000  0002ca58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002eeb0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c9c  00000000  00000000  0002ef2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036e0 	.word	0x080036e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036e0 	.word	0x080036e0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b97a 	b.w	8000cb8 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	468c      	mov	ip, r1
 80009e2:	460d      	mov	r5, r1
 80009e4:	4604      	mov	r4, r0
 80009e6:	9e08      	ldr	r6, [sp, #32]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d151      	bne.n	8000a90 <__udivmoddi4+0xb4>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d96d      	bls.n	8000ace <__udivmoddi4+0xf2>
 80009f2:	fab2 fe82 	clz	lr, r2
 80009f6:	f1be 0f00 	cmp.w	lr, #0
 80009fa:	d00b      	beq.n	8000a14 <__udivmoddi4+0x38>
 80009fc:	f1ce 0c20 	rsb	ip, lr, #32
 8000a00:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a08:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a0c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a10:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a14:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a18:	0c25      	lsrs	r5, r4, #16
 8000a1a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a1e:	fa1f f987 	uxth.w	r9, r7
 8000a22:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a26:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a2a:	fb08 f309 	mul.w	r3, r8, r9
 8000a2e:	42ab      	cmp	r3, r5
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x6c>
 8000a32:	19ed      	adds	r5, r5, r7
 8000a34:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a38:	f080 8123 	bcs.w	8000c82 <__udivmoddi4+0x2a6>
 8000a3c:	42ab      	cmp	r3, r5
 8000a3e:	f240 8120 	bls.w	8000c82 <__udivmoddi4+0x2a6>
 8000a42:	f1a8 0802 	sub.w	r8, r8, #2
 8000a46:	443d      	add	r5, r7
 8000a48:	1aed      	subs	r5, r5, r3
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a50:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a58:	fb00 f909 	mul.w	r9, r0, r9
 8000a5c:	45a1      	cmp	r9, r4
 8000a5e:	d909      	bls.n	8000a74 <__udivmoddi4+0x98>
 8000a60:	19e4      	adds	r4, r4, r7
 8000a62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a66:	f080 810a 	bcs.w	8000c7e <__udivmoddi4+0x2a2>
 8000a6a:	45a1      	cmp	r9, r4
 8000a6c:	f240 8107 	bls.w	8000c7e <__udivmoddi4+0x2a2>
 8000a70:	3802      	subs	r0, #2
 8000a72:	443c      	add	r4, r7
 8000a74:	eba4 0409 	sub.w	r4, r4, r9
 8000a78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d061      	beq.n	8000b46 <__udivmoddi4+0x16a>
 8000a82:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a86:	2300      	movs	r3, #0
 8000a88:	6034      	str	r4, [r6, #0]
 8000a8a:	6073      	str	r3, [r6, #4]
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d907      	bls.n	8000aa4 <__udivmoddi4+0xc8>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d054      	beq.n	8000b42 <__udivmoddi4+0x166>
 8000a98:	2100      	movs	r1, #0
 8000a9a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	fab3 f183 	clz	r1, r3
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	f040 808e 	bne.w	8000bca <__udivmoddi4+0x1ee>
 8000aae:	42ab      	cmp	r3, r5
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xdc>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80fa 	bhi.w	8000cac <__udivmoddi4+0x2d0>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb65 0503 	sbc.w	r5, r5, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	46ac      	mov	ip, r5
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d03f      	beq.n	8000b46 <__udivmoddi4+0x16a>
 8000ac6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	b912      	cbnz	r2, 8000ad6 <__udivmoddi4+0xfa>
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ad6:	fab7 fe87 	clz	lr, r7
 8000ada:	f1be 0f00 	cmp.w	lr, #0
 8000ade:	d134      	bne.n	8000b4a <__udivmoddi4+0x16e>
 8000ae0:	1beb      	subs	r3, r5, r7
 8000ae2:	0c3a      	lsrs	r2, r7, #16
 8000ae4:	fa1f fc87 	uxth.w	ip, r7
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fbb3 f8f2 	udiv	r8, r3, r2
 8000aee:	0c25      	lsrs	r5, r4, #16
 8000af0:	fb02 3318 	mls	r3, r2, r8, r3
 8000af4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000af8:	fb0c f308 	mul.w	r3, ip, r8
 8000afc:	42ab      	cmp	r3, r5
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x134>
 8000b00:	19ed      	adds	r5, r5, r7
 8000b02:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x132>
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	f200 80d1 	bhi.w	8000cb0 <__udivmoddi4+0x2d4>
 8000b0e:	4680      	mov	r8, r0
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	b2a3      	uxth	r3, r4
 8000b14:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b18:	fb02 5510 	mls	r5, r2, r0, r5
 8000b1c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b20:	fb0c fc00 	mul.w	ip, ip, r0
 8000b24:	45a4      	cmp	ip, r4
 8000b26:	d907      	bls.n	8000b38 <__udivmoddi4+0x15c>
 8000b28:	19e4      	adds	r4, r4, r7
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x15a>
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	f200 80b8 	bhi.w	8000ca6 <__udivmoddi4+0x2ca>
 8000b36:	4618      	mov	r0, r3
 8000b38:	eba4 040c 	sub.w	r4, r4, ip
 8000b3c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b40:	e79d      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000b42:	4631      	mov	r1, r6
 8000b44:	4630      	mov	r0, r6
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	f1ce 0420 	rsb	r4, lr, #32
 8000b4e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b52:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b56:	fa20 f804 	lsr.w	r8, r0, r4
 8000b5a:	0c3a      	lsrs	r2, r7, #16
 8000b5c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b60:	ea48 0803 	orr.w	r8, r8, r3
 8000b64:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b68:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b6c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b70:	fa1f fc87 	uxth.w	ip, r7
 8000b74:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b78:	fb01 f30c 	mul.w	r3, r1, ip
 8000b7c:	42ab      	cmp	r3, r5
 8000b7e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x1bc>
 8000b84:	19ed      	adds	r5, r5, r7
 8000b86:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b8a:	f080 808a 	bcs.w	8000ca2 <__udivmoddi4+0x2c6>
 8000b8e:	42ab      	cmp	r3, r5
 8000b90:	f240 8087 	bls.w	8000ca2 <__udivmoddi4+0x2c6>
 8000b94:	3902      	subs	r1, #2
 8000b96:	443d      	add	r5, r7
 8000b98:	1aeb      	subs	r3, r5, r3
 8000b9a:	fa1f f588 	uxth.w	r5, r8
 8000b9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ba2:	fb02 3310 	mls	r3, r2, r0, r3
 8000ba6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000baa:	fb00 f30c 	mul.w	r3, r0, ip
 8000bae:	42ab      	cmp	r3, r5
 8000bb0:	d907      	bls.n	8000bc2 <__udivmoddi4+0x1e6>
 8000bb2:	19ed      	adds	r5, r5, r7
 8000bb4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bb8:	d26f      	bcs.n	8000c9a <__udivmoddi4+0x2be>
 8000bba:	42ab      	cmp	r3, r5
 8000bbc:	d96d      	bls.n	8000c9a <__udivmoddi4+0x2be>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	443d      	add	r5, r7
 8000bc2:	1aeb      	subs	r3, r5, r3
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	e78f      	b.n	8000aea <__udivmoddi4+0x10e>
 8000bca:	f1c1 0720 	rsb	r7, r1, #32
 8000bce:	fa22 f807 	lsr.w	r8, r2, r7
 8000bd2:	408b      	lsls	r3, r1
 8000bd4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bd8:	ea48 0303 	orr.w	r3, r8, r3
 8000bdc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000be0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bea:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bee:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000bf2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000bf6:	fa1f f883 	uxth.w	r8, r3
 8000bfa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bfe:	fb09 f408 	mul.w	r4, r9, r8
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	fa02 f201 	lsl.w	r2, r2, r1
 8000c08:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x244>
 8000c0e:	18ed      	adds	r5, r5, r3
 8000c10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c14:	d243      	bcs.n	8000c9e <__udivmoddi4+0x2c2>
 8000c16:	42ac      	cmp	r4, r5
 8000c18:	d941      	bls.n	8000c9e <__udivmoddi4+0x2c2>
 8000c1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1e:	441d      	add	r5, r3
 8000c20:	1b2d      	subs	r5, r5, r4
 8000c22:	fa1f fe8e 	uxth.w	lr, lr
 8000c26:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c2a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c2e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c32:	fb00 f808 	mul.w	r8, r0, r8
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x26e>
 8000c3a:	18e4      	adds	r4, r4, r3
 8000c3c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c40:	d229      	bcs.n	8000c96 <__udivmoddi4+0x2ba>
 8000c42:	45a0      	cmp	r8, r4
 8000c44:	d927      	bls.n	8000c96 <__udivmoddi4+0x2ba>
 8000c46:	3802      	subs	r0, #2
 8000c48:	441c      	add	r4, r3
 8000c4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4e:	eba4 0408 	sub.w	r4, r4, r8
 8000c52:	fba0 8902 	umull	r8, r9, r0, r2
 8000c56:	454c      	cmp	r4, r9
 8000c58:	46c6      	mov	lr, r8
 8000c5a:	464d      	mov	r5, r9
 8000c5c:	d315      	bcc.n	8000c8a <__udivmoddi4+0x2ae>
 8000c5e:	d012      	beq.n	8000c86 <__udivmoddi4+0x2aa>
 8000c60:	b156      	cbz	r6, 8000c78 <__udivmoddi4+0x29c>
 8000c62:	ebba 030e 	subs.w	r3, sl, lr
 8000c66:	eb64 0405 	sbc.w	r4, r4, r5
 8000c6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c6e:	40cb      	lsrs	r3, r1
 8000c70:	431f      	orrs	r7, r3
 8000c72:	40cc      	lsrs	r4, r1
 8000c74:	6037      	str	r7, [r6, #0]
 8000c76:	6074      	str	r4, [r6, #4]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e6f8      	b.n	8000a74 <__udivmoddi4+0x98>
 8000c82:	4690      	mov	r8, r2
 8000c84:	e6e0      	b.n	8000a48 <__udivmoddi4+0x6c>
 8000c86:	45c2      	cmp	sl, r8
 8000c88:	d2ea      	bcs.n	8000c60 <__udivmoddi4+0x284>
 8000c8a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c8e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c92:	3801      	subs	r0, #1
 8000c94:	e7e4      	b.n	8000c60 <__udivmoddi4+0x284>
 8000c96:	4628      	mov	r0, r5
 8000c98:	e7d7      	b.n	8000c4a <__udivmoddi4+0x26e>
 8000c9a:	4640      	mov	r0, r8
 8000c9c:	e791      	b.n	8000bc2 <__udivmoddi4+0x1e6>
 8000c9e:	4681      	mov	r9, r0
 8000ca0:	e7be      	b.n	8000c20 <__udivmoddi4+0x244>
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	e778      	b.n	8000b98 <__udivmoddi4+0x1bc>
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	e745      	b.n	8000b38 <__udivmoddi4+0x15c>
 8000cac:	4608      	mov	r0, r1
 8000cae:	e708      	b.n	8000ac2 <__udivmoddi4+0xe6>
 8000cb0:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb4:	443d      	add	r5, r7
 8000cb6:	e72b      	b.n	8000b10 <__udivmoddi4+0x134>

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <BMP180_Init>:

#include "BMP180_HAL.h"
#define BMP180_CALIBRATION_START_ADDRESS 0xAA

void BMP180_Init()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
if(HAL_I2C_IsDeviceReady(&hi2c2, BMP180_WRITE_ADDRESS, 1, 100)==HAL_OK)
 8000cc0:	2364      	movs	r3, #100	; 0x64
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	21ee      	movs	r1, #238	; 0xee
 8000cc6:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <BMP180_Init+0x2c>)
 8000cc8:	f001 fbf8 	bl	80024bc <HAL_I2C_IsDeviceReady>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d105      	bne.n	8000cde <BMP180_Init+0x22>
{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, ENABLE);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <BMP180_Init+0x30>)
 8000cda:	f000 ff7d 	bl	8001bd8 <HAL_GPIO_WritePin>
}
BMP180_Calibrate();
 8000cde:	f000 f807 	bl	8000cf0 <BMP180_Calibrate>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000070 	.word	0x20000070
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <BMP180_Calibrate>:

int16_t AC1, AC2, AC3, B1, B2, MB, MC, MD;
uint16_t AC4, AC5, AC6;

void BMP180_Calibrate()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, BMP180_READ_ADDRESS, BMP180_CALIBRATION_START_ADDRESS, 1, calib_buff, 22, 30);
 8000cf6:	231e      	movs	r3, #30
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	2316      	movs	r3, #22
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	4b4e      	ldr	r3, [pc, #312]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2301      	movs	r3, #1
 8000d04:	22aa      	movs	r2, #170	; 0xaa
 8000d06:	21ef      	movs	r1, #239	; 0xef
 8000d08:	484c      	ldr	r0, [pc, #304]	; (8000e3c <BMP180_Calibrate+0x14c>)
 8000d0a:	f001 f9b1 	bl	8002070 <HAL_I2C_Mem_Read>

	AC1=(int16_t)((calib_buff[0]<<8)|calib_buff[1]);
 8000d0e:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d10:	f993 3000 	ldrsb.w	r3, [r3]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <BMP180_Calibrate+0x150>)
 8000d26:	801a      	strh	r2, [r3, #0]
	AC2=(int16_t)((calib_buff[2]<<8)|calib_buff[3]);
 8000d28:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d2a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d34:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21a      	sxth	r2, r3
 8000d3e:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <BMP180_Calibrate+0x154>)
 8000d40:	801a      	strh	r2, [r3, #0]
	AC3=(int16_t)((calib_buff[4]<<8)|calib_buff[5]);
 8000d42:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d4e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <BMP180_Calibrate+0x158>)
 8000d5a:	801a      	strh	r2, [r3, #0]
	AC4=(uint16_t)((calib_buff[6]<<8)|calib_buff[7]);
 8000d5c:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d5e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	b21a      	sxth	r2, r3
 8000d66:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d68:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <BMP180_Calibrate+0x15c>)
 8000d76:	801a      	strh	r2, [r3, #0]
	AC5=(uint16_t)((calib_buff[8]<<8)|calib_buff[9]);
 8000d78:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d7a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d84:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <BMP180_Calibrate+0x160>)
 8000d92:	801a      	strh	r2, [r3, #0]
	AC6=(uint16_t)((calib_buff[10]<<8)|calib_buff[11]);
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000d96:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000da0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <BMP180_Calibrate+0x164>)
 8000dae:	801a      	strh	r2, [r3, #0]
	B1=(int16_t)((calib_buff[12]<<8)|calib_buff[13]);
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000db2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000dbc:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b21a      	sxth	r2, r3
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <BMP180_Calibrate+0x168>)
 8000dc8:	801a      	strh	r2, [r3, #0]
	B2=(int16_t)((calib_buff[14]<<8)|calib_buff[15]);
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000dcc:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000dd6:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <BMP180_Calibrate+0x16c>)
 8000de2:	801a      	strh	r2, [r3, #0]
	MB=(int16_t)((calib_buff[16]<<8)|calib_buff[17]);
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000de6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000df0:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <BMP180_Calibrate+0x170>)
 8000dfc:	801a      	strh	r2, [r3, #0]
	MC=(int16_t)((calib_buff[18]<<8)|calib_buff[19]);
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000e00:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000e0a:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <BMP180_Calibrate+0x174>)
 8000e16:	801a      	strh	r2, [r3, #0]
	MD=(int16_t)((calib_buff[20]<<8)|calib_buff[21]);
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000e1a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <BMP180_Calibrate+0x148>)
 8000e24:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <BMP180_Calibrate+0x178>)
 8000e30:	801a      	strh	r2, [r3, #0]
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000003c 	.word	0x2000003c
 8000e3c:	20000070 	.word	0x20000070
 8000e40:	2000002e 	.word	0x2000002e
 8000e44:	2000005a 	.word	0x2000005a
 8000e48:	2000005c 	.word	0x2000005c
 8000e4c:	20000054 	.word	0x20000054
 8000e50:	20000038 	.word	0x20000038
 8000e54:	20000030 	.word	0x20000030
 8000e58:	20000066 	.word	0x20000066
 8000e5c:	2000005e 	.word	0x2000005e
 8000e60:	20000056 	.word	0x20000056
 8000e64:	2000006a 	.word	0x2000006a
 8000e68:	2000002c 	.word	0x2000002c

08000e6c <BMP180_True_Temperature>:

int16_t X1, X2,X3, B5,B6,B3;
uint16_t B4,B7;
int16_t UT;
int16_t BMP180_True_Temperature()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af04      	add	r7, sp, #16
	uint8_t uncompensated_tmp_address[1];
	uint8_t UT_Da[2];
	uncompensated_tmp_address[0] = 0x2E;
 8000e72:	232e      	movs	r3, #46	; 0x2e
 8000e74:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, BMP180_WRITE_ADDRESS, 0xF4, 1, uncompensated_tmp_address, 1, 100000);
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <BMP180_True_Temperature+0xe0>)
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	22f4      	movs	r2, #244	; 0xf4
 8000e86:	21ee      	movs	r1, #238	; 0xee
 8000e88:	4831      	ldr	r0, [pc, #196]	; (8000f50 <BMP180_True_Temperature+0xe4>)
 8000e8a:	f000 fff7 	bl	8001e7c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000e8e:	2005      	movs	r0, #5
 8000e90:	f000 fc02 	bl	8001698 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c2, BMP180_READ_ADDRESS, 0xF6, 1, UT_Da, 2, 100000);
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <BMP180_True_Temperature+0xe0>)
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2302      	movs	r3, #2
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	22f6      	movs	r2, #246	; 0xf6
 8000ea4:	21ef      	movs	r1, #239	; 0xef
 8000ea6:	482a      	ldr	r0, [pc, #168]	; (8000f50 <BMP180_True_Temperature+0xe4>)
 8000ea8:	f001 f8e2 	bl	8002070 <HAL_I2C_Mem_Read>
	HAL_Delay(5);
 8000eac:	2005      	movs	r0, #5
 8000eae:	f000 fbf3 	bl	8001698 <HAL_Delay>


	UT= (int16_t)((UT_Da[0]<<8) | UT_Da[1]);
 8000eb2:	783b      	ldrb	r3, [r7, #0]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <BMP180_True_Temperature+0xe8>)
 8000ec2:	801a      	strh	r2, [r3, #0]

	X1 = (( (int16_t)UT-(int16_t)AC6 )*(int16_t)AC5)/32768;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <BMP180_True_Temperature+0xe8>)
 8000ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <BMP180_True_Temperature+0xec>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <BMP180_True_Temperature+0xf0>)
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	b212      	sxth	r2, r2
 8000eda:	fb02 f303 	mul.w	r3, r2, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da02      	bge.n	8000ee8 <BMP180_True_Temperature+0x7c>
 8000ee2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000ee6:	337f      	adds	r3, #127	; 0x7f
 8000ee8:	13db      	asrs	r3, r3, #15
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <BMP180_True_Temperature+0xf4>)
 8000eee:	801a      	strh	r2, [r3, #0]

	X2 = ((int16_t)MC*2048)/(X1+(int32_t)MD);
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <BMP180_True_Temperature+0xf8>)
 8000ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef6:	02da      	lsls	r2, r3, #11
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <BMP180_True_Temperature+0xf4>)
 8000efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <BMP180_True_Temperature+0xfc>)
 8000f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f06:	440b      	add	r3, r1
 8000f08:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <BMP180_True_Temperature+0x100>)
 8000f10:	801a      	strh	r2, [r3, #0]
	B5 = X1+X2;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <BMP180_True_Temperature+0xf4>)
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <BMP180_True_Temperature+0x100>)
 8000f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <BMP180_True_Temperature+0x104>)
 8000f2a:	801a      	strh	r2, [r3, #0]
	return ((B5+8)/16/10);
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <BMP180_True_Temperature+0x104>)
 8000f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f32:	3308      	adds	r3, #8
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <BMP180_True_Temperature+0x108>)
 8000f36:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3a:	1192      	asrs	r2, r2, #6
 8000f3c:	17db      	asrs	r3, r3, #31
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	b21b      	sxth	r3, r3
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	000186a0 	.word	0x000186a0
 8000f50:	20000070 	.word	0x20000070
 8000f54:	20000034 	.word	0x20000034
 8000f58:	20000030 	.word	0x20000030
 8000f5c:	20000038 	.word	0x20000038
 8000f60:	20000058 	.word	0x20000058
 8000f64:	2000006a 	.word	0x2000006a
 8000f68:	2000002c 	.word	0x2000002c
 8000f6c:	20000036 	.word	0x20000036
 8000f70:	20000052 	.word	0x20000052
 8000f74:	66666667 	.word	0x66666667

08000f78 <BMP180_True_Pressure>:

int16_t UP;

int16_t BMP180_True_Pressure()
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af04      	add	r7, sp, #16
	int16_t p;
	uint8_t uncompensated_prs_address[1];
	uint8_t UT_Da[3];
	uncompensated_prs_address[0] = 0x34|(3<<6);
 8000f7e:	23f4      	movs	r3, #244	; 0xf4
 8000f80:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, BMP180_WRITE_ADDRESS, 0xF4, 1, uncompensated_prs_address, 1, 100000);
 8000f82:	4ba9      	ldr	r3, [pc, #676]	; (8001228 <BMP180_True_Pressure+0x2b0>)
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2301      	movs	r3, #1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	22f4      	movs	r2, #244	; 0xf4
 8000f92:	21ee      	movs	r1, #238	; 0xee
 8000f94:	48a5      	ldr	r0, [pc, #660]	; (800122c <BMP180_True_Pressure+0x2b4>)
 8000f96:	f000 ff71 	bl	8001e7c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000f9a:	2005      	movs	r0, #5
 8000f9c:	f000 fb7c 	bl	8001698 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c2, BMP180_READ_ADDRESS, 0xF6, 1, UT_Da, 3, 100000);
 8000fa0:	4ba1      	ldr	r3, [pc, #644]	; (8001228 <BMP180_True_Pressure+0x2b0>)
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	463b      	mov	r3, r7
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	22f6      	movs	r2, #246	; 0xf6
 8000fb0:	21ef      	movs	r1, #239	; 0xef
 8000fb2:	489e      	ldr	r0, [pc, #632]	; (800122c <BMP180_True_Pressure+0x2b4>)
 8000fb4:	f001 f85c 	bl	8002070 <HAL_I2C_Mem_Read>
	HAL_Delay(5);
 8000fb8:	2005      	movs	r0, #5
 8000fba:	f000 fb6d 	bl	8001698 <HAL_Delay>


	UP= (int16_t)(((UT_Da[0]<<16) | (UT_Da[1]<<8)|UT_Da[2])>>5);
 8000fbe:	783b      	ldrb	r3, [r7, #0]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	787b      	ldrb	r3, [r7, #1]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	78ba      	ldrb	r2, [r7, #2]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	115b      	asrs	r3, r3, #5
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b97      	ldr	r3, [pc, #604]	; (8001230 <BMP180_True_Pressure+0x2b8>)
 8000fd2:	801a      	strh	r2, [r3, #0]
	B6=B5-4000;
 8000fd4:	4b97      	ldr	r3, [pc, #604]	; (8001234 <BMP180_True_Pressure+0x2bc>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b94      	ldr	r3, [pc, #592]	; (8001238 <BMP180_True_Pressure+0x2c0>)
 8000fe6:	801a      	strh	r2, [r3, #0]
	X1 = ((int16_t)B2*(int16_t)B6*(int16_t)B6/4096)/2048;
 8000fe8:	4b94      	ldr	r3, [pc, #592]	; (800123c <BMP180_True_Pressure+0x2c4>)
 8000fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b91      	ldr	r3, [pc, #580]	; (8001238 <BMP180_True_Pressure+0x2c0>)
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	fb03 f302 	mul.w	r3, r3, r2
 8000ffa:	4a8f      	ldr	r2, [pc, #572]	; (8001238 <BMP180_True_Pressure+0x2c0>)
 8000ffc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	da02      	bge.n	800100e <BMP180_True_Pressure+0x96>
 8001008:	4a8d      	ldr	r2, [pc, #564]	; (8001240 <BMP180_True_Pressure+0x2c8>)
 800100a:	441a      	add	r2, r3
 800100c:	4613      	mov	r3, r2
 800100e:	15db      	asrs	r3, r3, #23
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b8c      	ldr	r3, [pc, #560]	; (8001244 <BMP180_True_Pressure+0x2cc>)
 8001014:	801a      	strh	r2, [r3, #0]

	X2 = (int16_t)AC2*(int16_t)B6/2048;
 8001016:	4b8c      	ldr	r3, [pc, #560]	; (8001248 <BMP180_True_Pressure+0x2d0>)
 8001018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101c:	461a      	mov	r2, r3
 800101e:	4b86      	ldr	r3, [pc, #536]	; (8001238 <BMP180_True_Pressure+0x2c0>)
 8001020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001024:	fb03 f302 	mul.w	r3, r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	da01      	bge.n	8001030 <BMP180_True_Pressure+0xb8>
 800102c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001030:	12db      	asrs	r3, r3, #11
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b85      	ldr	r3, [pc, #532]	; (800124c <BMP180_True_Pressure+0x2d4>)
 8001036:	801a      	strh	r2, [r3, #0]
	X3 = X1+X2;
 8001038:	4b82      	ldr	r3, [pc, #520]	; (8001244 <BMP180_True_Pressure+0x2cc>)
 800103a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b82      	ldr	r3, [pc, #520]	; (800124c <BMP180_True_Pressure+0x2d4>)
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4413      	add	r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b80      	ldr	r3, [pc, #512]	; (8001250 <BMP180_True_Pressure+0x2d8>)
 8001050:	801a      	strh	r2, [r3, #0]
	B3 = (((AC1*4+(int32_t)X3)<<3)+2)/4;
 8001052:	4b80      	ldr	r3, [pc, #512]	; (8001254 <BMP180_True_Pressure+0x2dc>)
 8001054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4a7d      	ldr	r2, [pc, #500]	; (8001250 <BMP180_True_Pressure+0x2d8>)
 800105c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	3302      	adds	r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	da00      	bge.n	800106c <BMP180_True_Pressure+0xf4>
 800106a:	3303      	adds	r3, #3
 800106c:	109b      	asrs	r3, r3, #2
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b79      	ldr	r3, [pc, #484]	; (8001258 <BMP180_True_Pressure+0x2e0>)
 8001072:	801a      	strh	r2, [r3, #0]
	X1 = (int16_t)AC3*(int16_t)B6/8192;
 8001074:	4b79      	ldr	r3, [pc, #484]	; (800125c <BMP180_True_Pressure+0x2e4>)
 8001076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107a:	461a      	mov	r2, r3
 800107c:	4b6e      	ldr	r3, [pc, #440]	; (8001238 <BMP180_True_Pressure+0x2c0>)
 800107e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001082:	fb03 f302 	mul.w	r3, r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	da02      	bge.n	8001090 <BMP180_True_Pressure+0x118>
 800108a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800108e:	331f      	adds	r3, #31
 8001090:	135b      	asrs	r3, r3, #13
 8001092:	b21a      	sxth	r2, r3
 8001094:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <BMP180_True_Pressure+0x2cc>)
 8001096:	801a      	strh	r2, [r3, #0]
	X2 = (int16_t)B1*(int16_t)B6*(int16_t)B6/4096/65536;
 8001098:	4b71      	ldr	r3, [pc, #452]	; (8001260 <BMP180_True_Pressure+0x2e8>)
 800109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b65      	ldr	r3, [pc, #404]	; (8001238 <BMP180_True_Pressure+0x2c0>)
 80010a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a6:	fb03 f302 	mul.w	r3, r3, r2
 80010aa:	4a63      	ldr	r2, [pc, #396]	; (8001238 <BMP180_True_Pressure+0x2c0>)
 80010ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da02      	bge.n	80010be <BMP180_True_Pressure+0x146>
 80010b8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80010bc:	3b01      	subs	r3, #1
 80010be:	171b      	asrs	r3, r3, #28
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b62      	ldr	r3, [pc, #392]	; (800124c <BMP180_True_Pressure+0x2d4>)
 80010c4:	801a      	strh	r2, [r3, #0]
	X3 = ((int16_t)X1+(int16_t)X2+2)/4;
 80010c6:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <BMP180_True_Pressure+0x2cc>)
 80010c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <BMP180_True_Pressure+0x2d4>)
 80010d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d4:	4413      	add	r3, r2
 80010d6:	3302      	adds	r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	da00      	bge.n	80010de <BMP180_True_Pressure+0x166>
 80010dc:	3303      	adds	r3, #3
 80010de:	109b      	asrs	r3, r3, #2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <BMP180_True_Pressure+0x2d8>)
 80010e4:	801a      	strh	r2, [r3, #0]
	B4 = (int16_t)AC4*(uint16_t)(X3+32768)/32768;
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <BMP180_True_Pressure+0x2ec>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b58      	ldr	r3, [pc, #352]	; (8001250 <BMP180_True_Pressure+0x2d8>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	fb03 f302 	mul.w	r3, r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	da02      	bge.n	800110a <BMP180_True_Pressure+0x192>
 8001104:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001108:	337f      	adds	r3, #127	; 0x7f
 800110a:	13db      	asrs	r3, r3, #15
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b56      	ldr	r3, [pc, #344]	; (8001268 <BMP180_True_Pressure+0x2f0>)
 8001110:	801a      	strh	r2, [r3, #0]
	B7 = ((uint16_t)UP-(int16_t)B3)*(50000>>3);
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <BMP180_True_Pressure+0x2b8>)
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001118:	b29b      	uxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <BMP180_True_Pressure+0x2e0>)
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	b29b      	uxth	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	0152      	lsls	r2, r2, #5
 800112a:	1ad2      	subs	r2, r2, r3
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	4413      	add	r3, r2
 8001130:	461a      	mov	r2, r3
 8001132:	0091      	lsls	r1, r2, #2
 8001134:	461a      	mov	r2, r3
 8001136:	460b      	mov	r3, r1
 8001138:	4413      	add	r3, r2
 800113a:	461a      	mov	r2, r3
 800113c:	0091      	lsls	r1, r2, #2
 800113e:	461a      	mov	r2, r3
 8001140:	460b      	mov	r3, r1
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b48      	ldr	r3, [pc, #288]	; (800126c <BMP180_True_Pressure+0x2f4>)
 800114a:	801a      	strh	r2, [r3, #0]
	if(B7<0x80000000)
	{
		p = (int16_t)(B7*2)/(int16_t)B4;
 800114c:	4b47      	ldr	r3, [pc, #284]	; (800126c <BMP180_True_Pressure+0x2f4>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	b21b      	sxth	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	4b43      	ldr	r3, [pc, #268]	; (8001268 <BMP180_True_Pressure+0x2f0>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b21b      	sxth	r3, r3
 800115e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001162:	80fb      	strh	r3, [r7, #6]
	else
	{
		p = (int16_t)(B7*B4)*2;
	}

	X1=(p/256)*(p/256);
 8001164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001168:	2b00      	cmp	r3, #0
 800116a:	da00      	bge.n	800116e <BMP180_True_Pressure+0x1f6>
 800116c:	33ff      	adds	r3, #255	; 0xff
 800116e:	121b      	asrs	r3, r3, #8
 8001170:	b21b      	sxth	r3, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	da00      	bge.n	800117e <BMP180_True_Pressure+0x206>
 800117c:	33ff      	adds	r3, #255	; 0xff
 800117e:	121b      	asrs	r3, r3, #8
 8001180:	b21b      	sxth	r3, r3
 8001182:	b29b      	uxth	r3, r3
 8001184:	fb12 f303 	smulbb	r3, r2, r3
 8001188:	b29b      	uxth	r3, r3
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <BMP180_True_Pressure+0x2cc>)
 800118e:	801a      	strh	r2, [r3, #0]
	X1=(X1*3038)/65536 ;
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <BMP180_True_Pressure+0x2cc>)
 8001192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001196:	461a      	mov	r2, r3
 8001198:	f640 33de 	movw	r3, #3038	; 0xbde
 800119c:	fb03 f302 	mul.w	r3, r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da02      	bge.n	80011aa <BMP180_True_Pressure+0x232>
 80011a4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011a8:	33ff      	adds	r3, #255	; 0xff
 80011aa:	141b      	asrs	r3, r3, #16
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <BMP180_True_Pressure+0x2cc>)
 80011b0:	801a      	strh	r2, [r3, #0]
	X2=(p*-7357)/65536 ;
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <BMP180_True_Pressure+0x2f8>)
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da02      	bge.n	80011c6 <BMP180_True_Pressure+0x24e>
 80011c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011c4:	33ff      	adds	r3, #255	; 0xff
 80011c6:	141b      	asrs	r3, r3, #16
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <BMP180_True_Pressure+0x2d4>)
 80011cc:	801a      	strh	r2, [r3, #0]
	p=p+(X1+X2+3791)/16;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <BMP180_True_Pressure+0x2cc>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <BMP180_True_Pressure+0x2d4>)
 80011d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011dc:	4413      	add	r3, r2
 80011de:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da00      	bge.n	80011e8 <BMP180_True_Pressure+0x270>
 80011e6:	330f      	adds	r3, #15
 80011e8:	111b      	asrs	r3, r3, #4
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	4413      	add	r3, r2
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	80fb      	strh	r3, [r7, #6]
	return p*0.00000986923;
 80011f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f937 	bl	800046c <__aeabi_i2d>
 80011fe:	a308      	add	r3, pc, #32	; (adr r3, 8001220 <BMP180_True_Pressure+0x2a8>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff f998 	bl	8000538 <__aeabi_dmul>
 8001208:	4603      	mov	r3, r0
 800120a:	460c      	mov	r4, r1
 800120c:	4618      	mov	r0, r3
 800120e:	4621      	mov	r1, r4
 8001210:	f7ff fba4 	bl	800095c <__aeabi_d2iz>
 8001214:	4603      	mov	r3, r0
 8001216:	b21b      	sxth	r3, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	a48cde11 	.word	0xa48cde11
 8001224:	3ee4b280 	.word	0x3ee4b280
 8001228:	000186a0 	.word	0x000186a0
 800122c:	20000070 	.word	0x20000070
 8001230:	20000068 	.word	0x20000068
 8001234:	20000052 	.word	0x20000052
 8001238:	20000032 	.word	0x20000032
 800123c:	2000005e 	.word	0x2000005e
 8001240:	007fffff 	.word	0x007fffff
 8001244:	20000058 	.word	0x20000058
 8001248:	2000005a 	.word	0x2000005a
 800124c:	20000036 	.word	0x20000036
 8001250:	20000060 	.word	0x20000060
 8001254:	2000002e 	.word	0x2000002e
 8001258:	2000006c 	.word	0x2000006c
 800125c:	2000005c 	.word	0x2000005c
 8001260:	20000066 	.word	0x20000066
 8001264:	20000054 	.word	0x20000054
 8001268:	20000062 	.word	0x20000062
 800126c:	20000064 	.word	0x20000064
 8001270:	ffffe343 	.word	0xffffe343

08001274 <main>:
static void MX_I2C2_Init(void);

int16_t sicaklik=0;
int16_t pressure = 0;
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  HAL_Init();
 8001278:	f000 f99c 	bl	80015b4 <HAL_Init>


  SystemClock_Config();
 800127c:	f000 f81a 	bl	80012b4 <SystemClock_Config>


  MX_GPIO_Init();
 8001280:	f000 f8a4 	bl	80013cc <MX_GPIO_Init>
  MX_I2C2_Init();
 8001284:	f000 f874 	bl	8001370 <MX_I2C2_Init>
  BMP180_Init();
 8001288:	f7ff fd18 	bl	8000cbc <BMP180_Init>
  while (1)
  {

	  BMP180_Calibrate();
 800128c:	f7ff fd30 	bl	8000cf0 <BMP180_Calibrate>
sicaklik = BMP180_True_Temperature();
 8001290:	f7ff fdec 	bl	8000e6c <BMP180_True_Temperature>
 8001294:	4603      	mov	r3, r0
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <main+0x38>)
 800129a:	801a      	strh	r2, [r3, #0]
pressure= BMP180_True_Pressure();
 800129c:	f7ff fe6c 	bl	8000f78 <BMP180_True_Pressure>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <main+0x3c>)
 80012a6:	801a      	strh	r2, [r3, #0]
  {
 80012a8:	e7f0      	b.n	800128c <main+0x18>
 80012aa:	bf00      	nop
 80012ac:	20000028 	.word	0x20000028
 80012b0:	2000002a 	.word	0x2000002a

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2230      	movs	r2, #48	; 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fa04 	bl	80036d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <SystemClock_Config+0xb4>)
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <SystemClock_Config+0xb4>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <SystemClock_Config+0xb4>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4a1c      	ldr	r2, [pc, #112]	; (800136c <SystemClock_Config+0xb8>)
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <SystemClock_Config+0xb8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <SystemClock_Config+0xb8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001318:	2310      	movs	r3, #16
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fd51 	bl	8002dcc <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001330:	f000 f890 	bl	8001454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f001 ffb4 	bl	80032bc <HAL_RCC_ClockConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800135a:	f000 f87b 	bl	8001454 <Error_Handler>
  }
}
 800135e:	bf00      	nop
 8001360:	3750      	adds	r7, #80	; 0x50
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2C2_Init+0x50>)
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <MX_I2C2_Init+0x54>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_I2C2_Init+0x50>)
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_I2C2_Init+0x58>)
 800137e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_I2C2_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_I2C2_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_I2C2_Init+0x50>)
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <MX_I2C2_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_I2C2_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MX_I2C2_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_I2C2_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_I2C2_Init+0x50>)
 80013ae:	f000 fc2d 	bl	8001c0c <HAL_I2C_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013b8:	f000 f84c 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000070 	.word	0x20000070
 80013c4:	40005800 	.word	0x40005800
 80013c8:	00061a80 	.word	0x00061a80

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4a19      	ldr	r2, [pc, #100]	; (800144c <MX_GPIO_Init+0x80>)
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_GPIO_Init+0x80>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_GPIO_Init+0x80>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_GPIO_Init+0x80>)
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_GPIO_Init+0x80>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_GPIO_Init+0x80>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <MX_GPIO_Init+0x84>)
 8001422:	f000 fbd9 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001426:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4619      	mov	r1, r3
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_GPIO_Init+0x84>)
 8001440:	f000 fa30 	bl	80018a4 <HAL_GPIO_Init>

}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40020c00 	.word	0x40020c00

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145a:	e7fe      	b.n	800145a <Error_Handler+0x6>

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_MspInit+0x4c>)
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x4c>)
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_MspInit+0x4c>)
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_MspInit+0x4c>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_I2C_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12c      	bne.n	8001528 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014fc:	2304      	movs	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <HAL_I2C_MspInit+0x8c>)
 8001508:	f000 f9cc 	bl	80018a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_I2C_MspInit+0x88>)
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_I2C_MspInit+0x88>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_I2C_MspInit+0x88>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40005800 	.word	0x40005800
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f866 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_Init+0x40>)
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_Init+0x40>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_Init+0x40>)
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_Init+0x40>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_Init+0x40>)
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_Init+0x40>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 f92d 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff ff38 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f937 	bl	800188a <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 f90d 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	; (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008
 800167c:	200000c4 	.word	0x200000c4

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200000c4 	.word	0x200000c4

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_Delay+0x40>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad2      	subs	r2, r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3f7      	bcc.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000008 	.word	0x20000008

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	490d      	ldr	r1, [pc, #52]	; (800178c <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	4909      	ldr	r1, [pc, #36]	; (8001790 <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	2201      	movs	r2, #1
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	1e5a      	subs	r2, r3, #1
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	401a      	ands	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017da:	2101      	movs	r1, #1
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	1e59      	subs	r1, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff90 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff49 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff5e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff90 	bl	8001794 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5f 	bl	8001740 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffb0 	bl	80017f8 <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e16b      	b.n	8001b98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 815a 	bne.w	8001b92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d005      	beq.n	80018f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d130      	bne.n	8001958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 0201 	and.w	r2, r3, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b03      	cmp	r3, #3
 8001962:	d017      	beq.n	8001994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80b4 	beq.w	8001b92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4a5f      	ldr	r2, [pc, #380]	; (8001bac <HAL_GPIO_Init+0x308>)
 8001a30:	4b5e      	ldr	r3, [pc, #376]	; (8001bac <HAL_GPIO_Init+0x308>)
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_GPIO_Init+0x308>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a46:	4a5a      	ldr	r2, [pc, #360]	; (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a51      	ldr	r2, [pc, #324]	; (8001bb4 <HAL_GPIO_Init+0x310>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d02b      	beq.n	8001aca <HAL_GPIO_Init+0x226>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a50      	ldr	r2, [pc, #320]	; (8001bb8 <HAL_GPIO_Init+0x314>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d025      	beq.n	8001ac6 <HAL_GPIO_Init+0x222>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4f      	ldr	r2, [pc, #316]	; (8001bbc <HAL_GPIO_Init+0x318>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01f      	beq.n	8001ac2 <HAL_GPIO_Init+0x21e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4e      	ldr	r2, [pc, #312]	; (8001bc0 <HAL_GPIO_Init+0x31c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d019      	beq.n	8001abe <HAL_GPIO_Init+0x21a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4d      	ldr	r2, [pc, #308]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x216>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4c      	ldr	r2, [pc, #304]	; (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4b      	ldr	r2, [pc, #300]	; (8001bcc <HAL_GPIO_Init+0x328>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x20e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4a      	ldr	r2, [pc, #296]	; (8001bd0 <HAL_GPIO_Init+0x32c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x20a>
 8001aaa:	2307      	movs	r3, #7
 8001aac:	e00e      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001aae:	2308      	movs	r3, #8
 8001ab0:	e00c      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	e00a      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4934      	ldr	r1, [pc, #208]	; (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b0e:	4a31      	ldr	r2, [pc, #196]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b38:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f ae90 	bls.w	80018c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3724      	adds	r7, #36	; 0x24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40021400 	.word	0x40021400
 8001bcc:	40021800 	.word	0x40021800
 8001bd0:	40021c00 	.word	0x40021c00
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e11f      	b.n	8001e5e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fc3a 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2224      	movs	r2, #36	; 0x24
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c70:	f001 fccc 	bl	800360c <HAL_RCC_GetPCLK1Freq>
 8001c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a7b      	ldr	r2, [pc, #492]	; (8001e68 <HAL_I2C_Init+0x25c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d807      	bhi.n	8001c90 <HAL_I2C_Init+0x84>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4a7a      	ldr	r2, [pc, #488]	; (8001e6c <HAL_I2C_Init+0x260>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	bf94      	ite	ls
 8001c88:	2301      	movls	r3, #1
 8001c8a:	2300      	movhi	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e006      	b.n	8001c9e <HAL_I2C_Init+0x92>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_I2C_Init+0x264>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	bf94      	ite	ls
 8001c98:	2301      	movls	r3, #1
 8001c9a:	2300      	movhi	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0db      	b.n	8001e5e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4a72      	ldr	r2, [pc, #456]	; (8001e74 <HAL_I2C_Init+0x268>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0c9b      	lsrs	r3, r3, #18
 8001cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	6852      	ldr	r2, [r2, #4]
 8001cbc:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4863      	ldr	r0, [pc, #396]	; (8001e68 <HAL_I2C_Init+0x25c>)
 8001cda:	4283      	cmp	r3, r0
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_I2C_Init+0xd8>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	e009      	b.n	8001cf8 <HAL_I2C_Init+0xec>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001cea:	fb00 f303 	mul.w	r3, r0, r3
 8001cee:	4862      	ldr	r0, [pc, #392]	; (8001e78 <HAL_I2C_Init+0x26c>)
 8001cf0:	fba0 0303 	umull	r0, r3, r0, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4955      	ldr	r1, [pc, #340]	; (8001e68 <HAL_I2C_Init+0x25c>)
 8001d14:	428b      	cmp	r3, r1
 8001d16:	d80d      	bhi.n	8001d34 <HAL_I2C_Init+0x128>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e59      	subs	r1, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	bf38      	it	cc
 8001d30:	2304      	movcc	r3, #4
 8001d32:	e04f      	b.n	8001dd4 <HAL_I2C_Init+0x1c8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d111      	bne.n	8001d60 <HAL_I2C_Init+0x154>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1e5c      	subs	r4, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	440b      	add	r3, r1
 8001d4a:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e012      	b.n	8001d86 <HAL_I2C_Init+0x17a>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1e5c      	subs	r4, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	0099      	lsls	r1, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_Init+0x182>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e022      	b.n	8001dd4 <HAL_I2C_Init+0x1c8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10e      	bne.n	8001db4 <HAL_I2C_Init+0x1a8>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1e5c      	subs	r4, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	440b      	add	r3, r1
 8001da4:	fbb4 f3f3 	udiv	r3, r4, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db2:	e00f      	b.n	8001dd4 <HAL_I2C_Init+0x1c8>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1e5c      	subs	r4, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	0099      	lsls	r1, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	fbb4 f3f3 	udiv	r3, r4, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	69d0      	ldr	r0, [r2, #28]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6a12      	ldr	r2, [r2, #32]
 8001dee:	4302      	orrs	r2, r0
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	6908      	ldr	r0, [r1, #16]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	68c9      	ldr	r1, [r1, #12]
 8001e0e:	4301      	orrs	r1, r0
 8001e10:	430b      	orrs	r3, r1
 8001e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	68d2      	ldr	r2, [r2, #12]
 8001e1e:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6950      	ldr	r0, [r2, #20]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6992      	ldr	r2, [r2, #24]
 8001e2a:	4302      	orrs	r2, r0
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	000186a0 	.word	0x000186a0
 8001e6c:	001e847f 	.word	0x001e847f
 8001e70:	003d08ff 	.word	0x003d08ff
 8001e74:	431bde83 	.word	0x431bde83
 8001e78:	10624dd3 	.word	0x10624dd3

08001e7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	817b      	strh	r3, [r7, #10]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	813b      	strh	r3, [r7, #8]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e96:	f7ff fbf3 	bl	8001680 <HAL_GetTick>
 8001e9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	f040 80d9 	bne.w	800205c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2319      	movs	r3, #25
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	496d      	ldr	r1, [pc, #436]	; (8002068 <HAL_I2C_Mem_Write+0x1ec>)
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 fdab 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e0cc      	b.n	800205e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Mem_Write+0x56>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e0c5      	b.n	800205e <HAL_I2C_Mem_Write+0x1e2>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d007      	beq.n	8001ef8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2221      	movs	r2, #33	; 0x21
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2240      	movs	r2, #64	; 0x40
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a3a      	ldr	r2, [r7, #32]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a4d      	ldr	r2, [pc, #308]	; (800206c <HAL_I2C_Mem_Write+0x1f0>)
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f3a:	88f8      	ldrh	r0, [r7, #6]
 8001f3c:	893a      	ldrh	r2, [r7, #8]
 8001f3e:	8979      	ldrh	r1, [r7, #10]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fbe4 	bl	8002718 <I2C_RequestMemoryWrite>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d052      	beq.n	8001ffc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e081      	b.n	800205e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fe2c 	bl	8002bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00d      	beq.n	8001f86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d107      	bne.n	8001f82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e06b      	b.n	800205e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d11b      	bne.n	8001ffc <HAL_I2C_Mem_Write+0x180>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d017      	beq.n	8001ffc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1aa      	bne.n	8001f5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 fe18 	bl	8002c3e <I2C_WaitOnBTFFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00d      	beq.n	8002030 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	2b04      	cmp	r3, #4
 800201a:	d107      	bne.n	800202c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e016      	b.n	800205e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	00100002 	.word	0x00100002
 800206c:	ffff0000 	.word	0xffff0000

08002070 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4603      	mov	r3, r0
 8002080:	817b      	strh	r3, [r7, #10]
 8002082:	460b      	mov	r3, r1
 8002084:	813b      	strh	r3, [r7, #8]
 8002086:	4613      	mov	r3, r2
 8002088:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800208a:	f7ff faf9 	bl	8001680 <HAL_GetTick>
 800208e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b20      	cmp	r3, #32
 800209a:	f040 8208 	bne.w	80024ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2319      	movs	r3, #25
 80020a4:	2201      	movs	r2, #1
 80020a6:	497b      	ldr	r1, [pc, #492]	; (8002294 <HAL_I2C_Mem_Read+0x224>)
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fcb1 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
 80020b6:	e1fb      	b.n	80024b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_I2C_Mem_Read+0x56>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e1f4      	b.n	80024b0 <HAL_I2C_Mem_Read+0x440>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d007      	beq.n	80020ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2222      	movs	r2, #34	; 0x22
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2240      	movs	r2, #64	; 0x40
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a5b      	ldr	r2, [pc, #364]	; (8002298 <HAL_I2C_Mem_Read+0x228>)
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800212e:	88f8      	ldrh	r0, [r7, #6]
 8002130:	893a      	ldrh	r2, [r7, #8]
 8002132:	8979      	ldrh	r1, [r7, #10]
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4603      	mov	r3, r0
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fb7e 	bl	8002840 <I2C_RequestMemoryRead>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e1b0      	b.n	80024b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	d113      	bne.n	800217e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e184      	b.n	8002488 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	2b01      	cmp	r3, #1
 8002184:	d11b      	bne.n	80021be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e164      	b.n	8002488 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d11b      	bne.n	80021fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	e144      	b.n	8002488 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002214:	e138      	b.n	8002488 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221a:	2b03      	cmp	r3, #3
 800221c:	f200 80f1 	bhi.w	8002402 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b01      	cmp	r3, #1
 8002226:	d123      	bne.n	8002270 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fd47 	bl	8002cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e139      	b.n	80024b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	6912      	ldr	r2, [r2, #16]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800226e:	e10b      	b.n	8002488 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	2b02      	cmp	r3, #2
 8002276:	d14e      	bne.n	8002316 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227e:	2200      	movs	r2, #0
 8002280:	4906      	ldr	r1, [pc, #24]	; (800229c <HAL_I2C_Mem_Read+0x22c>)
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fbc4 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e10e      	b.n	80024b0 <HAL_I2C_Mem_Read+0x440>
 8002292:	bf00      	nop
 8002294:	00100002 	.word	0x00100002
 8002298:	ffff0000 	.word	0xffff0000
 800229c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	6912      	ldr	r2, [r2, #16]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	6912      	ldr	r2, [r2, #16]
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002314:	e0b8      	b.n	8002488 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	2200      	movs	r2, #0
 800231e:	4966      	ldr	r1, [pc, #408]	; (80024b8 <HAL_I2C_Mem_Read+0x448>)
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fb75 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0bf      	b.n	80024b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	6912      	ldr	r2, [r2, #16]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	2200      	movs	r2, #0
 800237a:	494f      	ldr	r1, [pc, #316]	; (80024b8 <HAL_I2C_Mem_Read+0x448>)
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fb47 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e091      	b.n	80024b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	6912      	ldr	r2, [r2, #16]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	6912      	ldr	r2, [r2, #16]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002400:	e042      	b.n	8002488 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fc5a 	bl	8002cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e04c      	b.n	80024b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	6912      	ldr	r2, [r2, #16]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d118      	bne.n	8002488 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	6912      	ldr	r2, [r2, #16]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f aec2 	bne.w	8002216 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
  }
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	00010004 	.word	0x00010004

080024bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	460b      	mov	r3, r1
 80024ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff f8d8 	bl	8001680 <HAL_GetTick>
 80024d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80024d2:	2301      	movs	r3, #1
 80024d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b20      	cmp	r3, #32
 80024e0:	f040 8110 	bne.w	8002704 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2319      	movs	r3, #25
 80024ea:	2201      	movs	r2, #1
 80024ec:	4988      	ldr	r1, [pc, #544]	; (8002710 <HAL_I2C_IsDeviceReady+0x254>)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fa8e 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
 80024fc:	e103      	b.n	8002706 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_I2C_IsDeviceReady+0x50>
 8002508:	2302      	movs	r3, #2
 800250a:	e0fc      	b.n	8002706 <HAL_I2C_IsDeviceReady+0x24a>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d007      	beq.n	8002532 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2224      	movs	r2, #36	; 0x24
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a70      	ldr	r2, [pc, #448]	; (8002714 <HAL_I2C_IsDeviceReady+0x258>)
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002564:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fa4c 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258c:	d103      	bne.n	8002596 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0b5      	b.n	8002706 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	897a      	ldrh	r2, [r7, #10]
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025a6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025a8:	f7ff f86a 	bl	8001680 <HAL_GetTick>
 80025ac:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025dc:	e025      	b.n	800262a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7ff f84f 	bl	8001680 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	1ad2      	subs	r2, r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d802      	bhi.n	80025f4 <HAL_I2C_IsDeviceReady+0x138>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d103      	bne.n	80025fc <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	22a0      	movs	r2, #160	; 0xa0
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b02      	cmp	r3, #2
 8002608:	bf0c      	ite	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	2300      	movne	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002620:	bf0c      	ite	eq
 8002622:	2301      	moveq	r3, #1
 8002624:	2300      	movne	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2ba0      	cmp	r3, #160	; 0xa0
 8002634:	d005      	beq.n	8002642 <HAL_I2C_IsDeviceReady+0x186>
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <HAL_I2C_IsDeviceReady+0x186>
 800263c:	7dbb      	ldrb	r3, [r7, #22]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0cd      	beq.n	80025de <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b02      	cmp	r3, #2
 8002656:	d129      	bne.n	80026ac <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2319      	movs	r3, #25
 8002684:	2201      	movs	r2, #1
 8002686:	4922      	ldr	r1, [pc, #136]	; (8002710 <HAL_I2C_IsDeviceReady+0x254>)
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f9c1 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e036      	b.n	8002706 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e02c      	b.n	8002706 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026c4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2319      	movs	r3, #25
 80026cc:	2201      	movs	r2, #1
 80026ce:	4910      	ldr	r1, [pc, #64]	; (8002710 <HAL_I2C_IsDeviceReady+0x254>)
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f99d 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e012      	b.n	8002706 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	3301      	adds	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	f4ff af33 	bcc.w	8002556 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	00100002 	.word	0x00100002
 8002714:	ffff0000 	.word	0xffff0000

08002718 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4603      	mov	r3, r0
 8002728:	817b      	strh	r3, [r7, #10]
 800272a:	460b      	mov	r3, r1
 800272c:	813b      	strh	r3, [r7, #8]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002740:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	2200      	movs	r2, #0
 800274a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f95e 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00d      	beq.n	8002776 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002768:	d103      	bne.n	8002772 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e05e      	b.n	8002834 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	897a      	ldrh	r2, [r7, #10]
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002782:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	6a3a      	ldr	r2, [r7, #32]
 8002788:	492c      	ldr	r1, [pc, #176]	; (800283c <I2C_RequestMemoryWrite+0x124>)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f997 	bl	8002abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e04c      	b.n	8002834 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	6a39      	ldr	r1, [r7, #32]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fa01 	bl	8002bbc <I2C_WaitOnTXEFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d107      	bne.n	80027d8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e02b      	b.n	8002834 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	893a      	ldrh	r2, [r7, #8]
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	611a      	str	r2, [r3, #16]
 80027ec:	e021      	b.n	8002832 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	893a      	ldrh	r2, [r7, #8]
 80027f4:	0a12      	lsrs	r2, r2, #8
 80027f6:	b292      	uxth	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	6a39      	ldr	r1, [r7, #32]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f9db 	bl	8002bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b04      	cmp	r3, #4
 8002812:	d107      	bne.n	8002824 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002822:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e005      	b.n	8002834 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	893a      	ldrh	r2, [r7, #8]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	00010002 	.word	0x00010002

08002840 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	460b      	mov	r3, r1
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002868:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2200      	movs	r2, #0
 8002882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f8c2 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a0:	d103      	bne.n	80028aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0a9      	b.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	897a      	ldrh	r2, [r7, #10]
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	6a3a      	ldr	r2, [r7, #32]
 80028c0:	4952      	ldr	r1, [pc, #328]	; (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f8fb 	bl	8002abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e097      	b.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ea:	6a39      	ldr	r1, [r7, #32]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f965 	bl	8002bbc <I2C_WaitOnTXEFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d107      	bne.n	8002910 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e076      	b.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	893a      	ldrh	r2, [r7, #8]
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	611a      	str	r2, [r3, #16]
 8002924:	e021      	b.n	800296a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	893a      	ldrh	r2, [r7, #8]
 800292c:	0a12      	lsrs	r2, r2, #8
 800292e:	b292      	uxth	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002936:	6a39      	ldr	r1, [r7, #32]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f93f 	bl	8002bbc <I2C_WaitOnTXEFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00d      	beq.n	8002960 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2b04      	cmp	r3, #4
 800294a:	d107      	bne.n	800295c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e050      	b.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	893a      	ldrh	r2, [r7, #8]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800296a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296c:	6a39      	ldr	r1, [r7, #32]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f924 	bl	8002bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b04      	cmp	r3, #4
 8002980:	d107      	bne.n	8002992 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e035      	b.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f82c 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <I2C_RequestMemoryRead+0x19a>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029cc:	d103      	bne.n	80029d6 <I2C_RequestMemoryRead+0x196>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e013      	b.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	897a      	ldrh	r2, [r7, #10]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	6a3a      	ldr	r2, [r7, #32]
 80029ee:	4907      	ldr	r1, [pc, #28]	; (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f864 	bl	8002abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <I2C_RequestMemoryRead+0x1c0>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  }

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	00010002 	.word	0x00010002

08002a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a20:	e025      	b.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d021      	beq.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2a:	f7fe fe29 	bl	8001680 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad2      	subs	r2, r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d802      	bhi.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d116      	bne.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e023      	b.n	8002ab6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d10d      	bne.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4013      	ands	r3, r2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	e00c      	b.n	8002aae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d0b6      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002acc:	e051      	b.n	8002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002adc:	d123      	bne.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0204 	orr.w	r2, r3, #4
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e046      	b.n	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d021      	beq.n	8002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7fe fda7 	bl	8001680 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	1ad2      	subs	r2, r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d802      	bhi.n	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d116      	bne.n	8002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e020      	b.n	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10c      	bne.n	8002b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4013      	ands	r3, r2
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	e00b      	b.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d18d      	bne.n	8002ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc8:	e02d      	b.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f8ce 	bl	8002d6c <I2C_IsAcknowledgeFailed>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e02d      	b.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d021      	beq.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be2:	f7fe fd4d 	bl	8001680 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	1ad2      	subs	r2, r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d802      	bhi.n	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d116      	bne.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e007      	b.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b80      	cmp	r3, #128	; 0x80
 8002c32:	d1ca      	bne.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c4a:	e02d      	b.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f88d 	bl	8002d6c <I2C_IsAcknowledgeFailed>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e02d      	b.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d021      	beq.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c64:	f7fe fd0c 	bl	8001680 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d802      	bhi.n	8002c7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d116      	bne.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e007      	b.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d1ca      	bne.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ccc:	e042      	b.n	8002d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d119      	bne.n	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0210 	mvn.w	r2, #16
 8002ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e029      	b.n	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d10:	f7fe fcb6 	bl	8001680 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	1ad2      	subs	r2, r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d802      	bhi.n	8002d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	d1b5      	bne.n	8002cce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d82:	d11b      	bne.n	8002dbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f043 0204 	orr.w	r2, r3, #4
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e264      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d075      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dea:	4ba3      	ldr	r3, [pc, #652]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d00c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df6:	4ba0      	ldr	r3, [pc, #640]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d112      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e02:	4b9d      	ldr	r3, [pc, #628]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	4b99      	ldr	r3, [pc, #612]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05b      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d157      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e23f      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x74>
 8002e32:	4a91      	ldr	r2, [pc, #580]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	4b90      	ldr	r3, [pc, #576]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e01d      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x98>
 8002e4a:	4a8b      	ldr	r2, [pc, #556]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	4b8a      	ldr	r3, [pc, #552]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4a88      	ldr	r2, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	4b87      	ldr	r3, [pc, #540]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e64:	4a84      	ldr	r2, [pc, #528]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	4b84      	ldr	r3, [pc, #528]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4a81      	ldr	r2, [pc, #516]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	4b81      	ldr	r3, [pc, #516]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe fbfc 	bl	8001680 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fbf8 	bl	8001680 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e204      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0xc0>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fbe8 	bl	8001680 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fbe4 	bl	8001680 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1f0      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	4b6c      	ldr	r3, [pc, #432]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xe8>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d063      	beq.n	8002faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee2:	4b65      	ldr	r3, [pc, #404]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eee:	4b62      	ldr	r3, [pc, #392]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_RCC_OscConfig+0x152>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1c4      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4956      	ldr	r1, [pc, #344]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	4b55      	ldr	r3, [pc, #340]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	e03a      	b.n	8002faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b4f      	ldr	r3, [pc, #316]	; (800307c <HAL_RCC_OscConfig+0x2b0>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fe fb9d 	bl	8001680 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7fe fb99 	bl	8001680 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e1a5      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	4b46      	ldr	r3, [pc, #280]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	4943      	ldr	r1, [pc, #268]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
 8002f7c:	e015      	b.n	8002faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCC_OscConfig+0x2b0>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe fb7c 	bl	8001680 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fb78 	bl	8001680 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e184      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d030      	beq.n	8003018 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbe:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x2b4>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fb5c 	bl	8001680 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fb58 	bl	8001680 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e164      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x200>
 8002fea:	e015      	b.n	8003018 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCC_OscConfig+0x2b4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fb45 	bl	8001680 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fb41 	bl	8001680 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e14d      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800300e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80a0 	beq.w	8003166 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d121      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003062:	4a08      	ldr	r2, [pc, #32]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7fe fb07 	bl	8001680 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	e011      	b.n	800309a <HAL_RCC_OscConfig+0x2ce>
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	42470000 	.word	0x42470000
 8003080:	42470e80 	.word	0x42470e80
 8003084:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fe fafa 	bl	8001680 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e106      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b85      	ldr	r3, [pc, #532]	; (80032b0 <HAL_RCC_OscConfig+0x4e4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x2f0>
 80030ae:	4a81      	ldr	r2, [pc, #516]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030b0:	4b80      	ldr	r3, [pc, #512]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	e01c      	b.n	80030f6 <HAL_RCC_OscConfig+0x32a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d10c      	bne.n	80030de <HAL_RCC_OscConfig+0x312>
 80030c4:	4a7b      	ldr	r2, [pc, #492]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030c6:	4b7b      	ldr	r3, [pc, #492]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	4a78      	ldr	r2, [pc, #480]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030d2:	4b78      	ldr	r3, [pc, #480]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	e00b      	b.n	80030f6 <HAL_RCC_OscConfig+0x32a>
 80030de:	4a75      	ldr	r2, [pc, #468]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030e0:	4b74      	ldr	r3, [pc, #464]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	4a72      	ldr	r2, [pc, #456]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030ec:	4b71      	ldr	r3, [pc, #452]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fe fabf 	bl	8001680 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fe fabb 	bl	8001680 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0c5      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	4b65      	ldr	r3, [pc, #404]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ee      	beq.n	8003106 <HAL_RCC_OscConfig+0x33a>
 8003128:	e014      	b.n	8003154 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fe faa9 	bl	8001680 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe faa5 	bl	8001680 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0af      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	4b5a      	ldr	r3, [pc, #360]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ee      	bne.n	8003132 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4a56      	ldr	r2, [pc, #344]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 800315c:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 809b 	beq.w	80032a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003170:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d05c      	beq.n	8003236 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d141      	bne.n	8003208 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003184:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <HAL_RCC_OscConfig+0x4ec>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe fa79 	bl	8001680 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003192:	f7fe fa75 	bl	8001680 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e081      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a4:	4b43      	ldr	r3, [pc, #268]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031b0:	4940      	ldr	r1, [pc, #256]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	019b      	lsls	r3, r3, #6
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	3b01      	subs	r3, #1
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031da:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <HAL_RCC_OscConfig+0x4ec>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fa4e 	bl	8001680 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fa4a 	bl	8001680 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e056      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fa:	4b2e      	ldr	r3, [pc, #184]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x41c>
 8003206:	e04e      	b.n	80032a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <HAL_RCC_OscConfig+0x4ec>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fe fa37 	bl	8001680 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fa33 	bl	8001680 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e03f      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x44a>
 8003234:	e037      	b.n	80032a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e032      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003242:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <HAL_RCC_OscConfig+0x4e8>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d028      	beq.n	80032a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d121      	bne.n	80032a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d11a      	bne.n	80032a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003272:	4013      	ands	r3, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003278:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800327a:	4293      	cmp	r3, r2
 800327c:	d111      	bne.n	80032a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	3b01      	subs	r3, #1
 800328c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40007000 	.word	0x40007000
 80032b4:	40023800 	.word	0x40023800
 80032b8:	42470060 	.word	0x42470060

080032bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0cc      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032d0:	4b68      	ldr	r3, [pc, #416]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0207 	and.w	r2, r3, #7
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d20c      	bcs.n	80032f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b65      	ldr	r3, [pc, #404]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b63      	ldr	r3, [pc, #396]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0207 	and.w	r2, r3, #7
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0b8      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d020      	beq.n	8003346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003310:	4a59      	ldr	r2, [pc, #356]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4b59      	ldr	r3, [pc, #356]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800331a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003328:	4a53      	ldr	r2, [pc, #332]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	4b53      	ldr	r3, [pc, #332]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003334:	4950      	ldr	r1, [pc, #320]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4b50      	ldr	r3, [pc, #320]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d044      	beq.n	80033dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b47      	ldr	r3, [pc, #284]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d119      	bne.n	800339a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07f      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d003      	beq.n	800337a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003376:	2b03      	cmp	r3, #3
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337a:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06f      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338a:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e067      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339a:	4937      	ldr	r1, [pc, #220]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 0203 	bic.w	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ac:	f7fe f968 	bl	8001680 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b4:	f7fe f964 	bl	8001680 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e04f      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 020c 	and.w	r2, r3, #12
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	429a      	cmp	r2, r3
 80033da:	d1eb      	bne.n	80033b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033dc:	4b25      	ldr	r3, [pc, #148]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0207 	and.w	r2, r3, #7
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d90c      	bls.n	8003404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0207 	and.w	r2, r3, #7
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e032      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003410:	4919      	ldr	r1, [pc, #100]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342e:	4912      	ldr	r1, [pc, #72]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003442:	f000 f821 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8003446:	4601      	mov	r1, r0
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	5cd3      	ldrb	r3, [r2, r3]
 8003456:	fa21 f303 	lsr.w	r3, r1, r3
 800345a:	4a09      	ldr	r2, [pc, #36]	; (8003480 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_ClockConfig+0x1c8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe f8c8 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023c00 	.word	0x40023c00
 8003478:	40023800 	.word	0x40023800
 800347c:	080036f8 	.word	0x080036f8
 8003480:	20000000 	.word	0x20000000
 8003484:	20000004 	.word	0x20000004

08003488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	b087      	sub	sp, #28
 800348e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003490:	2200      	movs	r2, #0
 8003492:	60fa      	str	r2, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	617a      	str	r2, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 800349c:	2200      	movs	r2, #0
 800349e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a0:	4a51      	ldr	r2, [pc, #324]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80034a2:	6892      	ldr	r2, [r2, #8]
 80034a4:	f002 020c 	and.w	r2, r2, #12
 80034a8:	2a04      	cmp	r2, #4
 80034aa:	d007      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x34>
 80034ac:	2a08      	cmp	r2, #8
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	f040 8090 	bne.w	80035d6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b6:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <HAL_RCC_GetSysClockFreq+0x164>)
 80034b8:	613b      	str	r3, [r7, #16]
       break;
 80034ba:	e08f      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034bc:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80034be:	613b      	str	r3, [r7, #16]
      break;
 80034c0:	e08c      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c2:	4a49      	ldr	r2, [pc, #292]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80034c4:	6852      	ldr	r2, [r2, #4]
 80034c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80034ca:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034cc:	4a46      	ldr	r2, [pc, #280]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80034ce:	6852      	ldr	r2, [r2, #4]
 80034d0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	d023      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d8:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	f04f 0400 	mov.w	r4, #0
 80034e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	ea03 0301 	and.w	r3, r3, r1
 80034ee:	ea04 0402 	and.w	r4, r4, r2
 80034f2:	4a3f      	ldr	r2, [pc, #252]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80034f4:	fb02 f104 	mul.w	r1, r2, r4
 80034f8:	2200      	movs	r2, #0
 80034fa:	fb02 f203 	mul.w	r2, r2, r3
 80034fe:	440a      	add	r2, r1
 8003500:	493b      	ldr	r1, [pc, #236]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003502:	fba3 0101 	umull	r0, r1, r3, r1
 8003506:	1853      	adds	r3, r2, r1
 8003508:	4619      	mov	r1, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f04f 0400 	mov.w	r4, #0
 8003510:	461a      	mov	r2, r3
 8003512:	4623      	mov	r3, r4
 8003514:	f7fd fa4a 	bl	80009ac <__aeabi_uldivmod>
 8003518:	4603      	mov	r3, r0
 800351a:	460c      	mov	r4, r1
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e04c      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003520:	4a31      	ldr	r2, [pc, #196]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003522:	6852      	ldr	r2, [r2, #4]
 8003524:	0992      	lsrs	r2, r2, #6
 8003526:	4611      	mov	r1, r2
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003530:	f04f 0600 	mov.w	r6, #0
 8003534:	ea05 0501 	and.w	r5, r5, r1
 8003538:	ea06 0602 	and.w	r6, r6, r2
 800353c:	4629      	mov	r1, r5
 800353e:	4632      	mov	r2, r6
 8003540:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003544:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003548:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800354c:	4651      	mov	r1, sl
 800354e:	465a      	mov	r2, fp
 8003550:	46aa      	mov	sl, r5
 8003552:	46b3      	mov	fp, r6
 8003554:	4655      	mov	r5, sl
 8003556:	465e      	mov	r6, fp
 8003558:	1b4d      	subs	r5, r1, r5
 800355a:	eb62 0606 	sbc.w	r6, r2, r6
 800355e:	4629      	mov	r1, r5
 8003560:	4632      	mov	r2, r6
 8003562:	0194      	lsls	r4, r2, #6
 8003564:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003568:	018b      	lsls	r3, r1, #6
 800356a:	1a5b      	subs	r3, r3, r1
 800356c:	eb64 0402 	sbc.w	r4, r4, r2
 8003570:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003574:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003578:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800357c:	4643      	mov	r3, r8
 800357e:	464c      	mov	r4, r9
 8003580:	4655      	mov	r5, sl
 8003582:	465e      	mov	r6, fp
 8003584:	18ed      	adds	r5, r5, r3
 8003586:	eb46 0604 	adc.w	r6, r6, r4
 800358a:	462b      	mov	r3, r5
 800358c:	4634      	mov	r4, r6
 800358e:	02a2      	lsls	r2, r4, #10
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	e897 0018 	ldmia.w	r7, {r3, r4}
 80035a2:	4618      	mov	r0, r3
 80035a4:	4621      	mov	r1, r4
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f04f 0400 	mov.w	r4, #0
 80035ac:	461a      	mov	r2, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	f7fd f9fc 	bl	80009ac <__aeabi_uldivmod>
 80035b4:	4603      	mov	r3, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	3301      	adds	r3, #1
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	613b      	str	r3, [r7, #16]
      break;
 80035d4:	e002      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_RCC_GetSysClockFreq+0x164>)
 80035d8:	613b      	str	r3, [r7, #16]
      break;
 80035da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035dc:	693b      	ldr	r3, [r7, #16]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	00f42400 	.word	0x00f42400
 80035f0:	017d7840 	.word	0x017d7840

080035f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_RCC_GetHCLKFreq+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000000 	.word	0x20000000

0800360c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003610:	f7ff fff0 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 8003614:	4601      	mov	r1, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	0a9b      	lsrs	r3, r3, #10
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4a03      	ldr	r2, [pc, #12]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003622:	5cd3      	ldrb	r3, [r2, r3]
 8003624:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	08003708 	.word	0x08003708

08003634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800366c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003638:	480d      	ldr	r0, [pc, #52]	; (8003670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800363a:	490e      	ldr	r1, [pc, #56]	; (8003674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800363c:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003640:	e002      	b.n	8003648 <LoopCopyDataInit>

08003642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003646:	3304      	adds	r3, #4

08003648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800364c:	d3f9      	bcc.n	8003642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003650:	4c0b      	ldr	r4, [pc, #44]	; (8003680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003654:	e001      	b.n	800365a <LoopFillZerobss>

08003656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003658:	3204      	adds	r2, #4

0800365a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800365c:	d3fb      	bcc.n	8003656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800365e:	f7fd ff97 	bl	8001590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003662:	f000 f811 	bl	8003688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003666:	f7fd fe05 	bl	8001274 <main>
  bx  lr    
 800366a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800366c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003674:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003678:	08003720 	.word	0x08003720
  ldr r2, =_sbss
 800367c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003680:	200000c8 	.word	0x200000c8

08003684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003684:	e7fe      	b.n	8003684 <ADC_IRQHandler>
	...

08003688 <__libc_init_array>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	4e0d      	ldr	r6, [pc, #52]	; (80036c0 <__libc_init_array+0x38>)
 800368c:	4c0d      	ldr	r4, [pc, #52]	; (80036c4 <__libc_init_array+0x3c>)
 800368e:	1ba4      	subs	r4, r4, r6
 8003690:	10a4      	asrs	r4, r4, #2
 8003692:	2500      	movs	r5, #0
 8003694:	42a5      	cmp	r5, r4
 8003696:	d109      	bne.n	80036ac <__libc_init_array+0x24>
 8003698:	4e0b      	ldr	r6, [pc, #44]	; (80036c8 <__libc_init_array+0x40>)
 800369a:	4c0c      	ldr	r4, [pc, #48]	; (80036cc <__libc_init_array+0x44>)
 800369c:	f000 f820 	bl	80036e0 <_init>
 80036a0:	1ba4      	subs	r4, r4, r6
 80036a2:	10a4      	asrs	r4, r4, #2
 80036a4:	2500      	movs	r5, #0
 80036a6:	42a5      	cmp	r5, r4
 80036a8:	d105      	bne.n	80036b6 <__libc_init_array+0x2e>
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
 80036ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036b0:	4798      	blx	r3
 80036b2:	3501      	adds	r5, #1
 80036b4:	e7ee      	b.n	8003694 <__libc_init_array+0xc>
 80036b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ba:	4798      	blx	r3
 80036bc:	3501      	adds	r5, #1
 80036be:	e7f2      	b.n	80036a6 <__libc_init_array+0x1e>
 80036c0:	08003718 	.word	0x08003718
 80036c4:	08003718 	.word	0x08003718
 80036c8:	08003718 	.word	0x08003718
 80036cc:	0800371c 	.word	0x0800371c

080036d0 <memset>:
 80036d0:	4402      	add	r2, r0
 80036d2:	4603      	mov	r3, r0
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d100      	bne.n	80036da <memset+0xa>
 80036d8:	4770      	bx	lr
 80036da:	f803 1b01 	strb.w	r1, [r3], #1
 80036de:	e7f9      	b.n	80036d4 <memset+0x4>

080036e0 <_init>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	bf00      	nop
 80036e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e6:	bc08      	pop	{r3}
 80036e8:	469e      	mov	lr, r3
 80036ea:	4770      	bx	lr

080036ec <_fini>:
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	bf00      	nop
 80036f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f2:	bc08      	pop	{r3}
 80036f4:	469e      	mov	lr, r3
 80036f6:	4770      	bx	lr
