
001_SYSTEM_CLOCK_CONFIG_PLL_STDPERIPH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000610  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000798  08000798  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000798  08000798  00010798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800079c  0800079c  0001079c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080007a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000098  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000a8  200000a8  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002ba3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000007b4  00000000  00000000  00022be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000398  00000000  00000000  00023398  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000330  00000000  00000000  00023730  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001614  00000000  00000000  00023a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000188e  00000000  00000000  00025074  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00026902  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d98  00000000  00000000  00026980  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00027718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000780 	.word	0x08000780

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000780 	.word	0x08000780

080001c8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	4b25      	ldr	r3, [pc, #148]	; (8000274 <DMA_Init+0xac>)
 80001e0:	4013      	ands	r3, r2
 80001e2:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	68db      	ldr	r3, [r3, #12]
 80001ec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80001f2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80001fe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	6a1b      	ldr	r3, [r3, #32]
 8000204:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800020a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000210:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000216:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800021c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	4313      	orrs	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	f023 0307 	bic.w	r3, r3, #7
 8000236:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000240:	4313      	orrs	r3, r2
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	4313      	orrs	r3, r2
 8000246:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	691a      	ldr	r2, [r3, #16]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	685a      	ldr	r2, [r3, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	60da      	str	r2, [r3, #12]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	f01c803f 	.word	0xf01c803f

08000278 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000284:	78fb      	ldrb	r3, [r7, #3]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d006      	beq.n	8000298 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 0201 	orr.w	r2, r3, #1
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000296:	e005      	b.n	80002a4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f023 0201 	bic.w	r2, r3, #1
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	601a      	str	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d002      	beq.n	80002ce <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80002c8:	2301      	movs	r3, #1
 80002ca:	73fb      	strb	r3, [r7, #15]
 80002cc:	e001      	b.n	80002d2 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b087      	sub	sp, #28
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80002ea:	2300      	movs	r3, #0
 80002ec:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a15      	ldr	r2, [pc, #84]	; (800034c <DMA_GetFlagStatus+0x6c>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d802      	bhi.n	8000300 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80002fa:	4b15      	ldr	r3, [pc, #84]	; (8000350 <DMA_GetFlagStatus+0x70>)
 80002fc:	613b      	str	r3, [r7, #16]
 80002fe:	e001      	b.n	8000304 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <DMA_GetFlagStatus+0x74>)
 8000302:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800030a:	2b00      	cmp	r3, #0
 800030c:	d003      	beq.n	8000316 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e002      	b.n	800031c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000322:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000326:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	4013      	ands	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000332:	2301      	movs	r3, #1
 8000334:	75fb      	strb	r3, [r7, #23]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800033c:	7dfb      	ldrb	r3, [r7, #23]
}
 800033e:	4618      	mov	r0, r3
 8000340:	371c      	adds	r7, #28
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	4002640f 	.word	0x4002640f
 8000350:	40026000 	.word	0x40026000
 8000354:	40026400 	.word	0x40026400

08000358 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <DMA_ClearFlag+0x50>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d802      	bhi.n	8000370 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <DMA_ClearFlag+0x54>)
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	e001      	b.n	8000374 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <DMA_ClearFlag+0x58>)
 8000372:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800037a:	2b00      	cmp	r3, #0
 800037c:	d007      	beq.n	800038e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000384:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000388:	68fa      	ldr	r2, [r7, #12]
 800038a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800038c:	e006      	b.n	800039c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000394:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	6093      	str	r3, [r2, #8]
}
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	4002640f 	.word	0x4002640f
 80003ac:	40026000 	.word	0x40026000
 80003b0:	40026400 	.word	0x40026400

080003b4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	891b      	ldrh	r3, [r3, #8]
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	887b      	ldrh	r3, [r7, #2]
 80003cc:	4013      	ands	r3, r2
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80003d4:	2301      	movs	r3, #1
 80003d6:	73fb      	strb	r3, [r7, #15]
 80003d8:	e001      	b.n	80003de <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80003da:	2300      	movs	r3, #0
 80003dc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80003de:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80003f0:	4b35      	ldr	r3, [pc, #212]	; (80004c8 <Audio_MAL_IRQHandler+0xdc>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b35      	ldr	r3, [pc, #212]	; (80004cc <Audio_MAL_IRQHandler+0xe0>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4619      	mov	r1, r3
 80003fa:	4610      	mov	r0, r2
 80003fc:	f7ff ff70 	bl	80002e0 <DMA_GetFlagStatus>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d05e      	beq.n	80004c4 <Audio_MAL_IRQHandler+0xd8>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000406:	4b32      	ldr	r3, [pc, #200]	; (80004d0 <Audio_MAL_IRQHandler+0xe4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d04c      	beq.n	80004a8 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800040e:	bf00      	nop
 8000410:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <Audio_MAL_IRQHandler+0xdc>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff4b 	bl	80002b0 <DMA_GetCmdStatus>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d1f7      	bne.n	8000410 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000420:	4b29      	ldr	r3, [pc, #164]	; (80004c8 <Audio_MAL_IRQHandler+0xdc>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b29      	ldr	r3, [pc, #164]	; (80004cc <Audio_MAL_IRQHandler+0xe0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4619      	mov	r1, r3
 800042a:	4610      	mov	r0, r2
 800042c:	f7ff ff94 	bl	8000358 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000430:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <Audio_MAL_IRQHandler+0xe8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <Audio_MAL_IRQHandler+0xec>)
 8000438:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800043a:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <Audio_MAL_IRQHandler+0xe4>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000442:	4293      	cmp	r3, r2
 8000444:	bf28      	it	cs
 8000446:	4613      	movcs	r3, r2
 8000448:	4a23      	ldr	r2, [pc, #140]	; (80004d8 <Audio_MAL_IRQHandler+0xec>)
 800044a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <Audio_MAL_IRQHandler+0xdc>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4921      	ldr	r1, [pc, #132]	; (80004d8 <Audio_MAL_IRQHandler+0xec>)
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff feb8 	bl	80001c8 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <Audio_MAL_IRQHandler+0xdc>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2101      	movs	r1, #1
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff0a 	bl	8000278 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <Audio_MAL_IRQHandler+0xe8>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <Audio_MAL_IRQHandler+0xe4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000470:	d203      	bcs.n	800047a <Audio_MAL_IRQHandler+0x8e>
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <Audio_MAL_IRQHandler+0xe4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	e000      	b.n	800047c <Audio_MAL_IRQHandler+0x90>
 800047a:	4b18      	ldr	r3, [pc, #96]	; (80004dc <Audio_MAL_IRQHandler+0xf0>)
 800047c:	4413      	add	r3, r2
 800047e:	4a15      	ldr	r2, [pc, #84]	; (80004d4 <Audio_MAL_IRQHandler+0xe8>)
 8000480:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <Audio_MAL_IRQHandler+0xe4>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <Audio_MAL_IRQHandler+0xe4>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800048e:	428b      	cmp	r3, r1
 8000490:	bf28      	it	cs
 8000492:	460b      	movcs	r3, r1
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <Audio_MAL_IRQHandler+0xe4>)
 8000498:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <Audio_MAL_IRQHandler+0xdc>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2101      	movs	r1, #1
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fee9 	bl	8000278 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80004a6:	e00d      	b.n	80004c4 <Audio_MAL_IRQHandler+0xd8>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <Audio_MAL_IRQHandler+0xdc>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fee2 	bl	8000278 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <Audio_MAL_IRQHandler+0xdc>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <Audio_MAL_IRQHandler+0xe0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	4610      	mov	r0, r2
 80004c0:	f7ff ff4a 	bl	8000358 <DMA_ClearFlag>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000008 	.word	0x20000008
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	20000000 	.word	0x20000000
 80004d4:	2000002c 	.word	0x2000002c
 80004d8:	2000006c 	.word	0x2000006c
 80004dc:	0001fffe 	.word	0x0001fffe

080004e0 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80004e4:	f7ff ff82 	bl	80003ec <Audio_MAL_IRQHandler>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80004f0:	f7ff ff7c 	bl	80003ec <Audio_MAL_IRQHandler>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80004fc:	2102      	movs	r1, #2
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <SPI3_IRQHandler+0x1c>)
 8000500:	f7ff ff58 	bl	80003b4 <SPI_I2S_GetFlagStatus>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SPI3_IRQHandler+0x16>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800050a:	4b03      	ldr	r3, [pc, #12]	; (8000518 <SPI3_IRQHandler+0x20>)
 800050c:	681b      	ldr	r3, [r3, #0]
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */

  }
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40003c00 	.word	0x40003c00
 8000518:	20000004 	.word	0x20000004

0800051c <main>:
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"


int main(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0





  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x4>
	...

08000524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800055c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000528:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800052a:	e003      	b.n	8000534 <LoopCopyDataInit>

0800052c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800052e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000530:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000532:	3104      	adds	r1, #4

08000534 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000538:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800053a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800053c:	d3f6      	bcc.n	800052c <CopyDataInit>
  ldr  r2, =_sbss
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000540:	e002      	b.n	8000548 <LoopFillZerobss>

08000542 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000542:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000544:	f842 3b04 	str.w	r3, [r2], #4

08000548 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800054a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800054c:	d3f9      	bcc.n	8000542 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800054e:	f000 f841 	bl	80005d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000552:	f000 f8f1 	bl	8000738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000556:	f7ff ffe1 	bl	800051c <main>
  bx  lr    
 800055a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800055c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000560:	080007a0 	.word	0x080007a0
  ldr  r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000568:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800056c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000570:	200000a8 	.word	0x200000a8

08000574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC_IRQHandler>

08000576 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000588:	e7fe      	b.n	8000588 <HardFault_Handler+0x4>

0800058a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800058e:	e7fe      	b.n	800058e <MemManage_Handler+0x4>

08000590 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000594:	e7fe      	b.n	8000594 <BusFault_Handler+0x4>

08000596 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800059a:	e7fe      	b.n	800059a <UsageFault_Handler+0x4>

0800059c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d8:	4a16      	ldr	r2, [pc, #88]	; (8000634 <SystemInit+0x60>)
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <SystemInit+0x60>)
 80005dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <SystemInit+0x64>)
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <SystemInit+0x64>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <SystemInit+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <SystemInit+0x64>)
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <SystemInit+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000608:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <SystemInit+0x64>)
 800060c:	4a0b      	ldr	r2, [pc, #44]	; (800063c <SystemInit+0x68>)
 800060e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000610:	4a09      	ldr	r2, [pc, #36]	; (8000638 <SystemInit+0x64>)
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <SystemInit+0x64>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800061a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <SystemInit+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000622:	f000 f80d 	bl	8000640 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <SystemInit+0x60>)
 8000628:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800062c:	609a      	str	r2, [r3, #8]
#endif
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	40023800 	.word	0x40023800
 800063c:	24003010 	.word	0x24003010

08000640 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800064e:	4a36      	ldr	r2, [pc, #216]	; (8000728 <SetSysClock+0xe8>)
 8000650:	4b35      	ldr	r3, [pc, #212]	; (8000728 <SetSysClock+0xe8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000658:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800065a:	4b33      	ldr	r3, [pc, #204]	; (8000728 <SetSysClock+0xe8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3301      	adds	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d103      	bne.n	8000678 <SetSysClock+0x38>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000676:	d1f0      	bne.n	800065a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <SetSysClock+0xe8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000684:	2301      	movs	r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	e001      	b.n	800068e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d142      	bne.n	800071a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000694:	4a24      	ldr	r2, [pc, #144]	; (8000728 <SetSysClock+0xe8>)
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <SetSysClock+0xe8>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <SetSysClock+0xec>)
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <SetSysClock+0xec>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006ac:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <SetSysClock+0xe8>)
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <SetSysClock+0xe8>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006b4:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <SetSysClock+0xe8>)
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <SetSysClock+0xe8>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006be:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <SetSysClock+0xe8>)
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <SetSysClock+0xe8>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80006ca:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <SetSysClock+0xe8>)
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <SetSysClock+0xf0>)
 80006d0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <SetSysClock+0xe8>)
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <SetSysClock+0xe8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006dc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006de:	bf00      	nop
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <SetSysClock+0xe8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f9      	beq.n	80006e0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <SetSysClock+0xf4>)
 80006ee:	f240 6205 	movw	r2, #1541	; 0x605
 80006f2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006f4:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <SetSysClock+0xe8>)
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <SetSysClock+0xe8>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	f023 0303 	bic.w	r3, r3, #3
 80006fe:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000700:	4a09      	ldr	r2, [pc, #36]	; (8000728 <SetSysClock+0xe8>)
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <SetSysClock+0xe8>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800070c:	bf00      	nop
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <SetSysClock+0xe8>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f003 030c 	and.w	r3, r3, #12
 8000716:	2b08      	cmp	r3, #8
 8000718:	d1f9      	bne.n	800070e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000
 8000730:	07405408 	.word	0x07405408
 8000734:	40023c00 	.word	0x40023c00

08000738 <__libc_init_array>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	4e0d      	ldr	r6, [pc, #52]	; (8000770 <__libc_init_array+0x38>)
 800073c:	4c0d      	ldr	r4, [pc, #52]	; (8000774 <__libc_init_array+0x3c>)
 800073e:	1ba4      	subs	r4, r4, r6
 8000740:	10a4      	asrs	r4, r4, #2
 8000742:	2500      	movs	r5, #0
 8000744:	42a5      	cmp	r5, r4
 8000746:	d109      	bne.n	800075c <__libc_init_array+0x24>
 8000748:	4e0b      	ldr	r6, [pc, #44]	; (8000778 <__libc_init_array+0x40>)
 800074a:	4c0c      	ldr	r4, [pc, #48]	; (800077c <__libc_init_array+0x44>)
 800074c:	f000 f818 	bl	8000780 <_init>
 8000750:	1ba4      	subs	r4, r4, r6
 8000752:	10a4      	asrs	r4, r4, #2
 8000754:	2500      	movs	r5, #0
 8000756:	42a5      	cmp	r5, r4
 8000758:	d105      	bne.n	8000766 <__libc_init_array+0x2e>
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000760:	4798      	blx	r3
 8000762:	3501      	adds	r5, #1
 8000764:	e7ee      	b.n	8000744 <__libc_init_array+0xc>
 8000766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800076a:	4798      	blx	r3
 800076c:	3501      	adds	r5, #1
 800076e:	e7f2      	b.n	8000756 <__libc_init_array+0x1e>
 8000770:	08000798 	.word	0x08000798
 8000774:	08000798 	.word	0x08000798
 8000778:	08000798 	.word	0x08000798
 800077c:	0800079c 	.word	0x0800079c

08000780 <_init>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	bf00      	nop
 8000784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000786:	bc08      	pop	{r3}
 8000788:	469e      	mov	lr, r3
 800078a:	4770      	bx	lr

0800078c <_fini>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	bf00      	nop
 8000790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000792:	bc08      	pop	{r3}
 8000794:	469e      	mov	lr, r3
 8000796:	4770      	bx	lr
