
007_HAL_TIMER_SLAVE_GATED_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002330  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024c8  080024c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024d0  080024d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024d0  080024d0  000124d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c0  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000898c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001421  00000000  00000000  000289c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  00029df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a8  00000000  00000000  0002a740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa96  00000000  00000000  0002afe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c39  00000000  00000000  0004aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4648  00000000  00000000  000546b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118cff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002770  00000000  00000000  00118d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024a0 	.word	0x080024a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080024a0 	.word	0x080024a0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_uldivmod>:
 8000540:	b953      	cbnz	r3, 8000558 <__aeabi_uldivmod+0x18>
 8000542:	b94a      	cbnz	r2, 8000558 <__aeabi_uldivmod+0x18>
 8000544:	2900      	cmp	r1, #0
 8000546:	bf08      	it	eq
 8000548:	2800      	cmpeq	r0, #0
 800054a:	bf1c      	itt	ne
 800054c:	f04f 31ff 	movne.w	r1, #4294967295
 8000550:	f04f 30ff 	movne.w	r0, #4294967295
 8000554:	f000 b974 	b.w	8000840 <__aeabi_idiv0>
 8000558:	f1ad 0c08 	sub.w	ip, sp, #8
 800055c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000560:	f000 f806 	bl	8000570 <__udivmoddi4>
 8000564:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800056c:	b004      	add	sp, #16
 800056e:	4770      	bx	lr

08000570 <__udivmoddi4>:
 8000570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000574:	9d08      	ldr	r5, [sp, #32]
 8000576:	4604      	mov	r4, r0
 8000578:	468e      	mov	lr, r1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d14d      	bne.n	800061a <__udivmoddi4+0xaa>
 800057e:	428a      	cmp	r2, r1
 8000580:	4694      	mov	ip, r2
 8000582:	d969      	bls.n	8000658 <__udivmoddi4+0xe8>
 8000584:	fab2 f282 	clz	r2, r2
 8000588:	b152      	cbz	r2, 80005a0 <__udivmoddi4+0x30>
 800058a:	fa01 f302 	lsl.w	r3, r1, r2
 800058e:	f1c2 0120 	rsb	r1, r2, #32
 8000592:	fa20 f101 	lsr.w	r1, r0, r1
 8000596:	fa0c fc02 	lsl.w	ip, ip, r2
 800059a:	ea41 0e03 	orr.w	lr, r1, r3
 800059e:	4094      	lsls	r4, r2
 80005a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005a4:	0c21      	lsrs	r1, r4, #16
 80005a6:	fbbe f6f8 	udiv	r6, lr, r8
 80005aa:	fa1f f78c 	uxth.w	r7, ip
 80005ae:	fb08 e316 	mls	r3, r8, r6, lr
 80005b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80005b6:	fb06 f107 	mul.w	r1, r6, r7
 80005ba:	4299      	cmp	r1, r3
 80005bc:	d90a      	bls.n	80005d4 <__udivmoddi4+0x64>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80005c6:	f080 811f 	bcs.w	8000808 <__udivmoddi4+0x298>
 80005ca:	4299      	cmp	r1, r3
 80005cc:	f240 811c 	bls.w	8000808 <__udivmoddi4+0x298>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	1a5b      	subs	r3, r3, r1
 80005d6:	b2a4      	uxth	r4, r4
 80005d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005dc:	fb08 3310 	mls	r3, r8, r0, r3
 80005e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005e4:	fb00 f707 	mul.w	r7, r0, r7
 80005e8:	42a7      	cmp	r7, r4
 80005ea:	d90a      	bls.n	8000602 <__udivmoddi4+0x92>
 80005ec:	eb1c 0404 	adds.w	r4, ip, r4
 80005f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80005f4:	f080 810a 	bcs.w	800080c <__udivmoddi4+0x29c>
 80005f8:	42a7      	cmp	r7, r4
 80005fa:	f240 8107 	bls.w	800080c <__udivmoddi4+0x29c>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000606:	1be4      	subs	r4, r4, r7
 8000608:	2600      	movs	r6, #0
 800060a:	b11d      	cbz	r5, 8000614 <__udivmoddi4+0xa4>
 800060c:	40d4      	lsrs	r4, r2
 800060e:	2300      	movs	r3, #0
 8000610:	e9c5 4300 	strd	r4, r3, [r5]
 8000614:	4631      	mov	r1, r6
 8000616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061a:	428b      	cmp	r3, r1
 800061c:	d909      	bls.n	8000632 <__udivmoddi4+0xc2>
 800061e:	2d00      	cmp	r5, #0
 8000620:	f000 80ef 	beq.w	8000802 <__udivmoddi4+0x292>
 8000624:	2600      	movs	r6, #0
 8000626:	e9c5 0100 	strd	r0, r1, [r5]
 800062a:	4630      	mov	r0, r6
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	fab3 f683 	clz	r6, r3
 8000636:	2e00      	cmp	r6, #0
 8000638:	d14a      	bne.n	80006d0 <__udivmoddi4+0x160>
 800063a:	428b      	cmp	r3, r1
 800063c:	d302      	bcc.n	8000644 <__udivmoddi4+0xd4>
 800063e:	4282      	cmp	r2, r0
 8000640:	f200 80f9 	bhi.w	8000836 <__udivmoddi4+0x2c6>
 8000644:	1a84      	subs	r4, r0, r2
 8000646:	eb61 0303 	sbc.w	r3, r1, r3
 800064a:	2001      	movs	r0, #1
 800064c:	469e      	mov	lr, r3
 800064e:	2d00      	cmp	r5, #0
 8000650:	d0e0      	beq.n	8000614 <__udivmoddi4+0xa4>
 8000652:	e9c5 4e00 	strd	r4, lr, [r5]
 8000656:	e7dd      	b.n	8000614 <__udivmoddi4+0xa4>
 8000658:	b902      	cbnz	r2, 800065c <__udivmoddi4+0xec>
 800065a:	deff      	udf	#255	; 0xff
 800065c:	fab2 f282 	clz	r2, r2
 8000660:	2a00      	cmp	r2, #0
 8000662:	f040 8092 	bne.w	800078a <__udivmoddi4+0x21a>
 8000666:	eba1 010c 	sub.w	r1, r1, ip
 800066a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800066e:	fa1f fe8c 	uxth.w	lr, ip
 8000672:	2601      	movs	r6, #1
 8000674:	0c20      	lsrs	r0, r4, #16
 8000676:	fbb1 f3f7 	udiv	r3, r1, r7
 800067a:	fb07 1113 	mls	r1, r7, r3, r1
 800067e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000682:	fb0e f003 	mul.w	r0, lr, r3
 8000686:	4288      	cmp	r0, r1
 8000688:	d908      	bls.n	800069c <__udivmoddi4+0x12c>
 800068a:	eb1c 0101 	adds.w	r1, ip, r1
 800068e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000692:	d202      	bcs.n	800069a <__udivmoddi4+0x12a>
 8000694:	4288      	cmp	r0, r1
 8000696:	f200 80cb 	bhi.w	8000830 <__udivmoddi4+0x2c0>
 800069a:	4643      	mov	r3, r8
 800069c:	1a09      	subs	r1, r1, r0
 800069e:	b2a4      	uxth	r4, r4
 80006a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006a4:	fb07 1110 	mls	r1, r7, r0, r1
 80006a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006ac:	fb0e fe00 	mul.w	lr, lr, r0
 80006b0:	45a6      	cmp	lr, r4
 80006b2:	d908      	bls.n	80006c6 <__udivmoddi4+0x156>
 80006b4:	eb1c 0404 	adds.w	r4, ip, r4
 80006b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80006bc:	d202      	bcs.n	80006c4 <__udivmoddi4+0x154>
 80006be:	45a6      	cmp	lr, r4
 80006c0:	f200 80bb 	bhi.w	800083a <__udivmoddi4+0x2ca>
 80006c4:	4608      	mov	r0, r1
 80006c6:	eba4 040e 	sub.w	r4, r4, lr
 80006ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006ce:	e79c      	b.n	800060a <__udivmoddi4+0x9a>
 80006d0:	f1c6 0720 	rsb	r7, r6, #32
 80006d4:	40b3      	lsls	r3, r6
 80006d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006da:	ea4c 0c03 	orr.w	ip, ip, r3
 80006de:	fa20 f407 	lsr.w	r4, r0, r7
 80006e2:	fa01 f306 	lsl.w	r3, r1, r6
 80006e6:	431c      	orrs	r4, r3
 80006e8:	40f9      	lsrs	r1, r7
 80006ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006ee:	fa00 f306 	lsl.w	r3, r0, r6
 80006f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80006f6:	0c20      	lsrs	r0, r4, #16
 80006f8:	fa1f fe8c 	uxth.w	lr, ip
 80006fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000700:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000704:	fb08 f00e 	mul.w	r0, r8, lr
 8000708:	4288      	cmp	r0, r1
 800070a:	fa02 f206 	lsl.w	r2, r2, r6
 800070e:	d90b      	bls.n	8000728 <__udivmoddi4+0x1b8>
 8000710:	eb1c 0101 	adds.w	r1, ip, r1
 8000714:	f108 3aff 	add.w	sl, r8, #4294967295
 8000718:	f080 8088 	bcs.w	800082c <__udivmoddi4+0x2bc>
 800071c:	4288      	cmp	r0, r1
 800071e:	f240 8085 	bls.w	800082c <__udivmoddi4+0x2bc>
 8000722:	f1a8 0802 	sub.w	r8, r8, #2
 8000726:	4461      	add	r1, ip
 8000728:	1a09      	subs	r1, r1, r0
 800072a:	b2a4      	uxth	r4, r4
 800072c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000730:	fb09 1110 	mls	r1, r9, r0, r1
 8000734:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000738:	fb00 fe0e 	mul.w	lr, r0, lr
 800073c:	458e      	cmp	lr, r1
 800073e:	d908      	bls.n	8000752 <__udivmoddi4+0x1e2>
 8000740:	eb1c 0101 	adds.w	r1, ip, r1
 8000744:	f100 34ff 	add.w	r4, r0, #4294967295
 8000748:	d26c      	bcs.n	8000824 <__udivmoddi4+0x2b4>
 800074a:	458e      	cmp	lr, r1
 800074c:	d96a      	bls.n	8000824 <__udivmoddi4+0x2b4>
 800074e:	3802      	subs	r0, #2
 8000750:	4461      	add	r1, ip
 8000752:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000756:	fba0 9402 	umull	r9, r4, r0, r2
 800075a:	eba1 010e 	sub.w	r1, r1, lr
 800075e:	42a1      	cmp	r1, r4
 8000760:	46c8      	mov	r8, r9
 8000762:	46a6      	mov	lr, r4
 8000764:	d356      	bcc.n	8000814 <__udivmoddi4+0x2a4>
 8000766:	d053      	beq.n	8000810 <__udivmoddi4+0x2a0>
 8000768:	b15d      	cbz	r5, 8000782 <__udivmoddi4+0x212>
 800076a:	ebb3 0208 	subs.w	r2, r3, r8
 800076e:	eb61 010e 	sbc.w	r1, r1, lr
 8000772:	fa01 f707 	lsl.w	r7, r1, r7
 8000776:	fa22 f306 	lsr.w	r3, r2, r6
 800077a:	40f1      	lsrs	r1, r6
 800077c:	431f      	orrs	r7, r3
 800077e:	e9c5 7100 	strd	r7, r1, [r5]
 8000782:	2600      	movs	r6, #0
 8000784:	4631      	mov	r1, r6
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	f1c2 0320 	rsb	r3, r2, #32
 800078e:	40d8      	lsrs	r0, r3
 8000790:	fa0c fc02 	lsl.w	ip, ip, r2
 8000794:	fa21 f303 	lsr.w	r3, r1, r3
 8000798:	4091      	lsls	r1, r2
 800079a:	4301      	orrs	r1, r0
 800079c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007a0:	fa1f fe8c 	uxth.w	lr, ip
 80007a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007a8:	fb07 3610 	mls	r6, r7, r0, r3
 80007ac:	0c0b      	lsrs	r3, r1, #16
 80007ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80007b2:	fb00 f60e 	mul.w	r6, r0, lr
 80007b6:	429e      	cmp	r6, r3
 80007b8:	fa04 f402 	lsl.w	r4, r4, r2
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x260>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80007c6:	d22f      	bcs.n	8000828 <__udivmoddi4+0x2b8>
 80007c8:	429e      	cmp	r6, r3
 80007ca:	d92d      	bls.n	8000828 <__udivmoddi4+0x2b8>
 80007cc:	3802      	subs	r0, #2
 80007ce:	4463      	add	r3, ip
 80007d0:	1b9b      	subs	r3, r3, r6
 80007d2:	b289      	uxth	r1, r1
 80007d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80007d8:	fb07 3316 	mls	r3, r7, r6, r3
 80007dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007e0:	fb06 f30e 	mul.w	r3, r6, lr
 80007e4:	428b      	cmp	r3, r1
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x28a>
 80007e8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80007f0:	d216      	bcs.n	8000820 <__udivmoddi4+0x2b0>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d914      	bls.n	8000820 <__udivmoddi4+0x2b0>
 80007f6:	3e02      	subs	r6, #2
 80007f8:	4461      	add	r1, ip
 80007fa:	1ac9      	subs	r1, r1, r3
 80007fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000800:	e738      	b.n	8000674 <__udivmoddi4+0x104>
 8000802:	462e      	mov	r6, r5
 8000804:	4628      	mov	r0, r5
 8000806:	e705      	b.n	8000614 <__udivmoddi4+0xa4>
 8000808:	4606      	mov	r6, r0
 800080a:	e6e3      	b.n	80005d4 <__udivmoddi4+0x64>
 800080c:	4618      	mov	r0, r3
 800080e:	e6f8      	b.n	8000602 <__udivmoddi4+0x92>
 8000810:	454b      	cmp	r3, r9
 8000812:	d2a9      	bcs.n	8000768 <__udivmoddi4+0x1f8>
 8000814:	ebb9 0802 	subs.w	r8, r9, r2
 8000818:	eb64 0e0c 	sbc.w	lr, r4, ip
 800081c:	3801      	subs	r0, #1
 800081e:	e7a3      	b.n	8000768 <__udivmoddi4+0x1f8>
 8000820:	4646      	mov	r6, r8
 8000822:	e7ea      	b.n	80007fa <__udivmoddi4+0x28a>
 8000824:	4620      	mov	r0, r4
 8000826:	e794      	b.n	8000752 <__udivmoddi4+0x1e2>
 8000828:	4640      	mov	r0, r8
 800082a:	e7d1      	b.n	80007d0 <__udivmoddi4+0x260>
 800082c:	46d0      	mov	r8, sl
 800082e:	e77b      	b.n	8000728 <__udivmoddi4+0x1b8>
 8000830:	3b02      	subs	r3, #2
 8000832:	4461      	add	r1, ip
 8000834:	e732      	b.n	800069c <__udivmoddi4+0x12c>
 8000836:	4630      	mov	r0, r6
 8000838:	e709      	b.n	800064e <__udivmoddi4+0xde>
 800083a:	4464      	add	r4, ip
 800083c:	3802      	subs	r0, #2
 800083e:	e742      	b.n	80006c6 <__udivmoddi4+0x156>

08000840 <__aeabi_idiv0>:
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <gecen_sure>:
/* USER CODE END 0 */
double mesafe = 0;
uint32_t timer1 = 0;
uint32_t count=0;
uint32_t gecen_sure()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2110      	movs	r1, #16
 800084c:	481f      	ldr	r0, [pc, #124]	; (80008cc <gecen_sure+0x88>)
 800084e:	f000 fd8d 	bl	800136c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim1);
 8000852:	481f      	ldr	r0, [pc, #124]	; (80008d0 <gecen_sure+0x8c>)
 8000854:	f001 fa18 	bl	8001c88 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim1)<=8);
 8000858:	bf00      	nop
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <gecen_sure+0x8c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000860:	2b08      	cmp	r3, #8
 8000862:	d9fa      	bls.n	800085a <gecen_sure+0x16>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2110      	movs	r1, #16
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <gecen_sure+0x88>)
 800086a:	f000 fd7f 	bl	800136c <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start(&htim2);
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <gecen_sure+0x90>)
 8000870:	f001 fa0a 	bl	8001c88 <HAL_TIM_Base_Start>
	while(!(__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_TRIGGER)));
 8000874:	bf00      	nop
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <gecen_sure+0x90>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000880:	2b40      	cmp	r3, #64	; 0x40
 8000882:	d1f8      	bne.n	8000876 <gecen_sure+0x32>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000884:	e004      	b.n	8000890 <gecen_sure+0x4c>
		{
		count = __HAL_TIM_GET_COUNTER(&htim2);
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <gecen_sure+0x90>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <gecen_sure+0x94>)
 800088e:	6013      	str	r3, [r2, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000890:	2102      	movs	r1, #2
 8000892:	4812      	ldr	r0, [pc, #72]	; (80008dc <gecen_sure+0x98>)
 8000894:	f000 fd52 	bl	800133c <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1f3      	bne.n	8000886 <gecen_sure+0x42>
		}
	__HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_TRIGGER);
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <gecen_sure+0x90>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80008a6:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Stop(&htim1);
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <gecen_sure+0x8c>)
 80008aa:	f001 fa55 	bl	8001d58 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <gecen_sure+0x8c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Stop(&htim2);
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <gecen_sure+0x90>)
 80008b8:	f001 fa4e 	bl	8001d58 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <gecen_sure+0x90>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24

    return count;
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <gecen_sure+0x94>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	2000002c 	.word	0x2000002c
 80008d4:	20000074 	.word	0x20000074
 80008d8:	200000c8 	.word	0x200000c8
 80008dc:	40020000 	.word	0x40020000

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f000 fa36 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f814 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f000 f928 	bl	8000b40 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008f0:	f000 f8be 	bl	8000a70 <MX_TIM2_Init>
  MX_TIM1_Init();
 80008f4:	f000 f86c 	bl	80009d0 <MX_TIM1_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
		 mesafe = (double)gecen_sure();
 80008f8:	f7ff ffa4 	bl	8000844 <gecen_sure>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fda4 	bl	800044c <__aeabi_ui2d>
 8000904:	4602      	mov	r2, r0
 8000906:	460b      	mov	r3, r1
 8000908:	4901      	ldr	r1, [pc, #4]	; (8000910 <main+0x30>)
 800090a:	e9c1 2300 	strd	r2, r3, [r1]
 800090e:	e7f3      	b.n	80008f8 <main+0x18>
 8000910:	200000c0 	.word	0x200000c0

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	2230      	movs	r2, #48	; 0x30
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fdb4 	bl	8002490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <SystemClock_Config+0xb4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SystemClock_Config+0xb4>)
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <SystemClock_Config+0xb4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <SystemClock_Config+0xb8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <SystemClock_Config+0xb8>)
 800095e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <SystemClock_Config+0xb8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	2301      	movs	r3, #1
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2310      	movs	r3, #16
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097c:	2300      	movs	r3, #0
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fd0b 	bl	80013a0 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000990:	f000 f8f0 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	230f      	movs	r3, #15
 8000996:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 ff6e 	bl	8001890 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009ba:	f000 f8db 	bl	8000b74 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	; 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_TIM1_Init+0x98>)
 80009ee:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <MX_TIM1_Init+0x9c>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_TIM1_Init+0x98>)
 80009f4:	2210      	movs	r2, #16
 80009f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_TIM1_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a1a:	f001 f8e5 	bl	8001be8 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a24:	f000 f8a6 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a36:	f001 f9b6 	bl	8001da6 <HAL_TIM_ConfigClockSource>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a40:	f000 f898 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a52:	f001 fc7d 	bl	8002350 <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a5c:	f000 f88a 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000002c 	.word	0x2000002c
 8000a6c:	40010000 	.word	0x40010000

08000a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8000aa4:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000000;
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MX_TIM2_Init+0xcc>)
 8000ab4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac2:	481d      	ldr	r0, [pc, #116]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000ac4:	f001 f890 	bl	8001be8 <HAL_TIM_Base_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000ace:	f000 f851 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4619      	mov	r1, r3
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000ae0:	f001 f961 	bl	8001da6 <HAL_TIM_ConfigClockSource>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000aea:	f000 f843 	bl	8000b74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000aee:	2305      	movs	r3, #5
 8000af0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000af2:	2360      	movs	r3, #96	; 0x60
 8000af4:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000b06:	f001 fa15 	bl	8001f34 <HAL_TIM_SlaveConfigSynchro>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000b10:	f000 f830 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_TIM2_Init+0xc8>)
 8000b22:	f001 fc15 	bl	8002350 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000b2c:	f000 f822 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000074 	.word	0x20000074
 8000b3c:	3b9aca00 	.word	0x3b9aca00

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_GPIO_Init+0x30>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <MX_GPIO_Init+0x30>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_GPIO_Init+0x30>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <HAL_TIM_Base_MspInit+0xac>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d10e      	bne.n	8000c10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <HAL_TIM_Base_MspInit+0xb0>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <HAL_TIM_Base_MspInit+0xb0>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_TIM_Base_MspInit+0xb0>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c0e:	e030      	b.n	8000c72 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c18:	d12b      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_TIM_Base_MspInit+0xb0>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_TIM_Base_MspInit+0xb0>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_TIM_Base_MspInit+0xb0>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_TIM_Base_MspInit+0xb0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_TIM_Base_MspInit+0xb0>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_TIM_Base_MspInit+0xb0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_TIM_Base_MspInit+0xb4>)
 8000c6e:	f000 f9c9 	bl	8001004 <HAL_GPIO_Init>
}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 f890 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d1c:	4c0b      	ldr	r4, [pc, #44]	; (8000d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2a:	f7ff ffd7 	bl	8000cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f001 fb8b 	bl	8002448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d32:	f7ff fdd5 	bl	80008e0 <main>
  bx  lr    
 8000d36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d44:	080024d8 	.word	0x080024d8
  ldr r2, =_sbss
 8000d48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d4c:	200000d0 	.word	0x200000d0

08000d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <HAL_Init+0x40>)
 8000d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_Init+0x40>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_Init+0x40>)
 8000d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f90d 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d82:	200f      	movs	r0, #15
 8000d84:	f000 f808 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d88:	f7ff fefa 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x54>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x58>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f917 	bl	8000fea <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00e      	b.n	8000de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d80a      	bhi.n	8000de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f000 f8ed 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_InitTick+0x5c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	200000cc 	.word	0x200000cc

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	200000cc 	.word	0x200000cc

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff47 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff5c 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffb0 	bl	8000f58 <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e16b      	b.n	80012f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 815a 	bne.w	80012f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80b4 	beq.w	80012f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b60      	ldr	r3, [pc, #384]	; (8001310 <HAL_GPIO_Init+0x30c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a5f      	ldr	r2, [pc, #380]	; (8001310 <HAL_GPIO_Init+0x30c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <HAL_GPIO_Init+0x30c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a5b      	ldr	r2, [pc, #364]	; (8001314 <HAL_GPIO_Init+0x310>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x226>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a51      	ldr	r2, [pc, #324]	; (800131c <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x222>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a50      	ldr	r2, [pc, #320]	; (8001320 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x21e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_GPIO_Init+0x324>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x328>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x32c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <HAL_GPIO_Init+0x330>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x20a>
 800120a:	2307      	movs	r3, #7
 800120c:	e00e      	b.n	800122c <HAL_GPIO_Init+0x228>
 800120e:	2308      	movs	r3, #8
 8001210:	e00c      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001212:	2306      	movs	r3, #6
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x228>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	; (8001314 <HAL_GPIO_Init+0x310>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_GPIO_Init+0x334>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a32      	ldr	r2, [pc, #200]	; (8001338 <HAL_GPIO_Init+0x334>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b30      	ldr	r3, [pc, #192]	; (8001338 <HAL_GPIO_Init+0x334>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a27      	ldr	r2, [pc, #156]	; (8001338 <HAL_GPIO_Init+0x334>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f ae90 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40021c00 	.word	0x40021c00
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e001      	b.n	800135e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e267      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d075      	beq.n	80014aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013be:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d00c      	beq.n	80013e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ca:	4b85      	ldr	r3, [pc, #532]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d112      	bne.n	80013fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d6:	4b82      	ldr	r3, [pc, #520]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013e2:	d10b      	bne.n	80013fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	4b7e      	ldr	r3, [pc, #504]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d05b      	beq.n	80014a8 <HAL_RCC_OscConfig+0x108>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d157      	bne.n	80014a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e242      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x74>
 8001406:	4b76      	ldr	r3, [pc, #472]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a75      	ldr	r2, [pc, #468]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e01d      	b.n	8001450 <HAL_RCC_OscConfig+0xb0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x98>
 800141e:	4b70      	ldr	r3, [pc, #448]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a6f      	ldr	r2, [pc, #444]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b6d      	ldr	r3, [pc, #436]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6c      	ldr	r2, [pc, #432]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0xb0>
 8001438:	4b69      	ldr	r3, [pc, #420]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a68      	ldr	r2, [pc, #416]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b66      	ldr	r3, [pc, #408]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a65      	ldr	r2, [pc, #404]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 800144a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fce2 	bl	8000e20 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fcde 	bl	8000e20 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e207      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b5b      	ldr	r3, [pc, #364]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0xc0>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fcce 	bl	8000e20 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fcca 	bl	8000e20 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e1f3      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0xe8>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d063      	beq.n	800157e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b6:	4b4a      	ldr	r3, [pc, #296]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d11c      	bne.n	8001508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ce:	4b44      	ldr	r3, [pc, #272]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d116      	bne.n	8001508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x152>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e1c7      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4937      	ldr	r1, [pc, #220]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	e03a      	b.n	800157e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_RCC_OscConfig+0x244>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff fc83 	bl	8000e20 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fc7f 	bl	8000e20 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1a8      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4925      	ldr	r1, [pc, #148]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_RCC_OscConfig+0x244>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fc62 	bl	8000e20 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff fc5e 	bl	8000e20 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e187      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d036      	beq.n	80015f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d016      	beq.n	80015c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_RCC_OscConfig+0x248>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001598:	f7ff fc42 	bl	8000e20 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fc3e 	bl	8000e20 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e167      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_OscConfig+0x240>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x200>
 80015be:	e01b      	b.n	80015f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_RCC_OscConfig+0x248>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fc2b 	bl	8000e20 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	e00e      	b.n	80015ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fc27 	bl	8000e20 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d907      	bls.n	80015ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e150      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
 80015e0:	40023800 	.word	0x40023800
 80015e4:	42470000 	.word	0x42470000
 80015e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	4b88      	ldr	r3, [pc, #544]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80015ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1ea      	bne.n	80015ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 8097 	beq.w	8001734 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160a:	4b81      	ldr	r3, [pc, #516]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10f      	bne.n	8001636 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b7d      	ldr	r3, [pc, #500]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a7c      	ldr	r2, [pc, #496]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b7a      	ldr	r3, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	4b77      	ldr	r3, [pc, #476]	; (8001814 <HAL_RCC_OscConfig+0x474>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d118      	bne.n	8001674 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001642:	4b74      	ldr	r3, [pc, #464]	; (8001814 <HAL_RCC_OscConfig+0x474>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a73      	ldr	r2, [pc, #460]	; (8001814 <HAL_RCC_OscConfig+0x474>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164e:	f7ff fbe7 	bl	8000e20 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001656:	f7ff fbe3 	bl	8000e20 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e10c      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <HAL_RCC_OscConfig+0x474>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x2ea>
 800167c:	4b64      	ldr	r3, [pc, #400]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001680:	4a63      	ldr	r2, [pc, #396]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6713      	str	r3, [r2, #112]	; 0x70
 8001688:	e01c      	b.n	80016c4 <HAL_RCC_OscConfig+0x324>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x30c>
 8001692:	4b5f      	ldr	r3, [pc, #380]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	4a5e      	ldr	r2, [pc, #376]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6713      	str	r3, [r2, #112]	; 0x70
 800169e:	4b5c      	ldr	r3, [pc, #368]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a5b      	ldr	r2, [pc, #364]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0x324>
 80016ac:	4b58      	ldr	r3, [pc, #352]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	4a57      	ldr	r2, [pc, #348]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	; 0x70
 80016b8:	4b55      	ldr	r3, [pc, #340]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	4a54      	ldr	r2, [pc, #336]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80016be:	f023 0304 	bic.w	r3, r3, #4
 80016c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d015      	beq.n	80016f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fba8 	bl	8000e20 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff fba4 	bl	8000e20 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0cb      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ea:	4b49      	ldr	r3, [pc, #292]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0ee      	beq.n	80016d4 <HAL_RCC_OscConfig+0x334>
 80016f6:	e014      	b.n	8001722 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fb92 	bl	8000e20 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f7ff fb8e 	bl	8000e20 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	; 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e0b5      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001716:	4b3e      	ldr	r3, [pc, #248]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ee      	bne.n	8001700 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001728:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	4a38      	ldr	r2, [pc, #224]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 800172e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a1 	beq.w	8001880 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173e:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b08      	cmp	r3, #8
 8001748:	d05c      	beq.n	8001804 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d141      	bne.n	80017d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b31      	ldr	r3, [pc, #196]	; (8001818 <HAL_RCC_OscConfig+0x478>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb62 	bl	8000e20 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff fb5e 	bl	8000e20 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e087      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69da      	ldr	r2, [r3, #28]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	3b01      	subs	r3, #1
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	061b      	lsls	r3, r3, #24
 80017a2:	491b      	ldr	r1, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x478>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fb37 	bl	8000e20 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fb33 	bl	8000e20 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e05c      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x416>
 80017d4:	e054      	b.n	8001880 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_RCC_OscConfig+0x478>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb20 	bl	8000e20 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fb1c 	bl	8000e20 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e045      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_OscConfig+0x470>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x444>
 8001802:	e03d      	b.n	8001880 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e038      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
 8001810:	40023800 	.word	0x40023800
 8001814:	40007000 	.word	0x40007000
 8001818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x4ec>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d028      	beq.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d121      	bne.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d11a      	bne.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001852:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001854:	4293      	cmp	r3, r2
 8001856:	d111      	bne.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	085b      	lsrs	r3, r3, #1
 8001864:	3b01      	subs	r3, #1
 8001866:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d107      	bne.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0cc      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d90c      	bls.n	80018cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b65      	ldr	r3, [pc, #404]	; (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0b8      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e4:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4a58      	ldr	r2, [pc, #352]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018fc:	4b53      	ldr	r3, [pc, #332]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a52      	ldr	r2, [pc, #328]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001908:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	494d      	ldr	r1, [pc, #308]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d044      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d119      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e07f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d003      	beq.n	800194e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194a:	2b03      	cmp	r3, #3
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194e:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e067      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f023 0203 	bic.w	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4934      	ldr	r1, [pc, #208]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001980:	f7ff fa4e 	bl	8000e20 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	e00a      	b.n	800199e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001988:	f7ff fa4a 	bl	8000e20 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	; 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e04f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 020c 	and.w	r2, r3, #12
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1eb      	bne.n	8001988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d20c      	bcs.n	80019d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e032      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4916      	ldr	r1, [pc, #88]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	490e      	ldr	r1, [pc, #56]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a16:	f000 f821 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	490a      	ldr	r1, [pc, #40]	; (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	5ccb      	ldrb	r3, [r1, r3]
 8001a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f9ae 	bl	8000d98 <HAL_InitTick>

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	080024b8 	.word	0x080024b8
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a60:	b090      	sub	sp, #64	; 0x40
 8001a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d00d      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x40>
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	f200 80a1 	bhi.w	8001bc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x34>
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d003      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8e:	e09b      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a94:	e09b      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a96:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a9a:	e098      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a9c:	4b4f      	ldr	r3, [pc, #316]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d028      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	099b      	lsrs	r3, r3, #6
 8001ab8:	2200      	movs	r2, #0
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	627a      	str	r2, [r7, #36]	; 0x24
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ac8:	fb03 f201 	mul.w	r2, r3, r1
 8001acc:	2300      	movs	r3, #0
 8001ace:	fb00 f303 	mul.w	r3, r0, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a43      	ldr	r2, [pc, #268]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad6:	fba0 1202 	umull	r1, r2, r0, r2
 8001ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001adc:	460a      	mov	r2, r1
 8001ade:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae2:	4413      	add	r3, r2
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	61fa      	str	r2, [r7, #28]
 8001aee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001af6:	f7fe fd23 	bl	8000540 <__aeabi_uldivmod>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4613      	mov	r3, r2
 8001b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b02:	e053      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	617a      	str	r2, [r7, #20]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b16:	f04f 0b00 	mov.w	fp, #0
 8001b1a:	4652      	mov	r2, sl
 8001b1c:	465b      	mov	r3, fp
 8001b1e:	f04f 0000 	mov.w	r0, #0
 8001b22:	f04f 0100 	mov.w	r1, #0
 8001b26:	0159      	lsls	r1, r3, #5
 8001b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b2c:	0150      	lsls	r0, r2, #5
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	ebb2 080a 	subs.w	r8, r2, sl
 8001b36:	eb63 090b 	sbc.w	r9, r3, fp
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b4e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b52:	eb63 0509 	sbc.w	r5, r3, r9
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	00eb      	lsls	r3, r5, #3
 8001b60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b64:	00e2      	lsls	r2, r4, #3
 8001b66:	4614      	mov	r4, r2
 8001b68:	461d      	mov	r5, r3
 8001b6a:	eb14 030a 	adds.w	r3, r4, sl
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	eb45 030b 	adc.w	r3, r5, fp
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b82:	4629      	mov	r1, r5
 8001b84:	028b      	lsls	r3, r1, #10
 8001b86:	4621      	mov	r1, r4
 8001b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	028a      	lsls	r2, r1, #10
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	2200      	movs	r2, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	60fa      	str	r2, [r7, #12]
 8001b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ba0:	f7fe fcce 	bl	8000540 <__aeabi_uldivmod>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4613      	mov	r3, r2
 8001baa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bc6:	e002      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3740      	adds	r7, #64	; 0x40
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	00f42400 	.word	0x00f42400
 8001be4:	017d7840 	.word	0x017d7840

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe ffde 	bl	8000bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f9c6 	bl	8001fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d001      	beq.n	8001ca0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e046      	b.n	8001d2e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_TIM_Base_Start+0xb4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d022      	beq.n	8001cf8 <HAL_TIM_Base_Start+0x70>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cba:	d01d      	beq.n	8001cf8 <HAL_TIM_Base_Start+0x70>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_TIM_Base_Start+0xb8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d018      	beq.n	8001cf8 <HAL_TIM_Base_Start+0x70>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <HAL_TIM_Base_Start+0xbc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d013      	beq.n	8001cf8 <HAL_TIM_Base_Start+0x70>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <HAL_TIM_Base_Start+0xc0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00e      	beq.n	8001cf8 <HAL_TIM_Base_Start+0x70>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1b      	ldr	r2, [pc, #108]	; (8001d4c <HAL_TIM_Base_Start+0xc4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_TIM_Base_Start+0x70>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_TIM_Base_Start+0xc8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_TIM_Base_Start+0x70>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_TIM_Base_Start+0xcc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d111      	bne.n	8001d1c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d010      	beq.n	8001d2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1a:	e007      	b.n	8001d2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40000800 	.word	0x40000800
 8001d48:	40000c00 	.word	0x40000c00
 8001d4c:	40010400 	.word	0x40010400
 8001d50:	40014000 	.word	0x40014000
 8001d54:	40001800 	.word	0x40001800

08001d58 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	f241 1311 	movw	r3, #4369	; 0x1111
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10f      	bne.n	8001d90 <HAL_TIM_Base_Stop+0x38>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6a1a      	ldr	r2, [r3, #32]
 8001d76:	f240 4344 	movw	r3, #1092	; 0x444
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_TIM_Base_Stop+0x38>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_TIM_ConfigClockSource+0x1c>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e0b4      	b.n	8001f2c <HAL_TIM_ConfigClockSource+0x186>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001de0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001de8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfa:	d03e      	beq.n	8001e7a <HAL_TIM_ConfigClockSource+0xd4>
 8001dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e00:	f200 8087 	bhi.w	8001f12 <HAL_TIM_ConfigClockSource+0x16c>
 8001e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e08:	f000 8086 	beq.w	8001f18 <HAL_TIM_ConfigClockSource+0x172>
 8001e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e10:	d87f      	bhi.n	8001f12 <HAL_TIM_ConfigClockSource+0x16c>
 8001e12:	2b70      	cmp	r3, #112	; 0x70
 8001e14:	d01a      	beq.n	8001e4c <HAL_TIM_ConfigClockSource+0xa6>
 8001e16:	2b70      	cmp	r3, #112	; 0x70
 8001e18:	d87b      	bhi.n	8001f12 <HAL_TIM_ConfigClockSource+0x16c>
 8001e1a:	2b60      	cmp	r3, #96	; 0x60
 8001e1c:	d050      	beq.n	8001ec0 <HAL_TIM_ConfigClockSource+0x11a>
 8001e1e:	2b60      	cmp	r3, #96	; 0x60
 8001e20:	d877      	bhi.n	8001f12 <HAL_TIM_ConfigClockSource+0x16c>
 8001e22:	2b50      	cmp	r3, #80	; 0x50
 8001e24:	d03c      	beq.n	8001ea0 <HAL_TIM_ConfigClockSource+0xfa>
 8001e26:	2b50      	cmp	r3, #80	; 0x50
 8001e28:	d873      	bhi.n	8001f12 <HAL_TIM_ConfigClockSource+0x16c>
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d058      	beq.n	8001ee0 <HAL_TIM_ConfigClockSource+0x13a>
 8001e2e:	2b40      	cmp	r3, #64	; 0x40
 8001e30:	d86f      	bhi.n	8001f12 <HAL_TIM_ConfigClockSource+0x16c>
 8001e32:	2b30      	cmp	r3, #48	; 0x30
 8001e34:	d064      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x15a>
 8001e36:	2b30      	cmp	r3, #48	; 0x30
 8001e38:	d86b      	bhi.n	8001f12 <HAL_TIM_ConfigClockSource+0x16c>
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d060      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x15a>
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d867      	bhi.n	8001f12 <HAL_TIM_ConfigClockSource+0x16c>
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d05c      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x15a>
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d05a      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x15a>
 8001e4a:	e062      	b.n	8001f12 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f000 fa57 	bl	800230e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
      break;
 8001e78:	e04f      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6899      	ldr	r1, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f000 fa40 	bl	800230e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e9c:	609a      	str	r2, [r3, #8]
      break;
 8001e9e:	e03c      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	461a      	mov	r2, r3
 8001eae:	f000 f9b4 	bl	800221a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2150      	movs	r1, #80	; 0x50
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fa0d 	bl	80022d8 <TIM_ITRx_SetConfig>
      break;
 8001ebe:	e02c      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f000 f9d3 	bl	8002278 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2160      	movs	r1, #96	; 0x60
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f9fd 	bl	80022d8 <TIM_ITRx_SetConfig>
      break;
 8001ede:	e01c      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	461a      	mov	r2, r3
 8001eee:	f000 f994 	bl	800221a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f9ed 	bl	80022d8 <TIM_ITRx_SetConfig>
      break;
 8001efe:	e00c      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f000 f9e4 	bl	80022d8 <TIM_ITRx_SetConfig>
      break;
 8001f10:	e003      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
      break;
 8001f16:	e000      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_TIM_SlaveConfigSynchro+0x18>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e031      	b.n	8001fb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8ca 	bl	80020f8 <TIM_SlaveTimer_SetConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e018      	b.n	8001fb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f9c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <TIM_Base_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd6:	d00f      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <TIM_Base_SetConfig+0x118>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	; (80020d4 <TIM_Base_SetConfig+0x11c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <TIM_Base_SetConfig+0x120>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3a      	ldr	r2, [pc, #232]	; (80020dc <TIM_Base_SetConfig+0x124>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d108      	bne.n	800200a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <TIM_Base_SetConfig+0x114>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d027      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2c      	ldr	r2, [pc, #176]	; (80020d0 <TIM_Base_SetConfig+0x118>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d023      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <TIM_Base_SetConfig+0x11c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <TIM_Base_SetConfig+0x120>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <TIM_Base_SetConfig+0x124>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d017      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <TIM_Base_SetConfig+0x128>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <TIM_Base_SetConfig+0x12c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <TIM_Base_SetConfig+0x130>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a25      	ldr	r2, [pc, #148]	; (80020ec <TIM_Base_SetConfig+0x134>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <TIM_Base_SetConfig+0x138>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <TIM_Base_SetConfig+0x13c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <TIM_Base_SetConfig+0x114>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <TIM_Base_SetConfig+0xf8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <TIM_Base_SetConfig+0x124>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d103      	bne.n	80020b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	615a      	str	r2, [r3, #20]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40010400 	.word	0x40010400
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800
 80020ec:	40001800 	.word	0x40001800
 80020f0:	40001c00 	.word	0x40001c00
 80020f4:	40002000 	.word	0x40002000

080020f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002114:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f023 0307 	bic.w	r3, r3, #7
 8002126:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b70      	cmp	r3, #112	; 0x70
 8002140:	d01a      	beq.n	8002178 <TIM_SlaveTimer_SetConfig+0x80>
 8002142:	2b70      	cmp	r3, #112	; 0x70
 8002144:	d860      	bhi.n	8002208 <TIM_SlaveTimer_SetConfig+0x110>
 8002146:	2b60      	cmp	r3, #96	; 0x60
 8002148:	d054      	beq.n	80021f4 <TIM_SlaveTimer_SetConfig+0xfc>
 800214a:	2b60      	cmp	r3, #96	; 0x60
 800214c:	d85c      	bhi.n	8002208 <TIM_SlaveTimer_SetConfig+0x110>
 800214e:	2b50      	cmp	r3, #80	; 0x50
 8002150:	d046      	beq.n	80021e0 <TIM_SlaveTimer_SetConfig+0xe8>
 8002152:	2b50      	cmp	r3, #80	; 0x50
 8002154:	d858      	bhi.n	8002208 <TIM_SlaveTimer_SetConfig+0x110>
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d019      	beq.n	800218e <TIM_SlaveTimer_SetConfig+0x96>
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d854      	bhi.n	8002208 <TIM_SlaveTimer_SetConfig+0x110>
 800215e:	2b30      	cmp	r3, #48	; 0x30
 8002160:	d055      	beq.n	800220e <TIM_SlaveTimer_SetConfig+0x116>
 8002162:	2b30      	cmp	r3, #48	; 0x30
 8002164:	d850      	bhi.n	8002208 <TIM_SlaveTimer_SetConfig+0x110>
 8002166:	2b20      	cmp	r3, #32
 8002168:	d051      	beq.n	800220e <TIM_SlaveTimer_SetConfig+0x116>
 800216a:	2b20      	cmp	r3, #32
 800216c:	d84c      	bhi.n	8002208 <TIM_SlaveTimer_SetConfig+0x110>
 800216e:	2b00      	cmp	r3, #0
 8002170:	d04d      	beq.n	800220e <TIM_SlaveTimer_SetConfig+0x116>
 8002172:	2b10      	cmp	r3, #16
 8002174:	d04b      	beq.n	800220e <TIM_SlaveTimer_SetConfig+0x116>
 8002176:	e047      	b.n	8002208 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68d9      	ldr	r1, [r3, #12]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f000 f8c1 	bl	800230e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800218c:	e040      	b.n	8002210 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b05      	cmp	r3, #5
 8002194:	d101      	bne.n	800219a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e03b      	b.n	8002212 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	621a      	str	r2, [r3, #32]
      break;
 80021de:	e017      	b.n	8002210 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f000 f814 	bl	800221a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80021f2:	e00d      	b.n	8002210 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	461a      	mov	r2, r3
 8002202:	f000 f839 	bl	8002278 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002206:	e003      	b.n	8002210 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	75fb      	strb	r3, [r7, #23]
      break;
 800220c:	e000      	b.n	8002210 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800220e:	bf00      	nop
  }

  return status;
 8002210:	7dfb      	ldrb	r3, [r7, #23]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800221a:	b480      	push	{r7}
 800221c:	b087      	sub	sp, #28
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f023 0201 	bic.w	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f023 030a 	bic.w	r3, r3, #10
 8002256:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	621a      	str	r2, [r3, #32]
}
 800226c:	bf00      	nop
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f023 0210 	bic.w	r2, r3, #16
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	031b      	lsls	r3, r3, #12
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	621a      	str	r2, [r3, #32]
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f043 0307 	orr.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	609a      	str	r2, [r3, #8]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800230e:	b480      	push	{r7}
 8002310:	b087      	sub	sp, #28
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002328:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	021a      	lsls	r2, r3, #8
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	431a      	orrs	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	4313      	orrs	r3, r2
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	609a      	str	r2, [r3, #8]
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002364:	2302      	movs	r3, #2
 8002366:	e05a      	b.n	800241e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d022      	beq.n	80023f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b4:	d01d      	beq.n	80023f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d018      	beq.n	80023f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00e      	beq.n	80023f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d009      	beq.n	80023f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a17      	ldr	r2, [pc, #92]	; (8002440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d004      	beq.n	80023f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a15      	ldr	r2, [pc, #84]	; (8002444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10c      	bne.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	4313      	orrs	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000
 8002430:	40000400 	.word	0x40000400
 8002434:	40000800 	.word	0x40000800
 8002438:	40000c00 	.word	0x40000c00
 800243c:	40010400 	.word	0x40010400
 8002440:	40014000 	.word	0x40014000
 8002444:	40001800 	.word	0x40001800

08002448 <__libc_init_array>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	4d0d      	ldr	r5, [pc, #52]	; (8002480 <__libc_init_array+0x38>)
 800244c:	4c0d      	ldr	r4, [pc, #52]	; (8002484 <__libc_init_array+0x3c>)
 800244e:	1b64      	subs	r4, r4, r5
 8002450:	10a4      	asrs	r4, r4, #2
 8002452:	2600      	movs	r6, #0
 8002454:	42a6      	cmp	r6, r4
 8002456:	d109      	bne.n	800246c <__libc_init_array+0x24>
 8002458:	4d0b      	ldr	r5, [pc, #44]	; (8002488 <__libc_init_array+0x40>)
 800245a:	4c0c      	ldr	r4, [pc, #48]	; (800248c <__libc_init_array+0x44>)
 800245c:	f000 f820 	bl	80024a0 <_init>
 8002460:	1b64      	subs	r4, r4, r5
 8002462:	10a4      	asrs	r4, r4, #2
 8002464:	2600      	movs	r6, #0
 8002466:	42a6      	cmp	r6, r4
 8002468:	d105      	bne.n	8002476 <__libc_init_array+0x2e>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002470:	4798      	blx	r3
 8002472:	3601      	adds	r6, #1
 8002474:	e7ee      	b.n	8002454 <__libc_init_array+0xc>
 8002476:	f855 3b04 	ldr.w	r3, [r5], #4
 800247a:	4798      	blx	r3
 800247c:	3601      	adds	r6, #1
 800247e:	e7f2      	b.n	8002466 <__libc_init_array+0x1e>
 8002480:	080024d0 	.word	0x080024d0
 8002484:	080024d0 	.word	0x080024d0
 8002488:	080024d0 	.word	0x080024d0
 800248c:	080024d4 	.word	0x080024d4

08002490 <memset>:
 8002490:	4402      	add	r2, r0
 8002492:	4603      	mov	r3, r0
 8002494:	4293      	cmp	r3, r2
 8002496:	d100      	bne.n	800249a <memset+0xa>
 8002498:	4770      	bx	lr
 800249a:	f803 1b01 	strb.w	r1, [r3], #1
 800249e:	e7f9      	b.n	8002494 <memset+0x4>

080024a0 <_init>:
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	bf00      	nop
 80024a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a6:	bc08      	pop	{r3}
 80024a8:	469e      	mov	lr, r3
 80024aa:	4770      	bx	lr

080024ac <_fini>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	bf00      	nop
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr
